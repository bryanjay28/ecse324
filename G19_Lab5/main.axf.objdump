
//campus.mcgill.ca/EMF/ELE/bjay/Desktop/ecse324/G19_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	84 17 00 00 90 17 00 00 9c 17 00 00 a8 17 00 00     ................
      30:	b4 17 00 00 d8 2a 00 00 2c 16 00 00 c0 17 00 00     .....*..,.......

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000a66 	bl	2a74 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002bc0 	.word	0x00002bc0

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031e20 	.word	0x00031e20

00000124 <__cs3_heap_start_ptr>:
     124:	00031e68 	.word	0x00031e68

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031e28 	.word	0x00031e28
     170:	00031e2b 	.word	0x00031e2b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031e28 	.word	0x00031e28
     1bc:	00031e28 	.word	0x00031e28
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031e28 	.word	0x00031e28
     200:	00000000 	.word	0x00000000
     204:	00002b64 	.word	0x00002b64

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002b64 	.word	0x00002b64
     250:	00031e2c 	.word	0x00031e2c
     254:	00002bc0 	.word	0x00002bc0
     258:	00000000 	.word	0x00000000

0000025c <main>:
float frequency[8] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};

int pressed[8] = {0, 0, 0, 0, 0, 0, 0, 0};	// boolean value to keep track if keys were pressed


int main() {
     25c:	e92d4810 	push	{r4, r11, lr}
     260:	e28db008 	add	r11, sp, #8
     264:	e24dd034 	sub	sp, sp, #52	; 0x34
	// setup interrupts with the given int_setup function
	int_setup(1, (int[]){199});
     268:	e3a030c7 	mov	r3, #199	; 0xc7
     26c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     270:	e24b3020 	sub	r3, r11, #32
     274:	e3a00001 	mov	r0, #1
     278:	e1a01003 	mov	r1, r3
     27c:	eb00055e 	bl	17fc <int_setup>

	// initialize timer used to feed generated samples
	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0;
     280:	e3a03001 	mov	r3, #1
     284:	e54b3038 	strb	r3, [r11, #-56]	; 0xffffffc8
	hps_tim.timeout = 20; //speed of timer 1 1/48000
     288:	e3a03014 	mov	r3, #20
     28c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
	hps_tim.LD_en = 1;
     290:	e3a03001 	mov	r3, #1
     294:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.INT_en = 1;
     298:	e3a03001 	mov	r3, #1
     29c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.enable = 1;
     2a0:	e3a03001 	mov	r3, #1
     2a4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8

	// configuration of the timer 
	HPS_TIM_config_ASM(&hps_tim);
     2a8:	e24b3038 	sub	r3, r11, #56	; 0x38
     2ac:	e1a00003 	mov	r0, r3
     2b0:	eb000284 	bl	cc8 <HPS_TIM_config_ASM>

	// initialization of the variables
	float freq; // freq of notes
	char *data;
	int clock = 0; // keeps track of clock time 
     2b4:	e3a03000 	mov	r3, #0
     2b8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     2bc:	ea000000 	b	2c4 <main+0x68>
				clock = 0;
			}
			// reset the interrupt flag back to 0
			hps_tim0_int_flag = 0;
		}
	}
     2c0:	e1a00000 	nop			; (mov r0, r0)
	int clock = 0; // keeps track of clock time 
	float note;	// sum of the signal

	while(1) {
		// read the data from the keyboard
		if(read_ps2_data_ASM(data)) {
     2c4:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     2c8:	eb00038b 	bl	10fc <read_ps2_data_ASM>
     2cc:	e1a03000 	mov	r3, r0
     2d0:	e3530000 	cmp	r3, #0
     2d4:	0a00001a 	beq	344 <main+0xe8>
			// check if the previous frequency changed
			if(previous != *data) {
     2d8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     2dc:	e5d32000 	ldrb	r2, [r3]
     2e0:	e3013e44 	movw	r3, #7748	; 0x1e44
     2e4:	e3403003 	movt	r3, #3
     2e8:	e5d33000 	ldrb	r3, [r3]
     2ec:	e1520003 	cmp	r2, r3
     2f0:	0a000013 	beq	344 <main+0xe8>
				// get the frequency for the note of the keyboard clicks
				freq = getNote(data);
     2f4:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     2f8:	eb00012d 	bl	7b4 <getNote>
     2fc:	e50b0010 	str	r0, [r11, #-16]
				// draw the wave onto the screen to display the notes played
				displayWave(freq);
     300:	e51b0010 	ldr	r0, [r11, #-16]
     304:	eb0000c8 	bl	62c <displayWave>

				// check when the stop code is present to know when key is released
				if(previous == 0xF0) {
     308:	e3013e44 	movw	r3, #7748	; 0x1e44
     30c:	e3403003 	movt	r3, #3
     310:	e5d33000 	ldrb	r3, [r3]
     314:	e35300f0 	cmp	r3, #240	; 0xf0
     318:	1a000004 	bne	330 <main+0xd4>
					// allow the same key to be clicked simultaneously
					previous = 0;
     31c:	e3013e44 	movw	r3, #7748	; 0x1e44
     320:	e3403003 	movt	r3, #3
     324:	e3a02000 	mov	r2, #0
     328:	e5c32000 	strb	r2, [r3]
     32c:	ea000004 	b	344 <main+0xe8>
				} else {
					// else put in the data clicked
					previous = *data;
     330:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     334:	e5d32000 	ldrb	r2, [r3]
     338:	e3013e44 	movw	r3, #7748	; 0x1e44
     33c:	e3403003 	movt	r3, #3
     340:	e5c32000 	strb	r2, [r3]
				}
			}
		}
		note = calculateSignal(clock);
     344:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     348:	eb000023 	bl	3dc <calculateSignal>
     34c:	e50b001c 	str	r0, [r11, #-28]	; 0xffffffe4

		// check interrupt happens 
		if(hps_tim0_int_flag) {
     350:	e3003df0 	movw	r3, #3568	; 0xdf0
     354:	e3403000 	movt	r3, #0
     358:	e5933000 	ldr	r3, [r3]
     35c:	e3530000 	cmp	r3, #0
     360:	0affffd6 	beq	2c0 <main+0x64>
		// write the audio data to the signal
			audio_write_data_ASM(note, note);
     364:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     368:	eb0008df 	bl	26ec <__aeabi_f2iz>
     36c:	e1a04000 	mov	r4, r0
     370:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     374:	eb0008dc 	bl	26ec <__aeabi_f2iz>
     378:	e1a03000 	mov	r3, r0
     37c:	e1a00004 	mov	r0, r4
     380:	e1a01003 	mov	r1, r3
     384:	eb0002eb 	bl	f38 <audio_write_data_ASM>
			// increment clock value
			clock++;	
     388:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     38c:	e2833001 	add	r3, r3, #1
     390:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			// reset the clock when it reaches the e
			if(clock > (int) (48000/freq)) {
     394:	e3a00902 	mov	r0, #32768	; 0x8000
     398:	e344073b 	movt	r0, #18235	; 0x473b
     39c:	e51b1010 	ldr	r1, [r11, #-16]
     3a0:	eb000879 	bl	258c <__aeabi_fdiv>
     3a4:	e1a03000 	mov	r3, r0
     3a8:	e1a00003 	mov	r0, r3
     3ac:	eb0008ce 	bl	26ec <__aeabi_f2iz>
     3b0:	e1a02000 	mov	r2, r0
     3b4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     3b8:	e1520003 	cmp	r2, r3
     3bc:	aa000001 	bge	3c8 <main+0x16c>
				clock = 0;
     3c0:	e3a03000 	mov	r3, #0
     3c4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}
			// reset the interrupt flag back to 0
			hps_tim0_int_flag = 0;
     3c8:	e3003df0 	movw	r3, #3568	; 0xdf0
     3cc:	e3403000 	movt	r3, #0
     3d0:	e3a02000 	mov	r2, #0
     3d4:	e5832000 	str	r2, [r3]
		}
	}
     3d8:	eaffffb8 	b	2c0 <main+0x64>

000003dc <calculateSignal>:
	return 0;
}

// calculate the signal of all the frequency signals
float calculateSignal(int time) {
     3dc:	e92d4800 	push	{r11, lr}
     3e0:	e28db004 	add	r11, sp, #4
     3e4:	e24dd010 	sub	sp, sp, #16
     3e8:	e50b0010 	str	r0, [r11, #-16]
	int i;
	float note = 0;
     3ec:	e3a03000 	mov	r3, #0
     3f0:	e50b300c 	str	r3, [r11, #-12]
	// loop through all keys and check if key is pressed
	for(i = 0; i < 8; i++){
     3f4:	e3a03000 	mov	r3, #0
     3f8:	e50b3008 	str	r3, [r11, #-8]
     3fc:	ea000018 	b	464 <calculateSignal+0x88>
		if(pressed[i] == 1){
     400:	e3013e48 	movw	r3, #7752	; 0x1e48
     404:	e3403003 	movt	r3, #3
     408:	e51b2008 	ldr	r2, [r11, #-8]
     40c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     410:	e3530001 	cmp	r3, #1
     414:	1a00000f 	bne	458 <calculateSignal+0x7c>
			note += signal(frequency[i], time);
     418:	e3023bcc 	movw	r3, #11212	; 0x2bcc
     41c:	e3403000 	movt	r3, #0
     420:	e51b2008 	ldr	r2, [r11, #-8]
     424:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     428:	e1a00003 	mov	r0, r3
     42c:	e51b1010 	ldr	r1, [r11, #-16]
     430:	eb00001d 	bl	4ac <signal>
     434:	e1a03000 	mov	r3, r0
     438:	e1a00003 	mov	r0, r3
     43c:	eb0007b5 	bl	2318 <__aeabi_i2f>
     440:	e1a03000 	mov	r3, r0
     444:	e51b000c 	ldr	r0, [r11, #-12]
     448:	e1a01003 	mov	r1, r3
     44c:	eb000740 	bl	2154 <__addsf3>
     450:	e1a03000 	mov	r3, r0
     454:	e50b300c 	str	r3, [r11, #-12]
// calculate the signal of all the frequency signals
float calculateSignal(int time) {
	int i;
	float note = 0;
	// loop through all keys and check if key is pressed
	for(i = 0; i < 8; i++){
     458:	e51b3008 	ldr	r3, [r11, #-8]
     45c:	e2833001 	add	r3, r3, #1
     460:	e50b3008 	str	r3, [r11, #-8]
     464:	e51b3008 	ldr	r3, [r11, #-8]
     468:	e3530007 	cmp	r3, #7
     46c:	daffffe3 	ble	400 <calculateSignal+0x24>
		if(pressed[i] == 1){
			note += signal(frequency[i], time);
		}
	}

	note *= amplitude;
     470:	e3023bc8 	movw	r3, #11208	; 0x2bc8
     474:	e3403000 	movt	r3, #0
     478:	e5933000 	ldr	r3, [r3]
     47c:	e1a00003 	mov	r0, r3
     480:	eb0007a4 	bl	2318 <__aeabi_i2f>
     484:	e1a03000 	mov	r3, r0
     488:	e51b000c 	ldr	r0, [r11, #-12]
     48c:	e1a01003 	mov	r1, r3
     490:	eb0007d7 	bl	23f4 <__aeabi_fmul>
     494:	e1a03000 	mov	r3, r0
     498:	e50b300c 	str	r3, [r11, #-12]
	return note;
     49c:	e51b300c 	ldr	r3, [r11, #-12]
}
     4a0:	e1a00003 	mov	r0, r3
     4a4:	e24bd004 	sub	sp, r11, #4
     4a8:	e8bd8800 	pop	{r11, pc}

000004ac <signal>:

// calculate the signal played from wavetable give a time and frequency
int signal(float freq, int time) {
     4ac:	e92d4810 	push	{r4, r11, lr}
     4b0:	e28db008 	add	r11, sp, #8
     4b4:	e24dd024 	sub	sp, sp, #36	; 0x24
     4b8:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
     4bc:	e50b102c 	str	r1, [r11, #-44]	; 0xffffffd4

	return signal;
*/

	// calculate the floating value for the index
	float a = (freq*time);
     4c0:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     4c4:	eb000793 	bl	2318 <__aeabi_i2f>
     4c8:	e1a03000 	mov	r3, r0
     4cc:	e1a00003 	mov	r0, r3
     4d0:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
     4d4:	eb0007c6 	bl	23f4 <__aeabi_fmul>
     4d8:	e1a03000 	mov	r3, r0
     4dc:	e50b3010 	str	r3, [r11, #-16]
	int b = (int) a/48000;
     4e0:	e51b0010 	ldr	r0, [r11, #-16]
     4e4:	eb000880 	bl	26ec <__aeabi_f2iz>
     4e8:	e1a02000 	mov	r2, r0
     4ec:	e30139f1 	movw	r3, #6641	; 0x19f1
     4f0:	e3403576 	movt	r3, #1398	; 0x576
     4f4:	e0c31293 	smull	r1, r3, r3, r2
     4f8:	e1a01543 	asr	r1, r3, #10
     4fc:	e1a03fc2 	asr	r3, r2, #31
     500:	e0633001 	rsb	r3, r3, r1
     504:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	float index = a-(b*48000);
     508:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     50c:	e30b2b80 	movw	r2, #48000	; 0xbb80
     510:	e0030392 	mul	r3, r2, r3
     514:	e1a00003 	mov	r0, r3
     518:	eb00077e 	bl	2318 <__aeabi_i2f>
     51c:	e1a03000 	mov	r3, r0
     520:	e51b0010 	ldr	r0, [r11, #-16]
     524:	e1a01003 	mov	r1, r3
     528:	eb000708 	bl	2150 <__aeabi_fsub>
     52c:	e1a03000 	mov	r3, r0
     530:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	// extract the integer and remainding decimal
	int integer = (int) index;
     534:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     538:	eb00086b 	bl	26ec <__aeabi_f2iz>
     53c:	e1a03000 	mov	r3, r0
     540:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	float remain = index - integer;
     544:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     548:	eb000772 	bl	2318 <__aeabi_i2f>
     54c:	e1a03000 	mov	r3, r0
     550:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     554:	e1a01003 	mov	r1, r3
     558:	eb0006fc 	bl	2150 <__aeabi_fsub>
     55c:	e1a03000 	mov	r3, r0
     560:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

	// calculate the signal by multiplying by the sound amplitude
	float total = (1-remain)*sine[integer] + remain*sine[integer+1];
     564:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     568:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     56c:	eb0006f7 	bl	2150 <__aeabi_fsub>
     570:	e1a03000 	mov	r3, r0
     574:	e1a04003 	mov	r4, r3
     578:	e3023bec 	movw	r3, #11244	; 0x2bec
     57c:	e3403000 	movt	r3, #0
     580:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     584:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     588:	e1a00003 	mov	r0, r3
     58c:	eb000761 	bl	2318 <__aeabi_i2f>
     590:	e1a03000 	mov	r3, r0
     594:	e1a00004 	mov	r0, r4
     598:	e1a01003 	mov	r1, r3
     59c:	eb000794 	bl	23f4 <__aeabi_fmul>
     5a0:	e1a03000 	mov	r3, r0
     5a4:	e1a04003 	mov	r4, r3
     5a8:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     5ac:	e2832001 	add	r2, r3, #1
     5b0:	e3023bec 	movw	r3, #11244	; 0x2bec
     5b4:	e3403000 	movt	r3, #0
     5b8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     5bc:	e1a00003 	mov	r0, r3
     5c0:	eb000754 	bl	2318 <__aeabi_i2f>
     5c4:	e1a03000 	mov	r3, r0
     5c8:	e1a00003 	mov	r0, r3
     5cc:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     5d0:	eb000787 	bl	23f4 <__aeabi_fmul>
     5d4:	e1a03000 	mov	r3, r0
     5d8:	e1a00004 	mov	r0, r4
     5dc:	e1a01003 	mov	r1, r3
     5e0:	eb0006db 	bl	2154 <__addsf3>
     5e4:	e1a03000 	mov	r3, r0
     5e8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	return (int) (total*amplitude);
     5ec:	e3023bc8 	movw	r3, #11208	; 0x2bc8
     5f0:	e3403000 	movt	r3, #0
     5f4:	e5933000 	ldr	r3, [r3]
     5f8:	e1a00003 	mov	r0, r3
     5fc:	eb000745 	bl	2318 <__aeabi_i2f>
     600:	e1a03000 	mov	r3, r0
     604:	e1a00003 	mov	r0, r3
     608:	e51b1024 	ldr	r1, [r11, #-36]	; 0xffffffdc
     60c:	eb000778 	bl	23f4 <__aeabi_fmul>
     610:	e1a03000 	mov	r3, r0
     614:	e1a00003 	mov	r0, r3
     618:	eb000833 	bl	26ec <__aeabi_f2iz>
     61c:	e1a03000 	mov	r3, r0

}
     620:	e1a00003 	mov	r0, r3
     624:	e24bd008 	sub	sp, r11, #8
     628:	e8bd8810 	pop	{r4, r11, pc}

0000062c <displayWave>:

// display the wave onto the screen when keys are pressed
void displayWave(float freq) {
     62c:	e92d4810 	push	{r4, r11, lr}
     630:	e28db008 	add	r11, sp, #8
     634:	e24dd024 	sub	sp, sp, #36	; 0x24
     638:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
	// clear the display before drawing the next wave
	VGA_clear_pixelbuff_ASM();
     63c:	eb00033b 	bl	1330 <VGA_clear_pixelbuff_ASM>
	// initialize the colour and position
	short colour = 0xFFFFFF;
     640:	e3e03000 	mvn	r3, #0
     644:	e14b31b6 	strh	r3, [r11, #-22]	; 0xffffffea
	int x, y;
	// 48000 us the total sine wave, divide this by the number of x pixels with a frequency of 60 Hx
	int seg = 48000/(320.00*60/freq);
     648:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
     64c:	eb000552 	bl	1b9c <__aeabi_f2d>
     650:	e1a02000 	mov	r2, r0
     654:	e1a03001 	mov	r3, r1
     658:	e3a00000 	mov	r0, #0
     65c:	e3a01903 	mov	r1, #49152	; 0xc000
     660:	e34410d2 	movt	r1, #16594	; 0x40d2
     664:	eb00061d 	bl	1ee0 <__aeabi_ddiv>
     668:	e1a02000 	mov	r2, r0
     66c:	e1a03001 	mov	r3, r1
     670:	e3a00000 	mov	r0, #0
     674:	e3a01a07 	mov	r1, #28672	; 0x7000
     678:	e34410e7 	movt	r1, #16615	; 0x40e7
     67c:	eb000617 	bl	1ee0 <__aeabi_ddiv>
     680:	e1a02000 	mov	r2, r0
     684:	e1a03001 	mov	r3, r1
     688:	e1a00002 	mov	r0, r2
     68c:	e1a01003 	mov	r1, r3
     690:	eb000695 	bl	20ec <__aeabi_d2iz>
     694:	e1a03000 	mov	r3, r0
     698:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	// initialize x position 
	int time_pos = 0;
     69c:	e3a03000 	mov	r3, #0
     6a0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

	// iterate through the display to print out the wave
	for(x=0; x<320; x++) {
     6a4:	e3a03000 	mov	r3, #0
     6a8:	e50b3010 	str	r3, [r11, #-16]
     6ac:	ea00003a 	b	79c <displayWave+0x170>
		// use a sine function in order to calculate the y pixel to draw the pt on 
		y = (int) (((float)amplitude)*(float)sine[time_pos]*((float)10/(float)sine[6000])) + 120;
     6b0:	e3023bc8 	movw	r3, #11208	; 0x2bc8
     6b4:	e3403000 	movt	r3, #0
     6b8:	e5933000 	ldr	r3, [r3]
     6bc:	e1a00003 	mov	r0, r3
     6c0:	eb000714 	bl	2318 <__aeabi_i2f>
     6c4:	e1a04000 	mov	r4, r0
     6c8:	e3023bec 	movw	r3, #11244	; 0x2bec
     6cc:	e3403000 	movt	r3, #0
     6d0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     6d4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     6d8:	e1a00003 	mov	r0, r3
     6dc:	eb00070d 	bl	2318 <__aeabi_i2f>
     6e0:	e1a03000 	mov	r3, r0
     6e4:	e1a00004 	mov	r0, r4
     6e8:	e1a01003 	mov	r1, r3
     6ec:	eb000740 	bl	23f4 <__aeabi_fmul>
     6f0:	e1a03000 	mov	r3, r0
     6f4:	e1a04003 	mov	r4, r3
     6f8:	e3023bec 	movw	r3, #11244	; 0x2bec
     6fc:	e3403000 	movt	r3, #0
     700:	e3052dc0 	movw	r2, #24000	; 0x5dc0
     704:	e7933002 	ldr	r3, [r3, r2]
     708:	e1a00003 	mov	r0, r3
     70c:	eb000701 	bl	2318 <__aeabi_i2f>
     710:	e1a03000 	mov	r3, r0
     714:	e3a00000 	mov	r0, #0
     718:	e3440120 	movt	r0, #16672	; 0x4120
     71c:	e1a01003 	mov	r1, r3
     720:	eb000799 	bl	258c <__aeabi_fdiv>
     724:	e1a03000 	mov	r3, r0
     728:	e1a00004 	mov	r0, r4
     72c:	e1a01003 	mov	r1, r3
     730:	eb00072f 	bl	23f4 <__aeabi_fmul>
     734:	e1a03000 	mov	r3, r0
     738:	e1a00003 	mov	r0, r3
     73c:	eb0007ea 	bl	26ec <__aeabi_f2iz>
     740:	e1a03000 	mov	r3, r0
     744:	e2833078 	add	r3, r3, #120	; 0x78
     748:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

		// draw calculated point in white
		VGA_draw_point_ASM(x, y, colour);
     74c:	e15b31f6 	ldrsh	r3, [r11, #-22]	; 0xffffffea
     750:	e51b0010 	ldr	r0, [r11, #-16]
     754:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     758:	e1a02003 	mov	r2, r3
     75c:	eb000327 	bl	1400 <VGA_draw_point_ASM>
		// Increment position based on the increment variable. 
		time_pos += seg; 	
     760:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     764:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     768:	e0823003 	add	r3, r2, r3
     76c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		//Resets the sine wave to the beginning of the period. 
		if (time_pos > 48000) {
     770:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     774:	e30b3b80 	movw	r3, #48000	; 0xbb80
     778:	e1520003 	cmp	r2, r3
     77c:	da000003 	ble	790 <displayWave+0x164>
			time_pos -= 48000; 
     780:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     784:	e2433cbb 	sub	r3, r3, #47872	; 0xbb00
     788:	e2433080 	sub	r3, r3, #128	; 0x80
     78c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int seg = 48000/(320.00*60/freq);
	// initialize x position 
	int time_pos = 0;

	// iterate through the display to print out the wave
	for(x=0; x<320; x++) {
     790:	e51b3010 	ldr	r3, [r11, #-16]
     794:	e2833001 	add	r3, r3, #1
     798:	e50b3010 	str	r3, [r11, #-16]
     79c:	e51b2010 	ldr	r2, [r11, #-16]
     7a0:	e300313f 	movw	r3, #319	; 0x13f
     7a4:	e1520003 	cmp	r2, r3
     7a8:	daffffc0 	ble	6b0 <displayWave+0x84>
			time_pos -= 48000; 
		} 
	}


}
     7ac:	e24bd008 	sub	sp, r11, #8
     7b0:	e8bd8810 	pop	{r4, r11, pc}

000007b4 <getNote>:

// return the note associated with its respective key
float getNote(char *data) {
     7b4:	e92d4800 	push	{r11, lr}
     7b8:	e28db004 	add	r11, sp, #4
     7bc:	e24dd010 	sub	sp, sp, #16
     7c0:	e50b0010 	str	r0, [r11, #-16]
	// initialize the freq variable
	float freq;

	switch(*data) {
     7c4:	e51b3010 	ldr	r3, [r11, #-16]
     7c8:	e5d33000 	ldrb	r3, [r3]
     7cc:	e243301b 	sub	r3, r3, #27
     7d0:	e3530060 	cmp	r3, #96	; 0x60
     7d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     7d8:	ea0000f2 	b	ba8 <ICDIPTR+0x3a8>
     7dc:	00000a04 	.word	0x00000a04
     7e0:	000009c8 	.word	0x000009c8
     7e4:	00000ba8 	.word	0x00000ba8
     7e8:	00000ba8 	.word	0x00000ba8
     7ec:	00000ba8 	.word	0x00000ba8
     7f0:	00000ba8 	.word	0x00000ba8
     7f4:	00000ba8 	.word	0x00000ba8
     7f8:	00000ba8 	.word	0x00000ba8
     7fc:	00000a40 	.word	0x00000a40
     800:	00000ba8 	.word	0x00000ba8
     804:	00000ba8 	.word	0x00000ba8
     808:	00000ba8 	.word	0x00000ba8
     80c:	00000ba8 	.word	0x00000ba8
     810:	00000ba8 	.word	0x00000ba8
     814:	00000ba8 	.word	0x00000ba8
     818:	00000ba8 	.word	0x00000ba8
     81c:	00000a7c 	.word	0x00000a7c
     820:	00000ba8 	.word	0x00000ba8
     824:	00000ba8 	.word	0x00000ba8
     828:	00000ba8 	.word	0x00000ba8
     82c:	00000ba8 	.word	0x00000ba8
     830:	00000ba8 	.word	0x00000ba8
     834:	00000ba8 	.word	0x00000ba8
     838:	00000ba8 	.word	0x00000ba8
     83c:	00000ba8 	.word	0x00000ba8
     840:	00000ba8 	.word	0x00000ba8
     844:	00000ba8 	.word	0x00000ba8
     848:	00000ba8 	.word	0x00000ba8
     84c:	00000ba8 	.word	0x00000ba8
     850:	00000ba8 	.word	0x00000ba8
     854:	00000ba8 	.word	0x00000ba8
     858:	00000ba8 	.word	0x00000ba8
     85c:	00000ab8 	.word	0x00000ab8
     860:	00000ba8 	.word	0x00000ba8
     864:	00000ba8 	.word	0x00000ba8
     868:	00000ba8 	.word	0x00000ba8
     86c:	00000ba8 	.word	0x00000ba8
     870:	00000ba8 	.word	0x00000ba8
     874:	00000ba8 	.word	0x00000ba8
     878:	00000af4 	.word	0x00000af4
     87c:	00000ba8 	.word	0x00000ba8
     880:	00000ba8 	.word	0x00000ba8
     884:	00000ba8 	.word	0x00000ba8
     888:	00000ba8 	.word	0x00000ba8
     88c:	00000ba8 	.word	0x00000ba8
     890:	00000ba8 	.word	0x00000ba8
     894:	00000ba8 	.word	0x00000ba8
     898:	00000ba8 	.word	0x00000ba8
     89c:	00000b30 	.word	0x00000b30
     8a0:	00000b6c 	.word	0x00000b6c
     8a4:	00000ba8 	.word	0x00000ba8
     8a8:	00000ba8 	.word	0x00000ba8
     8ac:	00000ba8 	.word	0x00000ba8
     8b0:	00000ba8 	.word	0x00000ba8
     8b4:	00000ba8 	.word	0x00000ba8
     8b8:	00000ba8 	.word	0x00000ba8
     8bc:	00000ba8 	.word	0x00000ba8
     8c0:	00000ba8 	.word	0x00000ba8
     8c4:	00000ba8 	.word	0x00000ba8
     8c8:	00000ba8 	.word	0x00000ba8
     8cc:	00000ba8 	.word	0x00000ba8
     8d0:	00000ba8 	.word	0x00000ba8
     8d4:	00000ba8 	.word	0x00000ba8
     8d8:	00000ba8 	.word	0x00000ba8
     8dc:	00000ba8 	.word	0x00000ba8
     8e0:	00000ba8 	.word	0x00000ba8
     8e4:	00000ba8 	.word	0x00000ba8
     8e8:	00000ba8 	.word	0x00000ba8
     8ec:	00000ba8 	.word	0x00000ba8
     8f0:	00000ba8 	.word	0x00000ba8
     8f4:	00000ba8 	.word	0x00000ba8
     8f8:	00000ba8 	.word	0x00000ba8
     8fc:	00000ba8 	.word	0x00000ba8
     900:	00000ba8 	.word	0x00000ba8
     904:	00000ba8 	.word	0x00000ba8
     908:	00000ba8 	.word	0x00000ba8
     90c:	00000ba8 	.word	0x00000ba8
     910:	00000ba8 	.word	0x00000ba8
     914:	00000ba8 	.word	0x00000ba8
     918:	00000ba8 	.word	0x00000ba8
     91c:	00000ba8 	.word	0x00000ba8
     920:	00000ba8 	.word	0x00000ba8
     924:	00000ba8 	.word	0x00000ba8
     928:	00000ba8 	.word	0x00000ba8
     92c:	00000ba8 	.word	0x00000ba8
     930:	00000ba8 	.word	0x00000ba8
     934:	00000ba8 	.word	0x00000ba8
     938:	00000ba8 	.word	0x00000ba8
     93c:	00000ba8 	.word	0x00000ba8
     940:	00000ba8 	.word	0x00000ba8
     944:	00000ba8 	.word	0x00000ba8
     948:	00000ba8 	.word	0x00000ba8
     94c:	00000ba8 	.word	0x00000ba8
     950:	00000ba8 	.word	0x00000ba8
     954:	00000960 	.word	0x00000960
     958:	00000ba8 	.word	0x00000ba8
     95c:	00000994 	.word	0x00000994
		// keyboard for value + gives volume up
		case 0x79:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     960:	e3013e44 	movw	r3, #7748	; 0x1e44
     964:	e3403003 	movt	r3, #3
     968:	e5d33000 	ldrb	r3, [r3]
     96c:	e35300f0 	cmp	r3, #240	; 0xf0
     970:	0a00008e 	beq	bb0 <ICDIPTR+0x3b0>
				amplitude++;
     974:	e3023bc8 	movw	r3, #11208	; 0x2bc8
     978:	e3403000 	movt	r3, #0
     97c:	e5933000 	ldr	r3, [r3]
     980:	e2832001 	add	r2, r3, #1
     984:	e3023bc8 	movw	r3, #11208	; 0x2bc8
     988:	e3403000 	movt	r3, #0
     98c:	e5832000 	str	r2, [r3]
			}
			break;
     990:	ea000086 	b	bb0 <ICDIPTR+0x3b0>
		// keyboard for value A, plays C
		case 0x7B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     994:	e3013e44 	movw	r3, #7748	; 0x1e44
     998:	e3403003 	movt	r3, #3
     99c:	e5d33000 	ldrb	r3, [r3]
     9a0:	e35300f0 	cmp	r3, #240	; 0xf0
     9a4:	0a000083 	beq	bb8 <ICDIPTR+0x3b8>
				amplitude--;
     9a8:	e3023bc8 	movw	r3, #11208	; 0x2bc8
     9ac:	e3403000 	movt	r3, #0
     9b0:	e5933000 	ldr	r3, [r3]
     9b4:	e2432001 	sub	r2, r3, #1
     9b8:	e3023bc8 	movw	r3, #11208	; 0x2bc8
     9bc:	e3403000 	movt	r3, #0
     9c0:	e5832000 	str	r2, [r3]
			}
			break;
     9c4:	ea00007b 	b	bb8 <ICDIPTR+0x3b8>
		// keyboard for value A, plays C
		case 0x1C:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     9c8:	e3013e44 	movw	r3, #7748	; 0x1e44
     9cc:	e3403003 	movt	r3, #3
     9d0:	e5d33000 	ldrb	r3, [r3]
     9d4:	e35300f0 	cmp	r3, #240	; 0xf0
     9d8:	0a000004 	beq	9f0 <ICDIPTR+0x1f0>
				pressed[0] = 1;
     9dc:	e3013e48 	movw	r3, #7752	; 0x1e48
     9e0:	e3403003 	movt	r3, #3
     9e4:	e3a02001 	mov	r2, #1
     9e8:	e5832000 	str	r2, [r3]
			} else {
				pressed[0] = 0;
			}
			break;
     9ec:	ea000072 	b	bbc <ICDIPTR+0x3bc>
		case 0x1C:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[0] = 1;
			} else {
				pressed[0] = 0;
     9f0:	e3013e48 	movw	r3, #7752	; 0x1e48
     9f4:	e3403003 	movt	r3, #3
     9f8:	e3a02000 	mov	r2, #0
     9fc:	e5832000 	str	r2, [r3]
			}
			break;
     a00:	ea00006d 	b	bbc <ICDIPTR+0x3bc>
		// keyboard for value S, plays D
		case 0x1B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     a04:	e3013e44 	movw	r3, #7748	; 0x1e44
     a08:	e3403003 	movt	r3, #3
     a0c:	e5d33000 	ldrb	r3, [r3]
     a10:	e35300f0 	cmp	r3, #240	; 0xf0
     a14:	0a000004 	beq	a2c <ICDIPTR+0x22c>
				pressed[1] = 1;
     a18:	e3013e48 	movw	r3, #7752	; 0x1e48
     a1c:	e3403003 	movt	r3, #3
     a20:	e3a02001 	mov	r2, #1
     a24:	e5832004 	str	r2, [r3, #4]
			} else {
				pressed[1] = 0;
			}
			break;
     a28:	ea000063 	b	bbc <ICDIPTR+0x3bc>
		case 0x1B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[1] = 1;
			} else {
				pressed[1] = 0;
     a2c:	e3013e48 	movw	r3, #7752	; 0x1e48
     a30:	e3403003 	movt	r3, #3
     a34:	e3a02000 	mov	r2, #0
     a38:	e5832004 	str	r2, [r3, #4]
			}
			break;
     a3c:	ea00005e 	b	bbc <ICDIPTR+0x3bc>
		// keyboard for value D, plays E
		case 0x23:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     a40:	e3013e44 	movw	r3, #7748	; 0x1e44
     a44:	e3403003 	movt	r3, #3
     a48:	e5d33000 	ldrb	r3, [r3]
     a4c:	e35300f0 	cmp	r3, #240	; 0xf0
     a50:	0a000004 	beq	a68 <ICDIPTR+0x268>
				pressed[2] = 1;
     a54:	e3013e48 	movw	r3, #7752	; 0x1e48
     a58:	e3403003 	movt	r3, #3
     a5c:	e3a02001 	mov	r2, #1
     a60:	e5832008 	str	r2, [r3, #8]
			} else {
				pressed[2] = 0;
			}
			break;
     a64:	ea000054 	b	bbc <ICDIPTR+0x3bc>
		case 0x23:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[2] = 1;
			} else {
				pressed[2] = 0;
     a68:	e3013e48 	movw	r3, #7752	; 0x1e48
     a6c:	e3403003 	movt	r3, #3
     a70:	e3a02000 	mov	r2, #0
     a74:	e5832008 	str	r2, [r3, #8]
			}
			break;
     a78:	ea00004f 	b	bbc <ICDIPTR+0x3bc>
		// keyboard for value F, plays F
		case 0x2B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     a7c:	e3013e44 	movw	r3, #7748	; 0x1e44
     a80:	e3403003 	movt	r3, #3
     a84:	e5d33000 	ldrb	r3, [r3]
     a88:	e35300f0 	cmp	r3, #240	; 0xf0
     a8c:	0a000004 	beq	aa4 <ICDIPTR+0x2a4>
				pressed[3] = 1;
     a90:	e3013e48 	movw	r3, #7752	; 0x1e48
     a94:	e3403003 	movt	r3, #3
     a98:	e3a02001 	mov	r2, #1
     a9c:	e583200c 	str	r2, [r3, #12]
			} else {
				pressed[3] = 0;
			}
			break;
     aa0:	ea000045 	b	bbc <ICDIPTR+0x3bc>
		case 0x2B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[3] = 1;
			} else {
				pressed[3] = 0;
     aa4:	e3013e48 	movw	r3, #7752	; 0x1e48
     aa8:	e3403003 	movt	r3, #3
     aac:	e3a02000 	mov	r2, #0
     ab0:	e583200c 	str	r2, [r3, #12]
			}
			break;
     ab4:	ea000040 	b	bbc <ICDIPTR+0x3bc>
		// keyboard for value J, plays G
		case 0x3B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     ab8:	e3013e44 	movw	r3, #7748	; 0x1e44
     abc:	e3403003 	movt	r3, #3
     ac0:	e5d33000 	ldrb	r3, [r3]
     ac4:	e35300f0 	cmp	r3, #240	; 0xf0
     ac8:	0a000004 	beq	ae0 <ICDIPTR+0x2e0>
				pressed[4] = 1;
     acc:	e3013e48 	movw	r3, #7752	; 0x1e48
     ad0:	e3403003 	movt	r3, #3
     ad4:	e3a02001 	mov	r2, #1
     ad8:	e5832010 	str	r2, [r3, #16]
			} else {
				pressed[4] = 0;
			}
			break;
     adc:	ea000036 	b	bbc <ICDIPTR+0x3bc>
		case 0x3B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[4] = 1;
			} else {
				pressed[4] = 0;
     ae0:	e3013e48 	movw	r3, #7752	; 0x1e48
     ae4:	e3403003 	movt	r3, #3
     ae8:	e3a02000 	mov	r2, #0
     aec:	e5832010 	str	r2, [r3, #16]
			}
			break;
     af0:	ea000031 	b	bbc <ICDIPTR+0x3bc>
		// keyboard for value K, plays A
		case 0x42:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     af4:	e3013e44 	movw	r3, #7748	; 0x1e44
     af8:	e3403003 	movt	r3, #3
     afc:	e5d33000 	ldrb	r3, [r3]
     b00:	e35300f0 	cmp	r3, #240	; 0xf0
     b04:	0a000004 	beq	b1c <ICDIPTR+0x31c>
				pressed[5] = 1;
     b08:	e3013e48 	movw	r3, #7752	; 0x1e48
     b0c:	e3403003 	movt	r3, #3
     b10:	e3a02001 	mov	r2, #1
     b14:	e5832014 	str	r2, [r3, #20]
			} else {
				pressed[5] = 0;
			}
			break;
     b18:	ea000027 	b	bbc <ICDIPTR+0x3bc>
		case 0x42:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[5] = 1;
			} else {
				pressed[5] = 0;
     b1c:	e3013e48 	movw	r3, #7752	; 0x1e48
     b20:	e3403003 	movt	r3, #3
     b24:	e3a02000 	mov	r2, #0
     b28:	e5832014 	str	r2, [r3, #20]
			}
			break;
     b2c:	ea000022 	b	bbc <ICDIPTR+0x3bc>
		// keyboard for value L, plays B
		case 0x4B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     b30:	e3013e44 	movw	r3, #7748	; 0x1e44
     b34:	e3403003 	movt	r3, #3
     b38:	e5d33000 	ldrb	r3, [r3]
     b3c:	e35300f0 	cmp	r3, #240	; 0xf0
     b40:	0a000004 	beq	b58 <ICDIPTR+0x358>
				pressed[6] = 1;
     b44:	e3013e48 	movw	r3, #7752	; 0x1e48
     b48:	e3403003 	movt	r3, #3
     b4c:	e3a02001 	mov	r2, #1
     b50:	e5832018 	str	r2, [r3, #24]
			} else {
				pressed[6] = 0;
			}
			break;
     b54:	ea000018 	b	bbc <ICDIPTR+0x3bc>
		case 0x4B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[6] = 1;
			} else {
				pressed[6] = 0;
     b58:	e3013e48 	movw	r3, #7752	; 0x1e48
     b5c:	e3403003 	movt	r3, #3
     b60:	e3a02000 	mov	r2, #0
     b64:	e5832018 	str	r2, [r3, #24]
			}
			break;
     b68:	ea000013 	b	bbc <ICDIPTR+0x3bc>
		// keyboard for value ;, plays higher C
		case 0x4C:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
     b6c:	e3013e44 	movw	r3, #7748	; 0x1e44
     b70:	e3403003 	movt	r3, #3
     b74:	e5d33000 	ldrb	r3, [r3]
     b78:	e35300f0 	cmp	r3, #240	; 0xf0
     b7c:	0a000004 	beq	b94 <ICDIPTR+0x394>
				pressed[7] = 1;
     b80:	e3013e48 	movw	r3, #7752	; 0x1e48
     b84:	e3403003 	movt	r3, #3
     b88:	e3a02001 	mov	r2, #1
     b8c:	e583201c 	str	r2, [r3, #28]
			} else {
				pressed[7] = 0;
			}
			break;
     b90:	ea000009 	b	bbc <ICDIPTR+0x3bc>
		case 0x4C:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				pressed[7] = 1;
			} else {
				pressed[7] = 0;
     b94:	e3013e48 	movw	r3, #7752	; 0x1e48
     b98:	e3403003 	movt	r3, #3
     b9c:	e3a02000 	mov	r2, #0
     ba0:	e583201c 	str	r2, [r3, #28]
			}
			break;
     ba4:	ea000004 	b	bbc <ICDIPTR+0x3bc>
		default:
		break;
     ba8:	e1a00000 	nop			; (mov r0, r0)
     bac:	ea000002 	b	bbc <ICDIPTR+0x3bc>
		case 0x79:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				amplitude++;
			}
			break;
     bb0:	e1a00000 	nop			; (mov r0, r0)
     bb4:	ea000000 	b	bbc <ICDIPTR+0x3bc>
		case 0x7B:
		// check each previous byte to see if stop code 
			if(previous != 0xF0) {
				amplitude--;
			}
			break;
     bb8:	e1a00000 	nop			; (mov r0, r0)
		default:
		break;
	}
	int i;
	// calculate the frequency
	for(i = 0; i<8; i++) {
     bbc:	e3a03000 	mov	r3, #0
     bc0:	e50b300c 	str	r3, [r11, #-12]
     bc4:	ea000016 	b	c24 <ICDICFR+0x24>
		freq +=pressed[i]*frequency[i];
     bc8:	e3013e48 	movw	r3, #7752	; 0x1e48
     bcc:	e3403003 	movt	r3, #3
     bd0:	e51b200c 	ldr	r2, [r11, #-12]
     bd4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     bd8:	e1a00003 	mov	r0, r3
     bdc:	eb0005cd 	bl	2318 <__aeabi_i2f>
     be0:	e1a02000 	mov	r2, r0
     be4:	e3023bcc 	movw	r3, #11212	; 0x2bcc
     be8:	e3403000 	movt	r3, #0
     bec:	e51b100c 	ldr	r1, [r11, #-12]
     bf0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     bf4:	e1a00002 	mov	r0, r2
     bf8:	e1a01003 	mov	r1, r3
     bfc:	eb0005fc 	bl	23f4 <__aeabi_fmul>
     c00:	e1a03000 	mov	r3, r0
     c04:	e51b0008 	ldr	r0, [r11, #-8]
     c08:	e1a01003 	mov	r1, r3
     c0c:	eb000550 	bl	2154 <__addsf3>
     c10:	e1a03000 	mov	r3, r0
     c14:	e50b3008 	str	r3, [r11, #-8]
		default:
		break;
	}
	int i;
	// calculate the frequency
	for(i = 0; i<8; i++) {
     c18:	e51b300c 	ldr	r3, [r11, #-12]
     c1c:	e2833001 	add	r3, r3, #1
     c20:	e50b300c 	str	r3, [r11, #-12]
     c24:	e51b300c 	ldr	r3, [r11, #-12]
     c28:	e3530007 	cmp	r3, #7
     c2c:	daffffe5 	ble	bc8 <ICDIPTR+0x3c8>
		freq +=pressed[i]*frequency[i];
	}
	// return calculated note
	return freq;
     c30:	e51b3008 	ldr	r3, [r11, #-8]
}
     c34:	e1a00003 	mov	r0, r3
     c38:	e24bd004 	sub	sp, r11, #4
     c3c:	e8bd8800 	pop	{r11, pc}

00000c40 <HEX_clear_ASM>:
     c40:	e3a01000 	mov	r1, #0
     c44:	ea000004 	b	c5c <WRITE>

00000c48 <HEX_flood_ASM>:
     c48:	e3a0107f 	mov	r1, #127	; 0x7f
     c4c:	ea000002 	b	c5c <WRITE>

00000c50 <HEX_write_ASM>:
     c50:	e59f2064 	ldr	r2, [pc, #100]	; cbc <PATTERNS+0x14>
     c54:	e7d21001 	ldrb	r1, [r2, r1]
     c58:	eaffffff 	b	c5c <WRITE>

00000c5c <WRITE>:
     c5c:	e92d0030 	push	{r4, r5}
     c60:	e59f2058 	ldr	r2, [pc, #88]	; cc0 <PATTERNS+0x18>
     c64:	e3a03000 	mov	r3, #0
     c68:	e3e050ff 	mvn	r5, #255	; 0xff

00000c6c <LOOP>:
     c6c:	e3100001 	tst	r0, #1
     c70:	0a000003 	beq	c84 <CONTINUE>
     c74:	e5924000 	ldr	r4, [r2]
     c78:	e0044005 	and	r4, r4, r5
     c7c:	e1844001 	orr	r4, r4, r1
     c80:	e5824000 	str	r4, [r2]

00000c84 <CONTINUE>:
     c84:	e1a05c65 	ror	r5, r5, #24
     c88:	e1a01c61 	ror	r1, r1, #24
     c8c:	e2833001 	add	r3, r3, #1
     c90:	e3530004 	cmp	r3, #4
     c94:	059f2028 	ldreq	r2, [pc, #40]	; cc4 <PATTERNS+0x1c>
     c98:	e1b000a0 	lsrs	r0, r0, #1
     c9c:	1afffff2 	bne	c6c <LOOP>
     ca0:	e8bd0030 	pop	{r4, r5}
     ca4:	e12fff1e 	bx	lr

00000ca8 <PATTERNS>:
     ca8:	4f5b063f 	.word	0x4f5b063f
     cac:	077d6d66 	.word	0x077d6d66
     cb0:	7c776f7f 	.word	0x7c776f7f
     cb4:	71795e39 	.word	0x71795e39
     cb8:	000000ff 	.word	0x000000ff
     cbc:	00000ca8 	.word	0x00000ca8
     cc0:	ff200020 	.word	0xff200020
     cc4:	ff200030 	.word	0xff200030

00000cc8 <HPS_TIM_config_ASM>:
     cc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     ccc:	e3a01000 	mov	r1, #0
     cd0:	e3a02001 	mov	r2, #1
     cd4:	e5907000 	ldr	r7, [r0]
     cd8:	eaffffff 	b	cdc <LOOP>

00000cdc <LOOP>:
     cdc:	e1170112 	tst	r7, r2, lsl r1
     ce0:	0a000000 	beq	ce8 <CONTINUE>
     ce4:	eb000004 	bl	cfc <CONFIG>

00000ce8 <CONTINUE>:
     ce8:	e2811001 	add	r1, r1, #1
     cec:	e3510004 	cmp	r1, #4
     cf0:	bafffff9 	blt	cdc <LOOP>

00000cf4 <DONE>:
     cf4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     cf8:	e12fff1e 	bx	lr

00000cfc <CONFIG>:
     cfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d00:	e59f30e4 	ldr	r3, [pc, #228]	; dec <HPS_TIM_BASE+0x10>
     d04:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     d08:	eb000005 	bl	d24 <DISABLE>
     d0c:	eb000008 	bl	d34 <SET_LOAD_VAL>
     d10:	eb00000e 	bl	d50 <SET_LOAD_BIT>
     d14:	eb000013 	bl	d68 <SET_INT_BIT>
     d18:	eb000019 	bl	d84 <SET_EN_BIT>
     d1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d20:	e12fff1e 	bx	lr

00000d24 <DISABLE>:
     d24:	e5945008 	ldr	r5, [r4, #8]
     d28:	e3c55001 	bic	r5, r5, #1
     d2c:	e5845008 	str	r5, [r4, #8]
     d30:	e12fff1e 	bx	lr

00000d34 <SET_LOAD_VAL>:
     d34:	e5905004 	ldr	r5, [r0, #4]
     d38:	e3a06019 	mov	r6, #25
     d3c:	e0050695 	mul	r5, r5, r6
     d40:	e3510002 	cmp	r1, #2
     d44:	b1a05105 	lsllt	r5, r5, #2
     d48:	e5845000 	str	r5, [r4]
     d4c:	e12fff1e 	bx	lr

00000d50 <SET_LOAD_BIT>:
     d50:	e5945008 	ldr	r5, [r4, #8]
     d54:	e5906008 	ldr	r6, [r0, #8]
     d58:	e3c55002 	bic	r5, r5, #2
     d5c:	e1855086 	orr	r5, r5, r6, lsl #1
     d60:	e5845008 	str	r5, [r4, #8]
     d64:	e12fff1e 	bx	lr

00000d68 <SET_INT_BIT>:
     d68:	e5945008 	ldr	r5, [r4, #8]
     d6c:	e590600c 	ldr	r6, [r0, #12]
     d70:	e2266001 	eor	r6, r6, #1
     d74:	e3c55004 	bic	r5, r5, #4
     d78:	e1855106 	orr	r5, r5, r6, lsl #2
     d7c:	e5845008 	str	r5, [r4, #8]
     d80:	e12fff1e 	bx	lr

00000d84 <SET_EN_BIT>:
     d84:	e5945008 	ldr	r5, [r4, #8]
     d88:	e5906010 	ldr	r6, [r0, #16]
     d8c:	e3c55001 	bic	r5, r5, #1
     d90:	e1855006 	orr	r5, r5, r6
     d94:	e5845008 	str	r5, [r4, #8]
     d98:	e12fff1e 	bx	lr

00000d9c <HPS_TIM_clear_INT_ASM>:
     d9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     da0:	e3a01000 	mov	r1, #0
     da4:	e3a02001 	mov	r2, #1
     da8:	eaffffff 	b	dac <INT_LOOP>

00000dac <INT_LOOP>:
     dac:	e1100112 	tst	r0, r2, lsl r1
     db0:	0a000000 	beq	db8 <INT_CONTINUE>
     db4:	eb000004 	bl	dcc <CLEAR_IT>

00000db8 <INT_CONTINUE>:
     db8:	e2811001 	add	r1, r1, #1
     dbc:	e3510004 	cmp	r1, #4
     dc0:	bafffff9 	blt	dac <INT_LOOP>

00000dc4 <INT_DONE>:
     dc4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dc8:	e12fff1e 	bx	lr

00000dcc <CLEAR_IT>:
     dcc:	e59f3018 	ldr	r3, [pc, #24]	; dec <HPS_TIM_BASE+0x10>
     dd0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     dd4:	e593300c 	ldr	r3, [r3, #12]
     dd8:	e12fff1e 	bx	lr

00000ddc <HPS_TIM_BASE>:
     ddc:	ffc08000 	.word	0xffc08000
     de0:	ffc09000 	.word	0xffc09000
     de4:	ffd00000 	.word	0xffd00000
     de8:	ffd01000 	.word	0xffd01000
     dec:	00000ddc 	.word	0x00000ddc

00000df0 <hps_tim0_int_flag>:
     df0:	00000000 	.word	0x00000000

00000df4 <A9_PRIV_TIM_ISR>:

hps_tim0_int_flag:
	.word 0
	
A9_PRIV_TIM_ISR:
	BX LR
     df4:	e12fff1e 	bx	lr

00000df8 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     df8:	e12fff1e 	bx	lr

00000dfc <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     dfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV	R0, #0x1				// Get the address of tim0
     e00:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM	// Clear the interrupt flag from the timer (tim0)
     e04:	ebffffe4 	bl	d9c <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag	// Load the register of the interrupt variable into R0
     e08:	e59f003c 	ldr	r0, [pc, #60]	; e4c <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1					// Move 1 to register R1 to store
     e0c:	e3a01001 	mov	r1, #1
	STR R1, [R0]				// Store 1 into the interrupt variable when there is an interrupt
     e10:	e5801000 	str	r1, [r0]

	POP {LR}				
     e14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR						//Return
     e18:	e12fff1e 	bx	lr

00000e1c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     e1c:	e12fff1e 	bx	lr

00000e20 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     e20:	e12fff1e 	bx	lr

00000e24 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     e24:	e12fff1e 	bx	lr

00000e28 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     e28:	e12fff1e 	bx	lr

00000e2c <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     e2c:	e12fff1e 	bx	lr

00000e30 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     e30:	e12fff1e 	bx	lr

00000e34 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     e34:	e12fff1e 	bx	lr

00000e38 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     e38:	e12fff1e 	bx	lr

00000e3c <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     e3c:	e12fff1e 	bx	lr

00000e40 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     e40:	e12fff1e 	bx	lr

00000e44 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     e44:	e12fff1e 	bx	lr

00000e48 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     e48:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV	R0, #0x1				// Get the address of tim0
	BL HPS_TIM_clear_INT_ASM	// Clear the interrupt flag from the timer (tim0)

	LDR R0, =hps_tim0_int_flag	// Load the register of the interrupt variable into R0
     e4c:	00000df0 	.word	0x00000df0

00000e50 <read_LEDs_ASM>:
     e50:	e59f1010 	ldr	r1, [pc, #16]	; e68 <write_LEDs_ASM+0xc>
     e54:	e5910000 	ldr	r0, [r1]
     e58:	e12fff1e 	bx	lr

00000e5c <write_LEDs_ASM>:
     e5c:	e59f1004 	ldr	r1, [pc, #4]	; e68 <write_LEDs_ASM+0xc>
     e60:	e5810000 	str	r0, [r1]
     e64:	e12fff1e 	bx	lr
     e68:	ff200000 	.word	0xff200000

00000e6c <audio_read_data_ASM>:
     e6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e70:	e92d0003 	push	{r0, r1}
     e74:	eb000093 	bl	10c8 <audio_read_ralc_ASM>
     e78:	e3500000 	cmp	r0, #0
     e7c:	08bd0003 	popeq	{r0, r1}
     e80:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e84:	03a00000 	moveq	r0, #0
     e88:	012fff1e 	bxeq	lr
     e8c:	eb000092 	bl	10dc <audio_read_rarc_ASM>
     e90:	e3500000 	cmp	r0, #0
     e94:	08bd0003 	popeq	{r0, r1}
     e98:	03a00000 	moveq	r0, #0
     e9c:	012fff1e 	bxeq	lr
     ea0:	e8bd0003 	pop	{r0, r1}
     ea4:	e59f2240 	ldr	r2, [pc, #576]	; 10ec <audio_read_rarc_ASM+0x10>
     ea8:	e5922000 	ldr	r2, [r2]
     eac:	e5802000 	str	r2, [r0]
     eb0:	e59f3238 	ldr	r3, [pc, #568]	; 10f0 <audio_read_rarc_ASM+0x14>
     eb4:	e5933000 	ldr	r3, [r3]
     eb8:	e5813000 	str	r3, [r1]
     ebc:	e3a00001 	mov	r0, #1

00000ec0 <audio_read_leftdata_ASM>:
     ec0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ec4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ec8:	eb00007e 	bl	10c8 <audio_read_ralc_ASM>
     ecc:	e3500000 	cmp	r0, #0
     ed0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     ed4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ed8:	03a00000 	moveq	r0, #0
     edc:	012fff1e 	bxeq	lr
     ee0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     ee4:	e59f2200 	ldr	r2, [pc, #512]	; 10ec <audio_read_rarc_ASM+0x10>
     ee8:	e5922000 	ldr	r2, [r2]
     eec:	e5802000 	str	r2, [r0]
     ef0:	e3a00001 	mov	r0, #1
     ef4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     ef8:	e12fff1e 	bx	lr

00000efc <audio_read_rightdata_ASM>:
     efc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f00:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f04:	eb000074 	bl	10dc <audio_read_rarc_ASM>
     f08:	e3500000 	cmp	r0, #0
     f0c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f10:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f14:	03a00000 	moveq	r0, #0
     f18:	012fff1e 	bxeq	lr
     f1c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f20:	e59f21c8 	ldr	r2, [pc, #456]	; 10f0 <audio_read_rarc_ASM+0x14>
     f24:	e5922000 	ldr	r2, [r2]
     f28:	e5802000 	str	r2, [r0]
     f2c:	e3a00001 	mov	r0, #1
     f30:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f34:	e12fff1e 	bx	lr

00000f38 <audio_write_data_ASM>:
     f38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f3c:	e92d0003 	push	{r0, r1}
     f40:	eb000056 	bl	10a0 <audio_read_wslc_ASM>
     f44:	e3500000 	cmp	r0, #0
     f48:	08bd0003 	popeq	{r0, r1}
     f4c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f50:	03a00000 	moveq	r0, #0
     f54:	012fff1e 	bxeq	lr
     f58:	eb000055 	bl	10b4 <audio_read_wsrc_ASM>
     f5c:	e3500000 	cmp	r0, #0
     f60:	08bd0003 	popeq	{r0, r1}
     f64:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f68:	03a00000 	moveq	r0, #0
     f6c:	012fff1e 	bxeq	lr
     f70:	e8bd0003 	pop	{r0, r1}
     f74:	e59f2170 	ldr	r2, [pc, #368]	; 10ec <audio_read_rarc_ASM+0x10>
     f78:	e5820000 	str	r0, [r2]
     f7c:	e59f316c 	ldr	r3, [pc, #364]	; 10f0 <audio_read_rarc_ASM+0x14>
     f80:	e5831000 	str	r1, [r3]
     f84:	e3a00001 	mov	r0, #1
     f88:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f8c:	e12fff1e 	bx	lr

00000f90 <audio_write_leftdata_ASM>:
     f90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f94:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f98:	eb000040 	bl	10a0 <audio_read_wslc_ASM>
     f9c:	e3500000 	cmp	r0, #0
     fa0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fa4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fa8:	03a00000 	moveq	r0, #0
     fac:	012fff1e 	bxeq	lr
     fb0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fb4:	e59f2130 	ldr	r2, [pc, #304]	; 10ec <audio_read_rarc_ASM+0x10>
     fb8:	e5820000 	str	r0, [r2]
     fbc:	e3a00001 	mov	r0, #1
     fc0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fc4:	e12fff1e 	bx	lr

00000fc8 <audio_write_rightdata_ASM>:
     fc8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fcc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fd0:	eb000037 	bl	10b4 <audio_read_wsrc_ASM>
     fd4:	e3500000 	cmp	r0, #0
     fd8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fdc:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fe0:	03a00000 	moveq	r0, #0
     fe4:	012fff1e 	bxeq	lr
     fe8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fec:	e59f20fc 	ldr	r2, [pc, #252]	; 10f0 <audio_read_rarc_ASM+0x14>
     ff0:	e5820000 	str	r0, [r2]
     ff4:	e3a00001 	mov	r0, #1
     ff8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     ffc:	e12fff1e 	bx	lr

00001000 <audio_enable_read_fifo_clear_ASM>:
    1000:	e59f00ec 	ldr	r0, [pc, #236]	; 10f4 <audio_read_rarc_ASM+0x18>
    1004:	e5901000 	ldr	r1, [r0]
    1008:	e3811004 	orr	r1, r1, #4
    100c:	e5801000 	str	r1, [r0]
    1010:	e12fff1e 	bx	lr

00001014 <audio_enable_write_fifo_clear_ASM>:
    1014:	e59f00d8 	ldr	r0, [pc, #216]	; 10f4 <audio_read_rarc_ASM+0x18>
    1018:	e5901000 	ldr	r1, [r0]
    101c:	e3811008 	orr	r1, r1, #8
    1020:	e5801000 	str	r1, [r0]
    1024:	e12fff1e 	bx	lr

00001028 <audio_disable_read_fifo_clear_ASM>:
    1028:	e59f00c4 	ldr	r0, [pc, #196]	; 10f4 <audio_read_rarc_ASM+0x18>
    102c:	e5901000 	ldr	r1, [r0]
    1030:	e3c11004 	bic	r1, r1, #4
    1034:	e5801000 	str	r1, [r0]
    1038:	e12fff1e 	bx	lr

0000103c <audio_disable_write_fifo_clear_ASM>:
    103c:	e59f00b0 	ldr	r0, [pc, #176]	; 10f4 <audio_read_rarc_ASM+0x18>
    1040:	e5901000 	ldr	r1, [r0]
    1044:	e3c11008 	bic	r1, r1, #8
    1048:	e5801000 	str	r1, [r0]
    104c:	e12fff1e 	bx	lr

00001050 <audio_enable_read_int_ASM>:
    1050:	e59f009c 	ldr	r0, [pc, #156]	; 10f4 <audio_read_rarc_ASM+0x18>
    1054:	e5901000 	ldr	r1, [r0]
    1058:	e3811001 	orr	r1, r1, #1
    105c:	e5801000 	str	r1, [r0]
    1060:	e12fff1e 	bx	lr

00001064 <audio_enable_write_int_ASM>:
    1064:	e59f0088 	ldr	r0, [pc, #136]	; 10f4 <audio_read_rarc_ASM+0x18>
    1068:	e5901000 	ldr	r1, [r0]
    106c:	e3811002 	orr	r1, r1, #2
    1070:	e5801000 	str	r1, [r0]
    1074:	e12fff1e 	bx	lr

00001078 <audio_disable_read_int_ASM>:
    1078:	e59f0074 	ldr	r0, [pc, #116]	; 10f4 <audio_read_rarc_ASM+0x18>
    107c:	e5901000 	ldr	r1, [r0]
    1080:	e3c11001 	bic	r1, r1, #1
    1084:	e5801000 	str	r1, [r0]
    1088:	e12fff1e 	bx	lr

0000108c <audio_disable_write_int_ASM>:
    108c:	e59f0060 	ldr	r0, [pc, #96]	; 10f4 <audio_read_rarc_ASM+0x18>
    1090:	e5901000 	ldr	r1, [r0]
    1094:	e3c11002 	bic	r1, r1, #2
    1098:	e5801000 	str	r1, [r0]
    109c:	e12fff1e 	bx	lr

000010a0 <audio_read_wslc_ASM>:
    10a0:	e59f0050 	ldr	r0, [pc, #80]	; 10f8 <audio_read_rarc_ASM+0x1c>
    10a4:	e5900000 	ldr	r0, [r0]
    10a8:	e1a00c20 	lsr	r0, r0, #24
    10ac:	e20000ff 	and	r0, r0, #255	; 0xff
    10b0:	e12fff1e 	bx	lr

000010b4 <audio_read_wsrc_ASM>:
    10b4:	e59f003c 	ldr	r0, [pc, #60]	; 10f8 <audio_read_rarc_ASM+0x1c>
    10b8:	e5900000 	ldr	r0, [r0]
    10bc:	e1a00820 	lsr	r0, r0, #16
    10c0:	e20000ff 	and	r0, r0, #255	; 0xff
    10c4:	e12fff1e 	bx	lr

000010c8 <audio_read_ralc_ASM>:
    10c8:	e59f0028 	ldr	r0, [pc, #40]	; 10f8 <audio_read_rarc_ASM+0x1c>
    10cc:	e5900000 	ldr	r0, [r0]
    10d0:	e1a00420 	lsr	r0, r0, #8
    10d4:	e20000ff 	and	r0, r0, #255	; 0xff
    10d8:	e12fff1e 	bx	lr

000010dc <audio_read_rarc_ASM>:
    10dc:	e59f0014 	ldr	r0, [pc, #20]	; 10f8 <audio_read_rarc_ASM+0x1c>
    10e0:	e5900000 	ldr	r0, [r0]
    10e4:	e20000ff 	and	r0, r0, #255	; 0xff
    10e8:	e12fff1e 	bx	lr
    10ec:	ff203048 	.word	0xff203048
    10f0:	ff20304c 	.word	0xff20304c
    10f4:	ff203040 	.word	0xff203040
    10f8:	ff203044 	.word	0xff203044

000010fc <read_ps2_data_ASM>:
    10fc:	e59f114c 	ldr	r1, [pc, #332]	; 1250 <ps2_fifo_ravail+0x4>
    1100:	e5911000 	ldr	r1, [r1]
    1104:	e3a02902 	mov	r2, #32768	; 0x8000
    1108:	e1110002 	tst	r1, r2
    110c:	03a00000 	moveq	r0, #0
    1110:	012fff1e 	bxeq	lr
    1114:	e20120ff 	and	r2, r1, #255	; 0xff
    1118:	e5c02000 	strb	r2, [r0]
    111c:	e59f2130 	ldr	r2, [pc, #304]	; 1254 <ps2_fifo_ravail+0x8>
    1120:	e0010002 	and	r0, r1, r2
    1124:	e1a00820 	lsr	r0, r0, #16
    1128:	e12fff1e 	bx	lr

0000112c <enable_ps2_int_ASM>:
    112c:	e59f011c 	ldr	r0, [pc, #284]	; 1250 <ps2_fifo_ravail+0x4>
    1130:	e3a01001 	mov	r1, #1
    1134:	e5c01004 	strb	r1, [r0, #4]
    1138:	e12fff1e 	bx	lr

0000113c <disable_ps2_int_ASM>:
    113c:	e59f010c 	ldr	r0, [pc, #268]	; 1250 <ps2_fifo_ravail+0x4>
    1140:	e3a01000 	mov	r1, #0
    1144:	e5c01004 	strb	r1, [r0, #4]
    1148:	e12fff1e 	bx	lr

0000114c <ps2_fifo_data>:
	...

0000124c <ps2_fifo_ravail>:
    124c:	00000000 	.word	0x00000000
    1250:	ff200100 	.word	0xff200100
    1254:	ffff0000 	.word	0xffff0000

00001258 <read_PB_data_ASM>:
    1258:	e59f1074 	ldr	r1, [pc, #116]	; 12d4 <disable_PB_INT_ASM+0x14>
    125c:	e5910000 	ldr	r0, [r1]
    1260:	e12fff1e 	bx	lr

00001264 <PB_data_is_pressed_ASM>:
    1264:	e59f1068 	ldr	r1, [pc, #104]	; 12d4 <disable_PB_INT_ASM+0x14>
    1268:	e5912000 	ldr	r2, [r1]
    126c:	e0000002 	and	r0, r0, r2
    1270:	e3300000 	teq	r0, #0
    1274:	13a00001 	movne	r0, #1
    1278:	e12fff1e 	bx	lr

0000127c <read_PB_edgecap_ASM>:
    127c:	e59f1054 	ldr	r1, [pc, #84]	; 12d8 <disable_PB_INT_ASM+0x18>
    1280:	e5910000 	ldr	r0, [r1]
    1284:	e12fff1e 	bx	lr

00001288 <PB_edgecap_is_pressed_ASM>:
    1288:	e59f1048 	ldr	r1, [pc, #72]	; 12d8 <disable_PB_INT_ASM+0x18>
    128c:	e5912000 	ldr	r2, [r1]
    1290:	e0000002 	and	r0, r0, r2
    1294:	e3300000 	teq	r0, #0
    1298:	13a00001 	movne	r0, #1
    129c:	e12fff1e 	bx	lr

000012a0 <PB_clear_edgecp_ASM>:
    12a0:	e59f1030 	ldr	r1, [pc, #48]	; 12d8 <disable_PB_INT_ASM+0x18>
    12a4:	e5810000 	str	r0, [r1]
    12a8:	e12fff1e 	bx	lr

000012ac <enable_PB_INT_ASM>:
    12ac:	e59f1028 	ldr	r1, [pc, #40]	; 12dc <disable_PB_INT_ASM+0x1c>
    12b0:	e5912000 	ldr	r2, [r1]
    12b4:	e1800002 	orr	r0, r0, r2
    12b8:	e5810000 	str	r0, [r1]
    12bc:	e12fff1e 	bx	lr

000012c0 <disable_PB_INT_ASM>:
    12c0:	e59f1014 	ldr	r1, [pc, #20]	; 12dc <disable_PB_INT_ASM+0x1c>
    12c4:	e5912000 	ldr	r2, [r1]
    12c8:	e1c00002 	bic	r0, r0, r2
    12cc:	e5810000 	str	r0, [r1]
    12d0:	e12fff1e 	bx	lr
    12d4:	ff200050 	.word	0xff200050
    12d8:	ff20005c 	.word	0xff20005c
    12dc:	ff200058 	.word	0xff200058

000012e0 <read_slider_switches_ASM>:
    12e0:	e59f1004 	ldr	r1, [pc, #4]	; 12ec <read_slider_switches_ASM+0xc>
    12e4:	e5910000 	ldr	r0, [r1]
    12e8:	e12fff1e 	bx	lr
    12ec:	ff200040 	.word	0xff200040

000012f0 <VGA_clear_charbuff_ASM>:
    12f0:	e92d0030 	push	{r4, r5}
    12f4:	e3a02000 	mov	r2, #0
    12f8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    12fc:	e3a00000 	mov	r0, #0

00001300 <CHAR_LOOPX>:
    1300:	e3a01000 	mov	r1, #0
    1304:	e0834000 	add	r4, r3, r0

00001308 <CHAR_LOOPY>:
    1308:	e0845381 	add	r5, r4, r1, lsl #7
    130c:	e5c52000 	strb	r2, [r5]
    1310:	e2811001 	add	r1, r1, #1
    1314:	e351003c 	cmp	r1, #60	; 0x3c
    1318:	bafffffa 	blt	1308 <CHAR_LOOPY>
    131c:	e2800001 	add	r0, r0, #1
    1320:	e3500050 	cmp	r0, #80	; 0x50
    1324:	bafffff5 	blt	1300 <CHAR_LOOPX>
    1328:	e8bd0030 	pop	{r4, r5}
    132c:	e12fff1e 	bx	lr

00001330 <VGA_clear_pixelbuff_ASM>:
    1330:	e92d0030 	push	{r4, r5}
    1334:	e3a02000 	mov	r2, #0
    1338:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    133c:	e3a00000 	mov	r0, #0

00001340 <PIXEL_LOOPX>:
    1340:	e3a01000 	mov	r1, #0
    1344:	e0834080 	add	r4, r3, r0, lsl #1

00001348 <PIXEL_LOOPY>:
    1348:	e0845501 	add	r5, r4, r1, lsl #10
    134c:	e1c520b0 	strh	r2, [r5]
    1350:	e2811001 	add	r1, r1, #1
    1354:	e35100f0 	cmp	r1, #240	; 0xf0
    1358:	bafffffa 	blt	1348 <PIXEL_LOOPY>
    135c:	e2800001 	add	r0, r0, #1
    1360:	e3500d05 	cmp	r0, #320	; 0x140
    1364:	bafffff5 	blt	1340 <PIXEL_LOOPX>
    1368:	e8bd0030 	pop	{r4, r5}
    136c:	e12fff1e 	bx	lr

00001370 <VGA_write_char_ASM>:
    1370:	e3500000 	cmp	r0, #0
    1374:	b12fff1e 	bxlt	lr
    1378:	e3510000 	cmp	r1, #0
    137c:	b12fff1e 	bxlt	lr
    1380:	e350004f 	cmp	r0, #79	; 0x4f
    1384:	c12fff1e 	bxgt	lr
    1388:	e351003b 	cmp	r1, #59	; 0x3b
    138c:	c12fff1e 	bxgt	lr
    1390:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1394:	e0833000 	add	r3, r3, r0
    1398:	e0833381 	add	r3, r3, r1, lsl #7
    139c:	e5c32000 	strb	r2, [r3]
    13a0:	e12fff1e 	bx	lr

000013a4 <VGA_write_byte_ASM>:
    13a4:	e3500000 	cmp	r0, #0
    13a8:	b12fff1e 	bxlt	lr
    13ac:	e3510000 	cmp	r1, #0
    13b0:	b12fff1e 	bxlt	lr
    13b4:	e350004e 	cmp	r0, #78	; 0x4e
    13b8:	c12fff1e 	bxgt	lr
    13bc:	e351003b 	cmp	r1, #59	; 0x3b
    13c0:	c12fff1e 	bxgt	lr
    13c4:	e92d0030 	push	{r4, r5}
    13c8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13cc:	e20250f0 	and	r5, r2, #240	; 0xf0
    13d0:	e1a05225 	lsr	r5, r5, #4
    13d4:	e202400f 	and	r4, r2, #15
    13d8:	e59f2068 	ldr	r2, [pc, #104]	; 1448 <HEX_ASCII+0x10>
    13dc:	e7d25005 	ldrb	r5, [r2, r5]
    13e0:	e7d24004 	ldrb	r4, [r2, r4]
    13e4:	e0833000 	add	r3, r3, r0
    13e8:	e0833381 	add	r3, r3, r1, lsl #7
    13ec:	e5c35000 	strb	r5, [r3]
    13f0:	e2833001 	add	r3, r3, #1
    13f4:	e5c34000 	strb	r4, [r3]
    13f8:	e8bd0030 	pop	{r4, r5}
    13fc:	e12fff1e 	bx	lr

00001400 <VGA_draw_point_ASM>:
    1400:	e59f3044 	ldr	r3, [pc, #68]	; 144c <HEX_ASCII+0x14>
    1404:	e3500000 	cmp	r0, #0
    1408:	b12fff1e 	bxlt	lr
    140c:	e3510000 	cmp	r1, #0
    1410:	b12fff1e 	bxlt	lr
    1414:	e1500003 	cmp	r0, r3
    1418:	c12fff1e 	bxgt	lr
    141c:	e35100ef 	cmp	r1, #239	; 0xef
    1420:	c12fff1e 	bxgt	lr
    1424:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1428:	e0833080 	add	r3, r3, r0, lsl #1
    142c:	e0833501 	add	r3, r3, r1, lsl #10
    1430:	e1c320b0 	strh	r2, [r3]
    1434:	e12fff1e 	bx	lr

00001438 <HEX_ASCII>:
    1438:	33323130 	.word	0x33323130
    143c:	37363534 	.word	0x37363534
    1440:	42413938 	.word	0x42413938
    1444:	46454443 	.word	0x46454443
    1448:	00001438 	.word	0x00001438
    144c:	0000013f 	.word	0x0000013f

00001450 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1450:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1454:	e28db000 	add	r11, sp, #0
    1458:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    145c:	e3a030d3 	mov	r3, #211	; 0xd3
    1460:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1464:	e51b3008 	ldr	r3, [r11, #-8]
    1468:	e129f003 	msr	CPSR_fc, r3
}
    146c:	e28bd000 	add	sp, r11, #0
    1470:	e8bd0800 	ldmfd	sp!, {r11}
    1474:	e12fff1e 	bx	lr

00001478 <enable_A9_interrupts>:

void enable_A9_interrupts() {
    1478:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    147c:	e28db000 	add	r11, sp, #0
    1480:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    1484:	e3a03053 	mov	r3, #83	; 0x53
    1488:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    148c:	e51b3008 	ldr	r3, [r11, #-8]
    1490:	e129f003 	msr	CPSR_fc, r3
}
    1494:	e28bd000 	add	sp, r11, #0
    1498:	e8bd0800 	ldmfd	sp!, {r11}
    149c:	e12fff1e 	bx	lr

000014a0 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    14a0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14a4:	e28db000 	add	r11, sp, #0
    14a8:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    14ac:	e3e03007 	mvn	r3, #7
    14b0:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    14b4:	e3a030d2 	mov	r3, #210	; 0xd2
    14b8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    14bc:	e51b300c 	ldr	r3, [r11, #-12]
    14c0:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    14c4:	e51b3008 	ldr	r3, [r11, #-8]
    14c8:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    14cc:	e3a030d3 	mov	r3, #211	; 0xd3
    14d0:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    14d4:	e51b300c 	ldr	r3, [r11, #-12]
    14d8:	e129f003 	msr	CPSR_fc, r3
}
    14dc:	e28bd000 	add	sp, r11, #0
    14e0:	e8bd0800 	ldmfd	sp!, {r11}
    14e4:	e12fff1e 	bx	lr

000014e8 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    14e8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14ec:	e28db000 	add	r11, sp, #0
    14f0:	e24dd01c 	sub	sp, sp, #28
    14f4:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    14f8:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    14fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1500:	e1a031c3 	asr	r3, r3, #3
    1504:	e3c33003 	bic	r3, r3, #3
    1508:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    150c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1510:	e203301f 	and	r3, r3, #31
    1514:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    1518:	e3a02001 	mov	r2, #1
    151c:	e51b300c 	ldr	r3, [r11, #-12]
    1520:	e1a03312 	lsl	r3, r2, r3
    1524:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1528:	e51b3008 	ldr	r3, [r11, #-8]
    152c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1530:	e2433c03 	sub	r3, r3, #768	; 0x300
    1534:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1538:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    153c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1540:	e5921000 	ldr	r1, [r2]
    1544:	e51b2010 	ldr	r2, [r11, #-16]
    1548:	e1812002 	orr	r2, r1, r2
    154c:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1550:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1554:	e3c33003 	bic	r3, r3, #3
    1558:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    155c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1560:	e2033003 	and	r3, r3, #3
    1564:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1568:	e51b2008 	ldr	r2, [r11, #-8]
    156c:	e51b300c 	ldr	r3, [r11, #-12]
    1570:	e0823003 	add	r3, r2, r3
    1574:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    1578:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    157c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1580:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1584:	e6ef2072 	uxtb	r2, r2
    1588:	e5c32000 	strb	r2, [r3]
}
    158c:	e28bd000 	add	sp, r11, #0
    1590:	e8bd0800 	ldmfd	sp!, {r11}
    1594:	e12fff1e 	bx	lr

00001598 <config_GIC>:

void config_GIC(int len, int* IDs) {
    1598:	e92d4800 	push	{r11, lr}
    159c:	e28db004 	add	r11, sp, #4
    15a0:	e24dd010 	sub	sp, sp, #16
    15a4:	e50b0010 	str	r0, [r11, #-16]
    15a8:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    15ac:	e3a03000 	mov	r3, #0
    15b0:	e50b3008 	str	r3, [r11, #-8]
    15b4:	ea00000a 	b	15e4 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    15b8:	e51b3008 	ldr	r3, [r11, #-8]
    15bc:	e1a03103 	lsl	r3, r3, #2
    15c0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    15c4:	e0823003 	add	r3, r2, r3
    15c8:	e5933000 	ldr	r3, [r3]
    15cc:	e1a00003 	mov	r0, r3
    15d0:	e3a01001 	mov	r1, #1
    15d4:	ebffffc3 	bl	14e8 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    15d8:	e51b3008 	ldr	r3, [r11, #-8]
    15dc:	e2833001 	add	r3, r3, #1
    15e0:	e50b3008 	str	r3, [r11, #-8]
    15e4:	e51b2008 	ldr	r2, [r11, #-8]
    15e8:	e51b3010 	ldr	r3, [r11, #-16]
    15ec:	e1520003 	cmp	r2, r3
    15f0:	bafffff0 	blt	15b8 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    15f4:	e30c3104 	movw	r3, #49412	; 0xc104
    15f8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    15fc:	e30f2fff 	movw	r2, #65535	; 0xffff
    1600:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    1604:	e3a03cc1 	mov	r3, #49408	; 0xc100
    1608:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    160c:	e3a02001 	mov	r2, #1
    1610:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    1614:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1618:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    161c:	e3a02001 	mov	r2, #1
    1620:	e5832000 	str	r2, [r3]
}
    1624:	e24bd004 	sub	sp, r11, #4
    1628:	e8bd8800 	pop	{r11, pc}

0000162c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    162c:	e24ee004 	sub	lr, lr, #4
    1630:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1634:	e28db018 	add	r11, sp, #24
    1638:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    163c:	e30c310c 	movw	r3, #49420	; 0xc10c
    1640:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1644:	e5933000 	ldr	r3, [r3]
    1648:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    164c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1650:	e3530053 	cmp	r3, #83	; 0x53
    1654:	0a00003d 	beq	1750 <__cs3_isr_irq+0x124>
    1658:	e3530053 	cmp	r3, #83	; 0x53
    165c:	ca000011 	bgt	16a8 <__cs3_isr_irq+0x7c>
    1660:	e353004e 	cmp	r3, #78	; 0x4e
    1664:	0a000031 	beq	1730 <__cs3_isr_irq+0x104>
    1668:	e353004e 	cmp	r3, #78	; 0x4e
    166c:	ca000006 	bgt	168c <__cs3_isr_irq+0x60>
    1670:	e3530048 	cmp	r3, #72	; 0x48
    1674:	0a000029 	beq	1720 <__cs3_isr_irq+0xf4>
    1678:	e3530049 	cmp	r3, #73	; 0x49
    167c:	0a000029 	beq	1728 <__cs3_isr_irq+0xfc>
    1680:	e353001d 	cmp	r3, #29
    1684:	0a000019 	beq	16f0 <__cs3_isr_irq+0xc4>
    1688:	ea000036 	b	1768 <__cs3_isr_irq+0x13c>
    168c:	e3530050 	cmp	r3, #80	; 0x50
    1690:	0a00002a 	beq	1740 <__cs3_isr_irq+0x114>
    1694:	e3530050 	cmp	r3, #80	; 0x50
    1698:	ba000026 	blt	1738 <__cs3_isr_irq+0x10c>
    169c:	e3530051 	cmp	r3, #81	; 0x51
    16a0:	0a000028 	beq	1748 <__cs3_isr_irq+0x11c>
    16a4:	ea00002f 	b	1768 <__cs3_isr_irq+0x13c>
    16a8:	e35300c7 	cmp	r3, #199	; 0xc7
    16ac:	0a000013 	beq	1700 <__cs3_isr_irq+0xd4>
    16b0:	e35300c7 	cmp	r3, #199	; 0xc7
    16b4:	ca000006 	bgt	16d4 <__cs3_isr_irq+0xa8>
    16b8:	e3530059 	cmp	r3, #89	; 0x59
    16bc:	0a000027 	beq	1760 <__cs3_isr_irq+0x134>
    16c0:	e35300c5 	cmp	r3, #197	; 0xc5
    16c4:	0a00000b 	beq	16f8 <__cs3_isr_irq+0xcc>
    16c8:	e3530054 	cmp	r3, #84	; 0x54
    16cc:	0a000021 	beq	1758 <__cs3_isr_irq+0x12c>
    16d0:	ea000024 	b	1768 <__cs3_isr_irq+0x13c>
    16d4:	e35300c9 	cmp	r3, #201	; 0xc9
    16d8:	0a00000c 	beq	1710 <__cs3_isr_irq+0xe4>
    16dc:	e35300c9 	cmp	r3, #201	; 0xc9
    16e0:	ba000008 	blt	1708 <__cs3_isr_irq+0xdc>
    16e4:	e35300ca 	cmp	r3, #202	; 0xca
    16e8:	0a00000a 	beq	1718 <__cs3_isr_irq+0xec>
    16ec:	ea00001d 	b	1768 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    16f0:	ebfffdbf 	bl	df4 <A9_PRIV_TIM_ISR>
    16f4:	ea00001c 	b	176c <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    16f8:	ebfffdbe 	bl	df8 <HPS_GPIO1_ISR>
    16fc:	ea00001a 	b	176c <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1700:	ebfffdbd 	bl	dfc <HPS_TIM0_ISR>
    1704:	ea000018 	b	176c <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    1708:	ebfffdc3 	bl	e1c <HPS_TIM1_ISR>
    170c:	ea000016 	b	176c <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1710:	ebfffdc2 	bl	e20 <HPS_TIM2_ISR>
    1714:	ea000014 	b	176c <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    1718:	ebfffdc1 	bl	e24 <HPS_TIM3_ISR>
    171c:	ea000012 	b	176c <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1720:	ebfffdc0 	bl	e28 <FPGA_INTERVAL_TIM_ISR>
    1724:	ea000010 	b	176c <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    1728:	ebfffdbf 	bl	e2c <FPGA_PB_KEYS_ISR>
    172c:	ea00000e 	b	176c <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1730:	ebfffdbe 	bl	e30 <FPGA_Audio_ISR>
    1734:	ea00000c 	b	176c <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1738:	ebfffdbd 	bl	e34 <FPGA_PS2_ISR>
    173c:	ea00000a 	b	176c <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1740:	ebfffdbc 	bl	e38 <FPGA_JTAG_ISR>
    1744:	ea000008 	b	176c <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1748:	ebfffdbb 	bl	e3c <FPGA_IrDA_ISR>
    174c:	ea000006 	b	176c <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1750:	ebfffdba 	bl	e40 <FPGA_JP1_ISR>
    1754:	ea000004 	b	176c <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1758:	ebfffdb9 	bl	e44 <FPGA_JP2_ISR>
    175c:	ea000002 	b	176c <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1760:	ebfffdb8 	bl	e48 <FPGA_PS2_DUAL_ISR>
    1764:	ea000000 	b	176c <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1768:	eafffffe 	b	1768 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    176c:	e30c3110 	movw	r3, #49424	; 0xc110
    1770:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1774:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1778:	e5832000 	str	r2, [r3]
}
    177c:	e24bd018 	sub	sp, r11, #24
    1780:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00001784 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    1784:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1788:	e28db000 	add	r11, sp, #0
	while(1);
    178c:	eafffffe 	b	178c <__cs3_reset+0x8>

00001790 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    1790:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1794:	e28db000 	add	r11, sp, #0
	while(1);
    1798:	eafffffe 	b	1798 <__cs3_isr_undef+0x8>

0000179c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    179c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17a0:	e28db000 	add	r11, sp, #0
	while(1);
    17a4:	eafffffe 	b	17a4 <__cs3_isr_swi+0x8>

000017a8 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    17a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17ac:	e28db000 	add	r11, sp, #0
	while(1);
    17b0:	eafffffe 	b	17b0 <__cs3_isr_pabort+0x8>

000017b4 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    17b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17b8:	e28db000 	add	r11, sp, #0
	while(1);
    17bc:	eafffffe 	b	17bc <__cs3_isr_dabort+0x8>

000017c0 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    17c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17c4:	e28db000 	add	r11, sp, #0
	while(1);
    17c8:	eafffffe 	b	17c8 <__cs3_isr_fiq+0x8>

000017cc <fix_bug>:
}

void fix_bug() {
    17cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17d0:	e28db000 	add	r11, sp, #0
    17d4:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    17d8:	e30d3198 	movw	r3, #53656	; 0xd198
    17dc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    17e0:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    17e4:	e51b3008 	ldr	r3, [r11, #-8]
    17e8:	e3a02703 	mov	r2, #786432	; 0xc0000
    17ec:	e5832000 	str	r2, [r3]
}
    17f0:	e28bd000 	add	sp, r11, #0
    17f4:	e8bd0800 	ldmfd	sp!, {r11}
    17f8:	e12fff1e 	bx	lr

000017fc <int_setup>:

void int_setup(int len, int* IDs) {
    17fc:	e92d4800 	push	{r11, lr}
    1800:	e28db004 	add	r11, sp, #4
    1804:	e24dd008 	sub	sp, sp, #8
    1808:	e50b0008 	str	r0, [r11, #-8]
    180c:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1810:	ebffff0e 	bl	1450 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1814:	ebffff21 	bl	14a0 <set_A9_IRQ_stack>
	fix_bug();
    1818:	ebffffeb 	bl	17cc <fix_bug>
	config_GIC(len, IDs);
    181c:	e51b0008 	ldr	r0, [r11, #-8]
    1820:	e51b100c 	ldr	r1, [r11, #-12]
    1824:	ebffff5b 	bl	1598 <config_GIC>
	enable_A9_interrupts();
    1828:	ebffff12 	bl	1478 <enable_A9_interrupts>
}
    182c:	e24bd004 	sub	sp, r11, #4
    1830:	e8bd8800 	pop	{r11, pc}

00001834 <__aeabi_drsub>:
    1834:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1838:	ea000000 	b	1840 <__adddf3>

0000183c <__aeabi_dsub>:
    183c:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001840 <__adddf3>:
    1840:	e92d4030 	push	{r4, r5, lr}
    1844:	e1a04081 	lsl	r4, r1, #1
    1848:	e1a05083 	lsl	r5, r3, #1
    184c:	e1340005 	teq	r4, r5
    1850:	01300002 	teqeq	r0, r2
    1854:	1194c000 	orrsne	r12, r4, r0
    1858:	1195c002 	orrsne	r12, r5, r2
    185c:	11f0cac4 	mvnsne	r12, r4, asr #21
    1860:	11f0cac5 	mvnsne	r12, r5, asr #21
    1864:	0a00008c 	beq	1a9c <__adddf3+0x25c>
    1868:	e1a04aa4 	lsr	r4, r4, #21
    186c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1870:	b2655000 	rsblt	r5, r5, #0
    1874:	da000006 	ble	1894 <__adddf3+0x54>
    1878:	e0844005 	add	r4, r4, r5
    187c:	e0202002 	eor	r2, r0, r2
    1880:	e0213003 	eor	r3, r1, r3
    1884:	e0220000 	eor	r0, r2, r0
    1888:	e0231001 	eor	r1, r3, r1
    188c:	e0202002 	eor	r2, r0, r2
    1890:	e0213003 	eor	r3, r1, r3
    1894:	e3550036 	cmp	r5, #54	; 0x36
    1898:	88bd4030 	pophi	{r4, r5, lr}
    189c:	812fff1e 	bxhi	lr
    18a0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    18a4:	e1a01601 	lsl	r1, r1, #12
    18a8:	e3a0c601 	mov	r12, #1048576	; 0x100000
    18ac:	e18c1621 	orr	r1, r12, r1, lsr #12
    18b0:	0a000001 	beq	18bc <__adddf3+0x7c>
    18b4:	e2700000 	rsbs	r0, r0, #0
    18b8:	e2e11000 	rsc	r1, r1, #0
    18bc:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    18c0:	e1a03603 	lsl	r3, r3, #12
    18c4:	e18c3623 	orr	r3, r12, r3, lsr #12
    18c8:	0a000001 	beq	18d4 <__adddf3+0x94>
    18cc:	e2722000 	rsbs	r2, r2, #0
    18d0:	e2e33000 	rsc	r3, r3, #0
    18d4:	e1340005 	teq	r4, r5
    18d8:	0a000069 	beq	1a84 <__adddf3+0x244>
    18dc:	e2444001 	sub	r4, r4, #1
    18e0:	e275e020 	rsbs	lr, r5, #32
    18e4:	ba000005 	blt	1900 <__adddf3+0xc0>
    18e8:	e1a0ce12 	lsl	r12, r2, lr
    18ec:	e0900532 	adds	r0, r0, r2, lsr r5
    18f0:	e2a11000 	adc	r1, r1, #0
    18f4:	e0900e13 	adds	r0, r0, r3, lsl lr
    18f8:	e0b11553 	adcs	r1, r1, r3, asr r5
    18fc:	ea000006 	b	191c <__adddf3+0xdc>
    1900:	e2455020 	sub	r5, r5, #32
    1904:	e28ee020 	add	lr, lr, #32
    1908:	e3520001 	cmp	r2, #1
    190c:	e1a0ce13 	lsl	r12, r3, lr
    1910:	238cc002 	orrcs	r12, r12, #2
    1914:	e0900553 	adds	r0, r0, r3, asr r5
    1918:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    191c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1920:	5a000002 	bpl	1930 <__adddf3+0xf0>
    1924:	e27cc000 	rsbs	r12, r12, #0
    1928:	e2f00000 	rscs	r0, r0, #0
    192c:	e2e11000 	rsc	r1, r1, #0
    1930:	e3510601 	cmp	r1, #1048576	; 0x100000
    1934:	3a00000f 	bcc	1978 <__adddf3+0x138>
    1938:	e3510602 	cmp	r1, #2097152	; 0x200000
    193c:	3a000006 	bcc	195c <__adddf3+0x11c>
    1940:	e1b010a1 	lsrs	r1, r1, #1
    1944:	e1b00060 	rrxs	r0, r0
    1948:	e1a0c06c 	rrx	r12, r12
    194c:	e2844001 	add	r4, r4, #1
    1950:	e1a02a84 	lsl	r2, r4, #21
    1954:	e3720501 	cmn	r2, #4194304	; 0x400000
    1958:	2a00006b 	bcs	1b0c <__adddf3+0x2cc>
    195c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1960:	01b0c0a0 	lsrseq	r12, r0, #1
    1964:	e2b00000 	adcs	r0, r0, #0
    1968:	e0a11a04 	adc	r1, r1, r4, lsl #20
    196c:	e1811005 	orr	r1, r1, r5
    1970:	e8bd4030 	pop	{r4, r5, lr}
    1974:	e12fff1e 	bx	lr
    1978:	e1b0c08c 	lsls	r12, r12, #1
    197c:	e0b00000 	adcs	r0, r0, r0
    1980:	e0a11001 	adc	r1, r1, r1
    1984:	e3110601 	tst	r1, #1048576	; 0x100000
    1988:	e2444001 	sub	r4, r4, #1
    198c:	1afffff2 	bne	195c <__adddf3+0x11c>
    1990:	e3310000 	teq	r1, #0
    1994:	13a03014 	movne	r3, #20
    1998:	03a03034 	moveq	r3, #52	; 0x34
    199c:	01a01000 	moveq	r1, r0
    19a0:	03a00000 	moveq	r0, #0
    19a4:	e1a02001 	mov	r2, r1
    19a8:	e3520801 	cmp	r2, #65536	; 0x10000
    19ac:	21a02822 	lsrcs	r2, r2, #16
    19b0:	22433010 	subcs	r3, r3, #16
    19b4:	e3520c01 	cmp	r2, #256	; 0x100
    19b8:	21a02422 	lsrcs	r2, r2, #8
    19bc:	22433008 	subcs	r3, r3, #8
    19c0:	e3520010 	cmp	r2, #16
    19c4:	21a02222 	lsrcs	r2, r2, #4
    19c8:	22433004 	subcs	r3, r3, #4
    19cc:	e3520004 	cmp	r2, #4
    19d0:	22433002 	subcs	r3, r3, #2
    19d4:	304330a2 	subcc	r3, r3, r2, lsr #1
    19d8:	e04331a2 	sub	r3, r3, r2, lsr #3
    19dc:	e2532020 	subs	r2, r3, #32
    19e0:	aa000007 	bge	1a04 <__adddf3+0x1c4>
    19e4:	e292200c 	adds	r2, r2, #12
    19e8:	da000004 	ble	1a00 <__adddf3+0x1c0>
    19ec:	e282c014 	add	r12, r2, #20
    19f0:	e262200c 	rsb	r2, r2, #12
    19f4:	e1a00c11 	lsl	r0, r1, r12
    19f8:	e1a01231 	lsr	r1, r1, r2
    19fc:	ea000004 	b	1a14 <__adddf3+0x1d4>
    1a00:	e2822014 	add	r2, r2, #20
    1a04:	d262c020 	rsble	r12, r2, #32
    1a08:	e1a01211 	lsl	r1, r1, r2
    1a0c:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1a10:	d1a00210 	lslle	r0, r0, r2
    1a14:	e0544003 	subs	r4, r4, r3
    1a18:	a0811a04 	addge	r1, r1, r4, lsl #20
    1a1c:	a1811005 	orrge	r1, r1, r5
    1a20:	a8bd4030 	popge	{r4, r5, lr}
    1a24:	a12fff1e 	bxge	lr
    1a28:	e1e04004 	mvn	r4, r4
    1a2c:	e254401f 	subs	r4, r4, #31
    1a30:	aa00000f 	bge	1a74 <__adddf3+0x234>
    1a34:	e294400c 	adds	r4, r4, #12
    1a38:	ca000006 	bgt	1a58 <__adddf3+0x218>
    1a3c:	e2844014 	add	r4, r4, #20
    1a40:	e2642020 	rsb	r2, r4, #32
    1a44:	e1a00430 	lsr	r0, r0, r4
    1a48:	e1800211 	orr	r0, r0, r1, lsl r2
    1a4c:	e1851431 	orr	r1, r5, r1, lsr r4
    1a50:	e8bd4030 	pop	{r4, r5, lr}
    1a54:	e12fff1e 	bx	lr
    1a58:	e264400c 	rsb	r4, r4, #12
    1a5c:	e2642020 	rsb	r2, r4, #32
    1a60:	e1a00230 	lsr	r0, r0, r2
    1a64:	e1800411 	orr	r0, r0, r1, lsl r4
    1a68:	e1a01005 	mov	r1, r5
    1a6c:	e8bd4030 	pop	{r4, r5, lr}
    1a70:	e12fff1e 	bx	lr
    1a74:	e1a00431 	lsr	r0, r1, r4
    1a78:	e1a01005 	mov	r1, r5
    1a7c:	e8bd4030 	pop	{r4, r5, lr}
    1a80:	e12fff1e 	bx	lr
    1a84:	e3340000 	teq	r4, #0
    1a88:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1a8c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1a90:	02844001 	addeq	r4, r4, #1
    1a94:	12455001 	subne	r5, r5, #1
    1a98:	eaffff8f 	b	18dc <__adddf3+0x9c>
    1a9c:	e1f0cac4 	mvns	r12, r4, asr #21
    1aa0:	11f0cac5 	mvnsne	r12, r5, asr #21
    1aa4:	0a00001d 	beq	1b20 <__adddf3+0x2e0>
    1aa8:	e1340005 	teq	r4, r5
    1aac:	01300002 	teqeq	r0, r2
    1ab0:	0a000004 	beq	1ac8 <__adddf3+0x288>
    1ab4:	e194c000 	orrs	r12, r4, r0
    1ab8:	01a01003 	moveq	r1, r3
    1abc:	01a00002 	moveq	r0, r2
    1ac0:	e8bd4030 	pop	{r4, r5, lr}
    1ac4:	e12fff1e 	bx	lr
    1ac8:	e1310003 	teq	r1, r3
    1acc:	13a01000 	movne	r1, #0
    1ad0:	13a00000 	movne	r0, #0
    1ad4:	18bd4030 	popne	{r4, r5, lr}
    1ad8:	112fff1e 	bxne	lr
    1adc:	e1b0caa4 	lsrs	r12, r4, #21
    1ae0:	1a000004 	bne	1af8 <__adddf3+0x2b8>
    1ae4:	e1b00080 	lsls	r0, r0, #1
    1ae8:	e0b11001 	adcs	r1, r1, r1
    1aec:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1af0:	e8bd4030 	pop	{r4, r5, lr}
    1af4:	e12fff1e 	bx	lr
    1af8:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1afc:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1b00:	38bd4030 	popcc	{r4, r5, lr}
    1b04:	312fff1e 	bxcc	lr
    1b08:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1b0c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1b10:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1b14:	e3a00000 	mov	r0, #0
    1b18:	e8bd4030 	pop	{r4, r5, lr}
    1b1c:	e12fff1e 	bx	lr
    1b20:	e1f0cac4 	mvns	r12, r4, asr #21
    1b24:	11a01003 	movne	r1, r3
    1b28:	11a00002 	movne	r0, r2
    1b2c:	01f0cac5 	mvnseq	r12, r5, asr #21
    1b30:	11a03001 	movne	r3, r1
    1b34:	11a02000 	movne	r2, r0
    1b38:	e1904601 	orrs	r4, r0, r1, lsl #12
    1b3c:	01925603 	orrseq	r5, r2, r3, lsl #12
    1b40:	01310003 	teqeq	r1, r3
    1b44:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1b48:	e8bd4030 	pop	{r4, r5, lr}
    1b4c:	e12fff1e 	bx	lr

00001b50 <__aeabi_ui2d>:
    1b50:	e3300000 	teq	r0, #0
    1b54:	03a01000 	moveq	r1, #0
    1b58:	012fff1e 	bxeq	lr
    1b5c:	e92d4030 	push	{r4, r5, lr}
    1b60:	e3a04b01 	mov	r4, #1024	; 0x400
    1b64:	e2844032 	add	r4, r4, #50	; 0x32
    1b68:	e3a05000 	mov	r5, #0
    1b6c:	e3a01000 	mov	r1, #0
    1b70:	eaffff86 	b	1990 <__adddf3+0x150>

00001b74 <__aeabi_i2d>:
    1b74:	e3300000 	teq	r0, #0
    1b78:	03a01000 	moveq	r1, #0
    1b7c:	012fff1e 	bxeq	lr
    1b80:	e92d4030 	push	{r4, r5, lr}
    1b84:	e3a04b01 	mov	r4, #1024	; 0x400
    1b88:	e2844032 	add	r4, r4, #50	; 0x32
    1b8c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1b90:	42600000 	rsbmi	r0, r0, #0
    1b94:	e3a01000 	mov	r1, #0
    1b98:	eaffff7c 	b	1990 <__adddf3+0x150>

00001b9c <__aeabi_f2d>:
    1b9c:	e1b02080 	lsls	r2, r0, #1
    1ba0:	e1a011c2 	asr	r1, r2, #3
    1ba4:	e1a01061 	rrx	r1, r1
    1ba8:	e1a00e02 	lsl	r0, r2, #28
    1bac:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1bb0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1bb4:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1bb8:	112fff1e 	bxne	lr
    1bbc:	e3320000 	teq	r2, #0
    1bc0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1bc4:	012fff1e 	bxeq	lr
    1bc8:	e92d4030 	push	{r4, r5, lr}
    1bcc:	e3a04d0e 	mov	r4, #896	; 0x380
    1bd0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1bd4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1bd8:	eaffff6c 	b	1990 <__adddf3+0x150>

00001bdc <__aeabi_ul2d>:
    1bdc:	e1902001 	orrs	r2, r0, r1
    1be0:	012fff1e 	bxeq	lr
    1be4:	e92d4030 	push	{r4, r5, lr}
    1be8:	e3a05000 	mov	r5, #0
    1bec:	ea000006 	b	1c0c <__aeabi_l2d+0x1c>

00001bf0 <__aeabi_l2d>:
    1bf0:	e1902001 	orrs	r2, r0, r1
    1bf4:	012fff1e 	bxeq	lr
    1bf8:	e92d4030 	push	{r4, r5, lr}
    1bfc:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1c00:	5a000001 	bpl	1c0c <__aeabi_l2d+0x1c>
    1c04:	e2700000 	rsbs	r0, r0, #0
    1c08:	e2e11000 	rsc	r1, r1, #0
    1c0c:	e3a04b01 	mov	r4, #1024	; 0x400
    1c10:	e2844032 	add	r4, r4, #50	; 0x32
    1c14:	e1b0cb21 	lsrs	r12, r1, #22
    1c18:	0affff44 	beq	1930 <__adddf3+0xf0>
    1c1c:	e3a02003 	mov	r2, #3
    1c20:	e1b0c1ac 	lsrs	r12, r12, #3
    1c24:	12822003 	addne	r2, r2, #3
    1c28:	e1b0c1ac 	lsrs	r12, r12, #3
    1c2c:	12822003 	addne	r2, r2, #3
    1c30:	e08221ac 	add	r2, r2, r12, lsr #3
    1c34:	e2623020 	rsb	r3, r2, #32
    1c38:	e1a0c310 	lsl	r12, r0, r3
    1c3c:	e1a00230 	lsr	r0, r0, r2
    1c40:	e1800311 	orr	r0, r0, r1, lsl r3
    1c44:	e1a01231 	lsr	r1, r1, r2
    1c48:	e0844002 	add	r4, r4, r2
    1c4c:	eaffff37 	b	1930 <__adddf3+0xf0>

00001c50 <__aeabi_dmul>:
    1c50:	e92d4070 	push	{r4, r5, r6, lr}
    1c54:	e3a0c0ff 	mov	r12, #255	; 0xff
    1c58:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1c5c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1c60:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1c64:	1134000c 	teqne	r4, r12
    1c68:	1135000c 	teqne	r5, r12
    1c6c:	0b000075 	bleq	1e48 <__aeabi_dmul+0x1f8>
    1c70:	e0844005 	add	r4, r4, r5
    1c74:	e0216003 	eor	r6, r1, r3
    1c78:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1c7c:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1c80:	e1905601 	orrs	r5, r0, r1, lsl #12
    1c84:	11925603 	orrsne	r5, r2, r3, lsl #12
    1c88:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1c8c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1c90:	0a00001d 	beq	1d0c <__aeabi_dmul+0xbc>
    1c94:	e08ec290 	umull	r12, lr, r0, r2
    1c98:	e3a05000 	mov	r5, #0
    1c9c:	e0a5e291 	umlal	lr, r5, r1, r2
    1ca0:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1ca4:	e0a5e390 	umlal	lr, r5, r0, r3
    1ca8:	e3a06000 	mov	r6, #0
    1cac:	e0a65391 	umlal	r5, r6, r1, r3
    1cb0:	e33c0000 	teq	r12, #0
    1cb4:	138ee001 	orrne	lr, lr, #1
    1cb8:	e24440ff 	sub	r4, r4, #255	; 0xff
    1cbc:	e3560c02 	cmp	r6, #512	; 0x200
    1cc0:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1cc4:	2a000002 	bcs	1cd4 <__aeabi_dmul+0x84>
    1cc8:	e1b0e08e 	lsls	lr, lr, #1
    1ccc:	e0b55005 	adcs	r5, r5, r5
    1cd0:	e0a66006 	adc	r6, r6, r6
    1cd4:	e1821586 	orr	r1, r2, r6, lsl #11
    1cd8:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1cdc:	e1a00585 	lsl	r0, r5, #11
    1ce0:	e1800aae 	orr	r0, r0, lr, lsr #21
    1ce4:	e1a0e58e 	lsl	lr, lr, #11
    1ce8:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1cec:	835c0c07 	cmphi	r12, #1792	; 0x700
    1cf0:	8a000011 	bhi	1d3c <__aeabi_dmul+0xec>
    1cf4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1cf8:	01b0e0a0 	lsrseq	lr, r0, #1
    1cfc:	e2b00000 	adcs	r0, r0, #0
    1d00:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1d04:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d08:	e12fff1e 	bx	lr
    1d0c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1d10:	e1861001 	orr	r1, r6, r1
    1d14:	e1800002 	orr	r0, r0, r2
    1d18:	e0211003 	eor	r1, r1, r3
    1d1c:	e05440ac 	subs	r4, r4, r12, lsr #1
    1d20:	c074500c 	rsbsgt	r5, r4, r12
    1d24:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1d28:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1d2c:	c12fff1e 	bxgt	lr
    1d30:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1d34:	e3a0e000 	mov	lr, #0
    1d38:	e2544001 	subs	r4, r4, #1
    1d3c:	ca00005d 	bgt	1eb8 <__aeabi_dmul+0x268>
    1d40:	e3740036 	cmn	r4, #54	; 0x36
    1d44:	d3a00000 	movle	r0, #0
    1d48:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1d4c:	d8bd4070 	pople	{r4, r5, r6, lr}
    1d50:	d12fff1e 	bxle	lr
    1d54:	e2644000 	rsb	r4, r4, #0
    1d58:	e2544020 	subs	r4, r4, #32
    1d5c:	aa00001a 	bge	1dcc <__aeabi_dmul+0x17c>
    1d60:	e294400c 	adds	r4, r4, #12
    1d64:	ca00000c 	bgt	1d9c <__aeabi_dmul+0x14c>
    1d68:	e2844014 	add	r4, r4, #20
    1d6c:	e2645020 	rsb	r5, r4, #32
    1d70:	e1a03510 	lsl	r3, r0, r5
    1d74:	e1a00430 	lsr	r0, r0, r4
    1d78:	e1800511 	orr	r0, r0, r1, lsl r5
    1d7c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1d80:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1d84:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1d88:	e0a21431 	adc	r1, r2, r1, lsr r4
    1d8c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1d90:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1d94:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d98:	e12fff1e 	bx	lr
    1d9c:	e264400c 	rsb	r4, r4, #12
    1da0:	e2645020 	rsb	r5, r4, #32
    1da4:	e1a03410 	lsl	r3, r0, r4
    1da8:	e1a00530 	lsr	r0, r0, r5
    1dac:	e1800411 	orr	r0, r0, r1, lsl r4
    1db0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1db4:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1db8:	e2a11000 	adc	r1, r1, #0
    1dbc:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1dc0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1dc4:	e8bd4070 	pop	{r4, r5, r6, lr}
    1dc8:	e12fff1e 	bx	lr
    1dcc:	e2645020 	rsb	r5, r4, #32
    1dd0:	e18ee510 	orr	lr, lr, r0, lsl r5
    1dd4:	e1a03430 	lsr	r3, r0, r4
    1dd8:	e1833511 	orr	r3, r3, r1, lsl r5
    1ddc:	e1a00431 	lsr	r0, r1, r4
    1de0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1de4:	e1c00431 	bic	r0, r0, r1, lsr r4
    1de8:	e0800fa3 	add	r0, r0, r3, lsr #31
    1dec:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1df0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1df4:	e8bd4070 	pop	{r4, r5, r6, lr}
    1df8:	e12fff1e 	bx	lr
    1dfc:	e3340000 	teq	r4, #0
    1e00:	1a000008 	bne	1e28 <__aeabi_dmul+0x1d8>
    1e04:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1e08:	e1b00080 	lsls	r0, r0, #1
    1e0c:	e0a11001 	adc	r1, r1, r1
    1e10:	e3110601 	tst	r1, #1048576	; 0x100000
    1e14:	02444001 	subeq	r4, r4, #1
    1e18:	0afffffa 	beq	1e08 <__aeabi_dmul+0x1b8>
    1e1c:	e1811006 	orr	r1, r1, r6
    1e20:	e3350000 	teq	r5, #0
    1e24:	112fff1e 	bxne	lr
    1e28:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1e2c:	e1b02082 	lsls	r2, r2, #1
    1e30:	e0a33003 	adc	r3, r3, r3
    1e34:	e3130601 	tst	r3, #1048576	; 0x100000
    1e38:	02455001 	subeq	r5, r5, #1
    1e3c:	0afffffa 	beq	1e2c <__aeabi_dmul+0x1dc>
    1e40:	e1833006 	orr	r3, r3, r6
    1e44:	e12fff1e 	bx	lr
    1e48:	e134000c 	teq	r4, r12
    1e4c:	e00c5a23 	and	r5, r12, r3, lsr #20
    1e50:	1135000c 	teqne	r5, r12
    1e54:	0a000007 	beq	1e78 <__aeabi_dmul+0x228>
    1e58:	e1906081 	orrs	r6, r0, r1, lsl #1
    1e5c:	11926083 	orrsne	r6, r2, r3, lsl #1
    1e60:	1affffe5 	bne	1dfc <__aeabi_dmul+0x1ac>
    1e64:	e0211003 	eor	r1, r1, r3
    1e68:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1e6c:	e3a00000 	mov	r0, #0
    1e70:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e74:	e12fff1e 	bx	lr
    1e78:	e1906081 	orrs	r6, r0, r1, lsl #1
    1e7c:	01a00002 	moveq	r0, r2
    1e80:	01a01003 	moveq	r1, r3
    1e84:	11926083 	orrsne	r6, r2, r3, lsl #1
    1e88:	0a000010 	beq	1ed0 <__aeabi_dmul+0x280>
    1e8c:	e134000c 	teq	r4, r12
    1e90:	1a000001 	bne	1e9c <__aeabi_dmul+0x24c>
    1e94:	e1906601 	orrs	r6, r0, r1, lsl #12
    1e98:	1a00000c 	bne	1ed0 <__aeabi_dmul+0x280>
    1e9c:	e135000c 	teq	r5, r12
    1ea0:	1a000003 	bne	1eb4 <__aeabi_dmul+0x264>
    1ea4:	e1926603 	orrs	r6, r2, r3, lsl #12
    1ea8:	11a00002 	movne	r0, r2
    1eac:	11a01003 	movne	r1, r3
    1eb0:	1a000006 	bne	1ed0 <__aeabi_dmul+0x280>
    1eb4:	e0211003 	eor	r1, r1, r3
    1eb8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1ebc:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1ec0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1ec4:	e3a00000 	mov	r0, #0
    1ec8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ecc:	e12fff1e 	bx	lr
    1ed0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1ed4:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1ed8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1edc:	e12fff1e 	bx	lr

00001ee0 <__aeabi_ddiv>:
    1ee0:	e92d4070 	push	{r4, r5, r6, lr}
    1ee4:	e3a0c0ff 	mov	r12, #255	; 0xff
    1ee8:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1eec:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1ef0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1ef4:	1134000c 	teqne	r4, r12
    1ef8:	1135000c 	teqne	r5, r12
    1efc:	0b00005e 	bleq	207c <__aeabi_ddiv+0x19c>
    1f00:	e0444005 	sub	r4, r4, r5
    1f04:	e021e003 	eor	lr, r1, r3
    1f08:	e1925603 	orrs	r5, r2, r3, lsl #12
    1f0c:	e1a01601 	lsl	r1, r1, #12
    1f10:	0a00004c 	beq	2048 <__aeabi_ddiv+0x168>
    1f14:	e1a03603 	lsl	r3, r3, #12
    1f18:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1f1c:	e1853223 	orr	r3, r5, r3, lsr #4
    1f20:	e1833c22 	orr	r3, r3, r2, lsr #24
    1f24:	e1a02402 	lsl	r2, r2, #8
    1f28:	e1855221 	orr	r5, r5, r1, lsr #4
    1f2c:	e1855c20 	orr	r5, r5, r0, lsr #24
    1f30:	e1a06400 	lsl	r6, r0, #8
    1f34:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1f38:	e1550003 	cmp	r5, r3
    1f3c:	01560002 	cmpeq	r6, r2
    1f40:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1f44:	e2844c03 	add	r4, r4, #768	; 0x300
    1f48:	2a000001 	bcs	1f54 <__aeabi_ddiv+0x74>
    1f4c:	e1b030a3 	lsrs	r3, r3, #1
    1f50:	e1a02062 	rrx	r2, r2
    1f54:	e0566002 	subs	r6, r6, r2
    1f58:	e0c55003 	sbc	r5, r5, r3
    1f5c:	e1b030a3 	lsrs	r3, r3, #1
    1f60:	e1a02062 	rrx	r2, r2
    1f64:	e3a00601 	mov	r0, #1048576	; 0x100000
    1f68:	e3a0c702 	mov	r12, #524288	; 0x80000
    1f6c:	e056e002 	subs	lr, r6, r2
    1f70:	e0d5e003 	sbcs	lr, r5, r3
    1f74:	20466002 	subcs	r6, r6, r2
    1f78:	21a0500e 	movcs	r5, lr
    1f7c:	2180000c 	orrcs	r0, r0, r12
    1f80:	e1b030a3 	lsrs	r3, r3, #1
    1f84:	e1a02062 	rrx	r2, r2
    1f88:	e056e002 	subs	lr, r6, r2
    1f8c:	e0d5e003 	sbcs	lr, r5, r3
    1f90:	20466002 	subcs	r6, r6, r2
    1f94:	21a0500e 	movcs	r5, lr
    1f98:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1f9c:	e1b030a3 	lsrs	r3, r3, #1
    1fa0:	e1a02062 	rrx	r2, r2
    1fa4:	e056e002 	subs	lr, r6, r2
    1fa8:	e0d5e003 	sbcs	lr, r5, r3
    1fac:	20466002 	subcs	r6, r6, r2
    1fb0:	21a0500e 	movcs	r5, lr
    1fb4:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1fb8:	e1b030a3 	lsrs	r3, r3, #1
    1fbc:	e1a02062 	rrx	r2, r2
    1fc0:	e056e002 	subs	lr, r6, r2
    1fc4:	e0d5e003 	sbcs	lr, r5, r3
    1fc8:	20466002 	subcs	r6, r6, r2
    1fcc:	21a0500e 	movcs	r5, lr
    1fd0:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1fd4:	e195e006 	orrs	lr, r5, r6
    1fd8:	0a00000d 	beq	2014 <__aeabi_ddiv+0x134>
    1fdc:	e1a05205 	lsl	r5, r5, #4
    1fe0:	e1855e26 	orr	r5, r5, r6, lsr #28
    1fe4:	e1a06206 	lsl	r6, r6, #4
    1fe8:	e1a03183 	lsl	r3, r3, #3
    1fec:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1ff0:	e1a02182 	lsl	r2, r2, #3
    1ff4:	e1b0c22c 	lsrs	r12, r12, #4
    1ff8:	1affffdb 	bne	1f6c <__aeabi_ddiv+0x8c>
    1ffc:	e3110601 	tst	r1, #1048576	; 0x100000
    2000:	1a000006 	bne	2020 <__aeabi_ddiv+0x140>
    2004:	e1811000 	orr	r1, r1, r0
    2008:	e3a00000 	mov	r0, #0
    200c:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2010:	eaffffd5 	b	1f6c <__aeabi_ddiv+0x8c>
    2014:	e3110601 	tst	r1, #1048576	; 0x100000
    2018:	01811000 	orreq	r1, r1, r0
    201c:	03a00000 	moveq	r0, #0
    2020:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2024:	835c0c07 	cmphi	r12, #1792	; 0x700
    2028:	8affff43 	bhi	1d3c <__aeabi_dmul+0xec>
    202c:	e055c003 	subs	r12, r5, r3
    2030:	0056c002 	subseq	r12, r6, r2
    2034:	01b0c0a0 	lsrseq	r12, r0, #1
    2038:	e2b00000 	adcs	r0, r0, #0
    203c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2040:	e8bd4070 	pop	{r4, r5, r6, lr}
    2044:	e12fff1e 	bx	lr
    2048:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    204c:	e18e1621 	orr	r1, lr, r1, lsr #12
    2050:	e09440ac 	adds	r4, r4, r12, lsr #1
    2054:	c074500c 	rsbsgt	r5, r4, r12
    2058:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    205c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2060:	c12fff1e 	bxgt	lr
    2064:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2068:	e3a0e000 	mov	lr, #0
    206c:	e2544001 	subs	r4, r4, #1
    2070:	eaffff31 	b	1d3c <__aeabi_dmul+0xec>
    2074:	e185e006 	orr	lr, r5, r6
    2078:	eaffff2f 	b	1d3c <__aeabi_dmul+0xec>
    207c:	e00c5a23 	and	r5, r12, r3, lsr #20
    2080:	e134000c 	teq	r4, r12
    2084:	0135000c 	teqeq	r5, r12
    2088:	0affff90 	beq	1ed0 <__aeabi_dmul+0x280>
    208c:	e134000c 	teq	r4, r12
    2090:	1a000006 	bne	20b0 <__aeabi_ddiv+0x1d0>
    2094:	e1904601 	orrs	r4, r0, r1, lsl #12
    2098:	1affff8c 	bne	1ed0 <__aeabi_dmul+0x280>
    209c:	e135000c 	teq	r5, r12
    20a0:	1affff83 	bne	1eb4 <__aeabi_dmul+0x264>
    20a4:	e1a00002 	mov	r0, r2
    20a8:	e1a01003 	mov	r1, r3
    20ac:	eaffff87 	b	1ed0 <__aeabi_dmul+0x280>
    20b0:	e135000c 	teq	r5, r12
    20b4:	1a000004 	bne	20cc <__aeabi_ddiv+0x1ec>
    20b8:	e1925603 	orrs	r5, r2, r3, lsl #12
    20bc:	0affff68 	beq	1e64 <__aeabi_dmul+0x214>
    20c0:	e1a00002 	mov	r0, r2
    20c4:	e1a01003 	mov	r1, r3
    20c8:	eaffff80 	b	1ed0 <__aeabi_dmul+0x280>
    20cc:	e1906081 	orrs	r6, r0, r1, lsl #1
    20d0:	11926083 	orrsne	r6, r2, r3, lsl #1
    20d4:	1affff48 	bne	1dfc <__aeabi_dmul+0x1ac>
    20d8:	e1904081 	orrs	r4, r0, r1, lsl #1
    20dc:	1affff74 	bne	1eb4 <__aeabi_dmul+0x264>
    20e0:	e1925083 	orrs	r5, r2, r3, lsl #1
    20e4:	1affff5e 	bne	1e64 <__aeabi_dmul+0x214>
    20e8:	eaffff78 	b	1ed0 <__aeabi_dmul+0x280>

000020ec <__aeabi_d2iz>:
    20ec:	e1a02081 	lsl	r2, r1, #1
    20f0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    20f4:	2a00000c 	bcs	212c <__aeabi_d2iz+0x40>
    20f8:	5a000009 	bpl	2124 <__aeabi_d2iz+0x38>
    20fc:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2100:	e0532ac2 	subs	r2, r3, r2, asr #21
    2104:	9a00000a 	bls	2134 <__aeabi_d2iz+0x48>
    2108:	e1a03581 	lsl	r3, r1, #11
    210c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2110:	e1833aa0 	orr	r3, r3, r0, lsr #21
    2114:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2118:	e1a00233 	lsr	r0, r3, r2
    211c:	12600000 	rsbne	r0, r0, #0
    2120:	e12fff1e 	bx	lr
    2124:	e3a00000 	mov	r0, #0
    2128:	e12fff1e 	bx	lr
    212c:	e1900601 	orrs	r0, r0, r1, lsl #12
    2130:	1a000002 	bne	2140 <__aeabi_d2iz+0x54>
    2134:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2138:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    213c:	e12fff1e 	bx	lr
    2140:	e3a00000 	mov	r0, #0
    2144:	e12fff1e 	bx	lr

00002148 <__aeabi_frsub>:
    2148:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    214c:	ea000000 	b	2154 <__addsf3>

00002150 <__aeabi_fsub>:
    2150:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00002154 <__addsf3>:
    2154:	e1b02080 	lsls	r2, r0, #1
    2158:	11b03081 	lslsne	r3, r1, #1
    215c:	11320003 	teqne	r2, r3
    2160:	11f0cc42 	mvnsne	r12, r2, asr #24
    2164:	11f0cc43 	mvnsne	r12, r3, asr #24
    2168:	0a000047 	beq	228c <__addsf3+0x138>
    216c:	e1a02c22 	lsr	r2, r2, #24
    2170:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    2174:	c0822003 	addgt	r2, r2, r3
    2178:	c0201001 	eorgt	r1, r0, r1
    217c:	c0210000 	eorgt	r0, r1, r0
    2180:	c0201001 	eorgt	r1, r0, r1
    2184:	b2633000 	rsblt	r3, r3, #0
    2188:	e3530019 	cmp	r3, #25
    218c:	812fff1e 	bxhi	lr
    2190:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2194:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2198:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    219c:	12600000 	rsbne	r0, r0, #0
    21a0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    21a4:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    21a8:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    21ac:	12611000 	rsbne	r1, r1, #0
    21b0:	e1320003 	teq	r2, r3
    21b4:	0a00002e 	beq	2274 <__addsf3+0x120>
    21b8:	e2422001 	sub	r2, r2, #1
    21bc:	e0900351 	adds	r0, r0, r1, asr r3
    21c0:	e2633020 	rsb	r3, r3, #32
    21c4:	e1a01311 	lsl	r1, r1, r3
    21c8:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    21cc:	5a000001 	bpl	21d8 <__addsf3+0x84>
    21d0:	e2711000 	rsbs	r1, r1, #0
    21d4:	e2e00000 	rsc	r0, r0, #0
    21d8:	e3500502 	cmp	r0, #8388608	; 0x800000
    21dc:	3a00000b 	bcc	2210 <__addsf3+0xbc>
    21e0:	e3500401 	cmp	r0, #16777216	; 0x1000000
    21e4:	3a000004 	bcc	21fc <__addsf3+0xa8>
    21e8:	e1b000a0 	lsrs	r0, r0, #1
    21ec:	e1a01061 	rrx	r1, r1
    21f0:	e2822001 	add	r2, r2, #1
    21f4:	e35200fe 	cmp	r2, #254	; 0xfe
    21f8:	2a000038 	bcs	22e0 <__addsf3+0x18c>
    21fc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2200:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2204:	03c00001 	biceq	r0, r0, #1
    2208:	e1800003 	orr	r0, r0, r3
    220c:	e12fff1e 	bx	lr
    2210:	e1b01081 	lsls	r1, r1, #1
    2214:	e0a00000 	adc	r0, r0, r0
    2218:	e3100502 	tst	r0, #8388608	; 0x800000
    221c:	e2422001 	sub	r2, r2, #1
    2220:	1afffff5 	bne	21fc <__addsf3+0xa8>
    2224:	e1b0c620 	lsrs	r12, r0, #12
    2228:	01a00600 	lsleq	r0, r0, #12
    222c:	0242200c 	subeq	r2, r2, #12
    2230:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2234:	01a00400 	lsleq	r0, r0, #8
    2238:	02422008 	subeq	r2, r2, #8
    223c:	e310060f 	tst	r0, #15728640	; 0xf00000
    2240:	01a00200 	lsleq	r0, r0, #4
    2244:	02422004 	subeq	r2, r2, #4
    2248:	e3100503 	tst	r0, #12582912	; 0xc00000
    224c:	01a00100 	lsleq	r0, r0, #2
    2250:	02422002 	subeq	r2, r2, #2
    2254:	e3500502 	cmp	r0, #8388608	; 0x800000
    2258:	31a00080 	lslcc	r0, r0, #1
    225c:	e2d22000 	sbcs	r2, r2, #0
    2260:	a0800b82 	addge	r0, r0, r2, lsl #23
    2264:	b2622000 	rsblt	r2, r2, #0
    2268:	a1800003 	orrge	r0, r0, r3
    226c:	b1830230 	orrlt	r0, r3, r0, lsr r2
    2270:	e12fff1e 	bx	lr
    2274:	e3320000 	teq	r2, #0
    2278:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    227c:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    2280:	02822001 	addeq	r2, r2, #1
    2284:	12433001 	subne	r3, r3, #1
    2288:	eaffffca 	b	21b8 <__addsf3+0x64>
    228c:	e1a03081 	lsl	r3, r1, #1
    2290:	e1f0cc42 	mvns	r12, r2, asr #24
    2294:	11f0cc43 	mvnsne	r12, r3, asr #24
    2298:	0a000013 	beq	22ec <__addsf3+0x198>
    229c:	e1320003 	teq	r2, r3
    22a0:	0a000002 	beq	22b0 <__addsf3+0x15c>
    22a4:	e3320000 	teq	r2, #0
    22a8:	01a00001 	moveq	r0, r1
    22ac:	e12fff1e 	bx	lr
    22b0:	e1300001 	teq	r0, r1
    22b4:	13a00000 	movne	r0, #0
    22b8:	112fff1e 	bxne	lr
    22bc:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    22c0:	1a000002 	bne	22d0 <__addsf3+0x17c>
    22c4:	e1b00080 	lsls	r0, r0, #1
    22c8:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    22cc:	e12fff1e 	bx	lr
    22d0:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    22d4:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    22d8:	312fff1e 	bxcc	lr
    22dc:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    22e0:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    22e4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    22e8:	e12fff1e 	bx	lr
    22ec:	e1f02c42 	mvns	r2, r2, asr #24
    22f0:	11a00001 	movne	r0, r1
    22f4:	01f03c43 	mvnseq	r3, r3, asr #24
    22f8:	11a01000 	movne	r1, r0
    22fc:	e1b02480 	lsls	r2, r0, #9
    2300:	01b03481 	lslseq	r3, r1, #9
    2304:	01300001 	teqeq	r0, r1
    2308:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    230c:	e12fff1e 	bx	lr

00002310 <__aeabi_ui2f>:
    2310:	e3a03000 	mov	r3, #0
    2314:	ea000001 	b	2320 <__aeabi_i2f+0x8>

00002318 <__aeabi_i2f>:
    2318:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    231c:	42600000 	rsbmi	r0, r0, #0
    2320:	e1b0c000 	movs	r12, r0
    2324:	012fff1e 	bxeq	lr
    2328:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    232c:	e1a01000 	mov	r1, r0
    2330:	e3a00000 	mov	r0, #0
    2334:	ea00000f 	b	2378 <__aeabi_l2f+0x30>

00002338 <__aeabi_ul2f>:
    2338:	e1902001 	orrs	r2, r0, r1
    233c:	012fff1e 	bxeq	lr
    2340:	e3a03000 	mov	r3, #0
    2344:	ea000005 	b	2360 <__aeabi_l2f+0x18>

00002348 <__aeabi_l2f>:
    2348:	e1902001 	orrs	r2, r0, r1
    234c:	012fff1e 	bxeq	lr
    2350:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    2354:	5a000001 	bpl	2360 <__aeabi_l2f+0x18>
    2358:	e2700000 	rsbs	r0, r0, #0
    235c:	e2e11000 	rsc	r1, r1, #0
    2360:	e1b0c001 	movs	r12, r1
    2364:	01a0c000 	moveq	r12, r0
    2368:	01a01000 	moveq	r1, r0
    236c:	03a00000 	moveq	r0, #0
    2370:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    2374:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    2378:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    237c:	e3a02017 	mov	r2, #23
    2380:	e35c0801 	cmp	r12, #65536	; 0x10000
    2384:	21a0c82c 	lsrcs	r12, r12, #16
    2388:	22422010 	subcs	r2, r2, #16
    238c:	e35c0c01 	cmp	r12, #256	; 0x100
    2390:	21a0c42c 	lsrcs	r12, r12, #8
    2394:	22422008 	subcs	r2, r2, #8
    2398:	e35c0010 	cmp	r12, #16
    239c:	21a0c22c 	lsrcs	r12, r12, #4
    23a0:	22422004 	subcs	r2, r2, #4
    23a4:	e35c0004 	cmp	r12, #4
    23a8:	22422002 	subcs	r2, r2, #2
    23ac:	304220ac 	subcc	r2, r2, r12, lsr #1
    23b0:	e05221ac 	subs	r2, r2, r12, lsr #3
    23b4:	e0433b82 	sub	r3, r3, r2, lsl #23
    23b8:	ba000006 	blt	23d8 <__aeabi_l2f+0x90>
    23bc:	e0833211 	add	r3, r3, r1, lsl r2
    23c0:	e1a0c210 	lsl	r12, r0, r2
    23c4:	e2622020 	rsb	r2, r2, #32
    23c8:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    23cc:	e0a30230 	adc	r0, r3, r0, lsr r2
    23d0:	03c00001 	biceq	r0, r0, #1
    23d4:	e12fff1e 	bx	lr
    23d8:	e2822020 	add	r2, r2, #32
    23dc:	e1a0c211 	lsl	r12, r1, r2
    23e0:	e2622020 	rsb	r2, r2, #32
    23e4:	e190008c 	orrs	r0, r0, r12, lsl #1
    23e8:	e0a30231 	adc	r0, r3, r1, lsr r2
    23ec:	01c00fac 	biceq	r0, r0, r12, lsr #31
    23f0:	e12fff1e 	bx	lr

000023f4 <__aeabi_fmul>:
    23f4:	e3a0c0ff 	mov	r12, #255	; 0xff
    23f8:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    23fc:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2400:	1132000c 	teqne	r2, r12
    2404:	1133000c 	teqne	r3, r12
    2408:	0a00003e 	beq	2508 <__aeabi_fmul+0x114>
    240c:	e0822003 	add	r2, r2, r3
    2410:	e020c001 	eor	r12, r0, r1
    2414:	e1b00480 	lsls	r0, r0, #9
    2418:	11b01481 	lslsne	r1, r1, #9
    241c:	0a000010 	beq	2464 <__aeabi_fmul+0x70>
    2420:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2424:	e18302a0 	orr	r0, r3, r0, lsr #5
    2428:	e18312a1 	orr	r1, r3, r1, lsr #5
    242c:	e0813190 	umull	r3, r1, r0, r1
    2430:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2434:	e3510502 	cmp	r1, #8388608	; 0x800000
    2438:	31a01081 	lslcc	r1, r1, #1
    243c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2440:	31a03083 	lslcc	r3, r3, #1
    2444:	e1800001 	orr	r0, r0, r1
    2448:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    244c:	e35200fd 	cmp	r2, #253	; 0xfd
    2450:	8a00000f 	bhi	2494 <__aeabi_fmul+0xa0>
    2454:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2458:	e0a00b82 	adc	r0, r0, r2, lsl #23
    245c:	03c00001 	biceq	r0, r0, #1
    2460:	e12fff1e 	bx	lr
    2464:	e3300000 	teq	r0, #0
    2468:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    246c:	01a01481 	lsleq	r1, r1, #9
    2470:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2474:	e18004a1 	orr	r0, r0, r1, lsr #9
    2478:	e252207f 	subs	r2, r2, #127	; 0x7f
    247c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2480:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2484:	c12fff1e 	bxgt	lr
    2488:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    248c:	e3a03000 	mov	r3, #0
    2490:	e2522001 	subs	r2, r2, #1
    2494:	ca000035 	bgt	2570 <__aeabi_fmul+0x17c>
    2498:	e3720019 	cmn	r2, #25
    249c:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    24a0:	d12fff1e 	bxle	lr
    24a4:	e2622000 	rsb	r2, r2, #0
    24a8:	e1b01080 	lsls	r1, r0, #1
    24ac:	e1a01231 	lsr	r1, r1, r2
    24b0:	e2622020 	rsb	r2, r2, #32
    24b4:	e1a0c210 	lsl	r12, r0, r2
    24b8:	e1b00061 	rrxs	r0, r1
    24bc:	e2a00000 	adc	r0, r0, #0
    24c0:	e193308c 	orrs	r3, r3, r12, lsl #1
    24c4:	01c00fac 	biceq	r0, r0, r12, lsr #31
    24c8:	e12fff1e 	bx	lr
    24cc:	e3320000 	teq	r2, #0
    24d0:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    24d4:	01a00080 	lsleq	r0, r0, #1
    24d8:	03100502 	tsteq	r0, #8388608	; 0x800000
    24dc:	02422001 	subeq	r2, r2, #1
    24e0:	0afffffb 	beq	24d4 <__aeabi_fmul+0xe0>
    24e4:	e180000c 	orr	r0, r0, r12
    24e8:	e3330000 	teq	r3, #0
    24ec:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    24f0:	01a01081 	lsleq	r1, r1, #1
    24f4:	03110502 	tsteq	r1, #8388608	; 0x800000
    24f8:	02433001 	subeq	r3, r3, #1
    24fc:	0afffffb 	beq	24f0 <__aeabi_fmul+0xfc>
    2500:	e181100c 	orr	r1, r1, r12
    2504:	eaffffc0 	b	240c <__aeabi_fmul+0x18>
    2508:	e00c3ba1 	and	r3, r12, r1, lsr #23
    250c:	e132000c 	teq	r2, r12
    2510:	1133000c 	teqne	r3, r12
    2514:	0a000005 	beq	2530 <__aeabi_fmul+0x13c>
    2518:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    251c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2520:	1affffe9 	bne	24cc <__aeabi_fmul+0xd8>
    2524:	e0200001 	eor	r0, r0, r1
    2528:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    252c:	e12fff1e 	bx	lr
    2530:	e3300000 	teq	r0, #0
    2534:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2538:	01a00001 	moveq	r0, r1
    253c:	13310000 	teqne	r1, #0
    2540:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    2544:	0a00000d 	beq	2580 <__aeabi_fmul+0x18c>
    2548:	e132000c 	teq	r2, r12
    254c:	1a000001 	bne	2558 <__aeabi_fmul+0x164>
    2550:	e1b02480 	lsls	r2, r0, #9
    2554:	1a000009 	bne	2580 <__aeabi_fmul+0x18c>
    2558:	e133000c 	teq	r3, r12
    255c:	1a000002 	bne	256c <__aeabi_fmul+0x178>
    2560:	e1b03481 	lsls	r3, r1, #9
    2564:	11a00001 	movne	r0, r1
    2568:	1a000004 	bne	2580 <__aeabi_fmul+0x18c>
    256c:	e0200001 	eor	r0, r0, r1
    2570:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2574:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2578:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    257c:	e12fff1e 	bx	lr
    2580:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2584:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    2588:	e12fff1e 	bx	lr

0000258c <__aeabi_fdiv>:
    258c:	e3a0c0ff 	mov	r12, #255	; 0xff
    2590:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2594:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2598:	1132000c 	teqne	r2, r12
    259c:	1133000c 	teqne	r3, r12
    25a0:	0a00003a 	beq	2690 <__aeabi_fdiv+0x104>
    25a4:	e0422003 	sub	r2, r2, r3
    25a8:	e020c001 	eor	r12, r0, r1
    25ac:	e1b01481 	lsls	r1, r1, #9
    25b0:	e1a00480 	lsl	r0, r0, #9
    25b4:	0a00001c 	beq	262c <__aeabi_fdiv+0xa0>
    25b8:	e3a03201 	mov	r3, #268435456	; 0x10000000
    25bc:	e1831221 	orr	r1, r3, r1, lsr #4
    25c0:	e1833220 	orr	r3, r3, r0, lsr #4
    25c4:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    25c8:	e1530001 	cmp	r3, r1
    25cc:	31a03083 	lslcc	r3, r3, #1
    25d0:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    25d4:	e3a0c502 	mov	r12, #8388608	; 0x800000
    25d8:	e1530001 	cmp	r3, r1
    25dc:	20433001 	subcs	r3, r3, r1
    25e0:	2180000c 	orrcs	r0, r0, r12
    25e4:	e15300a1 	cmp	r3, r1, lsr #1
    25e8:	204330a1 	subcs	r3, r3, r1, lsr #1
    25ec:	218000ac 	orrcs	r0, r0, r12, lsr #1
    25f0:	e1530121 	cmp	r3, r1, lsr #2
    25f4:	20433121 	subcs	r3, r3, r1, lsr #2
    25f8:	2180012c 	orrcs	r0, r0, r12, lsr #2
    25fc:	e15301a1 	cmp	r3, r1, lsr #3
    2600:	204331a1 	subcs	r3, r3, r1, lsr #3
    2604:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2608:	e1b03203 	lsls	r3, r3, #4
    260c:	11b0c22c 	lsrsne	r12, r12, #4
    2610:	1afffff0 	bne	25d8 <__aeabi_fdiv+0x4c>
    2614:	e35200fd 	cmp	r2, #253	; 0xfd
    2618:	8affff9d 	bhi	2494 <__aeabi_fmul+0xa0>
    261c:	e1530001 	cmp	r3, r1
    2620:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2624:	03c00001 	biceq	r0, r0, #1
    2628:	e12fff1e 	bx	lr
    262c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2630:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2634:	e292207f 	adds	r2, r2, #127	; 0x7f
    2638:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    263c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2640:	c12fff1e 	bxgt	lr
    2644:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2648:	e3a03000 	mov	r3, #0
    264c:	e2522001 	subs	r2, r2, #1
    2650:	eaffff8f 	b	2494 <__aeabi_fmul+0xa0>
    2654:	e3320000 	teq	r2, #0
    2658:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    265c:	01a00080 	lsleq	r0, r0, #1
    2660:	03100502 	tsteq	r0, #8388608	; 0x800000
    2664:	02422001 	subeq	r2, r2, #1
    2668:	0afffffb 	beq	265c <__aeabi_fdiv+0xd0>
    266c:	e180000c 	orr	r0, r0, r12
    2670:	e3330000 	teq	r3, #0
    2674:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2678:	01a01081 	lsleq	r1, r1, #1
    267c:	03110502 	tsteq	r1, #8388608	; 0x800000
    2680:	02433001 	subeq	r3, r3, #1
    2684:	0afffffb 	beq	2678 <__aeabi_fdiv+0xec>
    2688:	e181100c 	orr	r1, r1, r12
    268c:	eaffffc4 	b	25a4 <__aeabi_fdiv+0x18>
    2690:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2694:	e132000c 	teq	r2, r12
    2698:	1a000005 	bne	26b4 <__aeabi_fdiv+0x128>
    269c:	e1b02480 	lsls	r2, r0, #9
    26a0:	1affffb6 	bne	2580 <__aeabi_fmul+0x18c>
    26a4:	e133000c 	teq	r3, r12
    26a8:	1affffaf 	bne	256c <__aeabi_fmul+0x178>
    26ac:	e1a00001 	mov	r0, r1
    26b0:	eaffffb2 	b	2580 <__aeabi_fmul+0x18c>
    26b4:	e133000c 	teq	r3, r12
    26b8:	1a000003 	bne	26cc <__aeabi_fdiv+0x140>
    26bc:	e1b03481 	lsls	r3, r1, #9
    26c0:	0affff97 	beq	2524 <__aeabi_fmul+0x130>
    26c4:	e1a00001 	mov	r0, r1
    26c8:	eaffffac 	b	2580 <__aeabi_fmul+0x18c>
    26cc:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    26d0:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    26d4:	1affffde 	bne	2654 <__aeabi_fdiv+0xc8>
    26d8:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    26dc:	1affffa2 	bne	256c <__aeabi_fmul+0x178>
    26e0:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    26e4:	1affff8e 	bne	2524 <__aeabi_fmul+0x130>
    26e8:	eaffffa4 	b	2580 <__aeabi_fmul+0x18c>

000026ec <__aeabi_f2iz>:
    26ec:	e1a02080 	lsl	r2, r0, #1
    26f0:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    26f4:	3a000008 	bcc	271c <__aeabi_f2iz+0x30>
    26f8:	e3a0309e 	mov	r3, #158	; 0x9e
    26fc:	e0532c22 	subs	r2, r3, r2, lsr #24
    2700:	9a000007 	bls	2724 <__aeabi_f2iz+0x38>
    2704:	e1a03400 	lsl	r3, r0, #8
    2708:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    270c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2710:	e1a00233 	lsr	r0, r3, r2
    2714:	12600000 	rsbne	r0, r0, #0
    2718:	e12fff1e 	bx	lr
    271c:	e3a00000 	mov	r0, #0
    2720:	e12fff1e 	bx	lr
    2724:	e3720061 	cmn	r2, #97	; 0x61
    2728:	1a000001 	bne	2734 <__aeabi_f2iz+0x48>
    272c:	e1b02480 	lsls	r2, r0, #9
    2730:	1a000002 	bne	2740 <__aeabi_f2iz+0x54>
    2734:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2738:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    273c:	e12fff1e 	bx	lr
    2740:	e3a00000 	mov	r0, #0
    2744:	e12fff1e 	bx	lr

00002748 <atexit>:
    2748:	e1a01000 	mov	r1, r0
    274c:	e3a00000 	mov	r0, #0
    2750:	e92d4008 	push	{r3, lr}
    2754:	e1a02000 	mov	r2, r0
    2758:	e1a03000 	mov	r3, r0
    275c:	eb00000e 	bl	279c <__register_exitproc>
    2760:	e8bd4008 	pop	{r3, lr}
    2764:	e12fff1e 	bx	lr

00002768 <exit>:
    2768:	e92d4008 	push	{r3, lr}
    276c:	e3a01000 	mov	r1, #0
    2770:	e1a04000 	mov	r4, r0
    2774:	eb000045 	bl	2890 <__call_exitprocs>
    2778:	e59f3018 	ldr	r3, [pc, #24]	; 2798 <exit+0x30>
    277c:	e5930000 	ldr	r0, [r3]
    2780:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2784:	e3530000 	cmp	r3, #0
    2788:	11a0e00f 	movne	lr, pc
    278c:	112fff13 	bxne	r3
    2790:	e1a00004 	mov	r0, r4
    2794:	eb0000c9 	bl	2ac0 <_exit>
    2798:	00002b68 	.word	0x00002b68

0000279c <__register_exitproc>:
    279c:	e59fc0e4 	ldr	r12, [pc, #228]	; 2888 <__register_exitproc+0xec>
    27a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    27a4:	e59c4000 	ldr	r4, [r12]
    27a8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    27ac:	e35c0000 	cmp	r12, #0
    27b0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    27b4:	e59c5004 	ldr	r5, [r12, #4]
    27b8:	0584c148 	streq	r12, [r4, #328]	; 0x148
    27bc:	e355001f 	cmp	r5, #31
    27c0:	e24dd010 	sub	sp, sp, #16
    27c4:	e1a06000 	mov	r6, r0
    27c8:	da000015 	ble	2824 <__register_exitproc+0x88>
    27cc:	e59f00b8 	ldr	r0, [pc, #184]	; 288c <__register_exitproc+0xf0>
    27d0:	e3500000 	cmp	r0, #0
    27d4:	1a000001 	bne	27e0 <__register_exitproc+0x44>
    27d8:	e3e00000 	mvn	r0, #0
    27dc:	ea000018 	b	2844 <__register_exitproc+0xa8>
    27e0:	e3a00e19 	mov	r0, #400	; 0x190
    27e4:	e58d100c 	str	r1, [sp, #12]
    27e8:	e58d2008 	str	r2, [sp, #8]
    27ec:	e58d3004 	str	r3, [sp, #4]
    27f0:	e320f000 	nop	{0}
    27f4:	e250c000 	subs	r12, r0, #0
    27f8:	e59d100c 	ldr	r1, [sp, #12]
    27fc:	e59d2008 	ldr	r2, [sp, #8]
    2800:	e59d3004 	ldr	r3, [sp, #4]
    2804:	0afffff3 	beq	27d8 <__register_exitproc+0x3c>
    2808:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    280c:	e3a00000 	mov	r0, #0
    2810:	e58c0004 	str	r0, [r12, #4]
    2814:	e58c5000 	str	r5, [r12]
    2818:	e584c148 	str	r12, [r4, #328]	; 0x148
    281c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2820:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2824:	e3560000 	cmp	r6, #0
    2828:	e59c4004 	ldr	r4, [r12, #4]
    282c:	1a000007 	bne	2850 <__register_exitproc+0xb4>
    2830:	e2843002 	add	r3, r4, #2
    2834:	e2844001 	add	r4, r4, #1
    2838:	e78c1103 	str	r1, [r12, r3, lsl #2]
    283c:	e58c4004 	str	r4, [r12, #4]
    2840:	e3a00000 	mov	r0, #0
    2844:	e28dd010 	add	sp, sp, #16
    2848:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    284c:	e12fff1e 	bx	lr
    2850:	e3a00001 	mov	r0, #1
    2854:	e1a00410 	lsl	r0, r0, r4
    2858:	e08c8104 	add	r8, r12, r4, lsl #2
    285c:	e3560002 	cmp	r6, #2
    2860:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2864:	e5883108 	str	r3, [r8, #264]	; 0x108
    2868:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    286c:	e1877000 	orr	r7, r7, r0
    2870:	01830000 	orreq	r0, r3, r0
    2874:	e1a05008 	mov	r5, r8
    2878:	e5882088 	str	r2, [r8, #136]	; 0x88
    287c:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2880:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2884:	eaffffe9 	b	2830 <__register_exitproc+0x94>
    2888:	00002b68 	.word	0x00002b68
    288c:	00000000 	.word	0x00000000

00002890 <__call_exitprocs>:
    2890:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2894:	e59f3168 	ldr	r3, [pc, #360]	; 2a04 <__call_exitprocs+0x174>
    2898:	e5933000 	ldr	r3, [r3]
    289c:	e24dd014 	sub	sp, sp, #20
    28a0:	e58d3004 	str	r3, [sp, #4]
    28a4:	e2833f52 	add	r3, r3, #328	; 0x148
    28a8:	e58d0008 	str	r0, [sp, #8]
    28ac:	e58d300c 	str	r3, [sp, #12]
    28b0:	e1a07001 	mov	r7, r1
    28b4:	e3a08001 	mov	r8, #1
    28b8:	e59d3004 	ldr	r3, [sp, #4]
    28bc:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    28c0:	e3560000 	cmp	r6, #0
    28c4:	e59db00c 	ldr	r11, [sp, #12]
    28c8:	0a000033 	beq	299c <__call_exitprocs+0x10c>
    28cc:	e5965004 	ldr	r5, [r6, #4]
    28d0:	e2554001 	subs	r4, r5, #1
    28d4:	5286a088 	addpl	r10, r6, #136	; 0x88
    28d8:	5285501f 	addpl	r5, r5, #31
    28dc:	508a5105 	addpl	r5, r10, r5, lsl #2
    28e0:	5a000007 	bpl	2904 <__call_exitprocs+0x74>
    28e4:	ea000029 	b	2990 <__call_exitprocs+0x100>
    28e8:	e5953000 	ldr	r3, [r5]
    28ec:	e1530007 	cmp	r3, r7
    28f0:	0a000005 	beq	290c <__call_exitprocs+0x7c>
    28f4:	e2444001 	sub	r4, r4, #1
    28f8:	e3740001 	cmn	r4, #1
    28fc:	e2455004 	sub	r5, r5, #4
    2900:	0a000022 	beq	2990 <__call_exitprocs+0x100>
    2904:	e3570000 	cmp	r7, #0
    2908:	1afffff6 	bne	28e8 <__call_exitprocs+0x58>
    290c:	e5963004 	ldr	r3, [r6, #4]
    2910:	e06a2005 	rsb	r2, r10, r5
    2914:	e2433001 	sub	r3, r3, #1
    2918:	e0862002 	add	r2, r6, r2
    291c:	e1530004 	cmp	r3, r4
    2920:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2924:	13a01000 	movne	r1, #0
    2928:	05864004 	streq	r4, [r6, #4]
    292c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2930:	e3530000 	cmp	r3, #0
    2934:	0affffee 	beq	28f4 <__call_exitprocs+0x64>
    2938:	e1a02418 	lsl	r2, r8, r4
    293c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2940:	e1120001 	tst	r2, r1
    2944:	e5969004 	ldr	r9, [r6, #4]
    2948:	0a000016 	beq	29a8 <__call_exitprocs+0x118>
    294c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2950:	e1120001 	tst	r2, r1
    2954:	1a000016 	bne	29b4 <__call_exitprocs+0x124>
    2958:	e59d0008 	ldr	r0, [sp, #8]
    295c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2960:	e1a0e00f 	mov	lr, pc
    2964:	e12fff13 	bx	r3
    2968:	e5963004 	ldr	r3, [r6, #4]
    296c:	e1530009 	cmp	r3, r9
    2970:	1affffd0 	bne	28b8 <__call_exitprocs+0x28>
    2974:	e59b3000 	ldr	r3, [r11]
    2978:	e1530006 	cmp	r3, r6
    297c:	1affffcd 	bne	28b8 <__call_exitprocs+0x28>
    2980:	e2444001 	sub	r4, r4, #1
    2984:	e3740001 	cmn	r4, #1
    2988:	e2455004 	sub	r5, r5, #4
    298c:	1affffdc 	bne	2904 <__call_exitprocs+0x74>
    2990:	e59f1070 	ldr	r1, [pc, #112]	; 2a08 <__call_exitprocs+0x178>
    2994:	e3510000 	cmp	r1, #0
    2998:	1a000009 	bne	29c4 <__call_exitprocs+0x134>
    299c:	e28dd014 	add	sp, sp, #20
    29a0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    29a4:	e12fff1e 	bx	lr
    29a8:	e1a0e00f 	mov	lr, pc
    29ac:	e12fff13 	bx	r3
    29b0:	eaffffec 	b	2968 <__call_exitprocs+0xd8>
    29b4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    29b8:	e1a0e00f 	mov	lr, pc
    29bc:	e12fff13 	bx	r3
    29c0:	eaffffe8 	b	2968 <__call_exitprocs+0xd8>
    29c4:	e5963004 	ldr	r3, [r6, #4]
    29c8:	e3530000 	cmp	r3, #0
    29cc:	e5963000 	ldr	r3, [r6]
    29d0:	1a000008 	bne	29f8 <__call_exitprocs+0x168>
    29d4:	e3530000 	cmp	r3, #0
    29d8:	0a000006 	beq	29f8 <__call_exitprocs+0x168>
    29dc:	e1a00006 	mov	r0, r6
    29e0:	e58b3000 	str	r3, [r11]
    29e4:	e320f000 	nop	{0}
    29e8:	e59b6000 	ldr	r6, [r11]
    29ec:	e3560000 	cmp	r6, #0
    29f0:	1affffb5 	bne	28cc <__call_exitprocs+0x3c>
    29f4:	eaffffe8 	b	299c <__call_exitprocs+0x10c>
    29f8:	e1a0b006 	mov	r11, r6
    29fc:	e1a06003 	mov	r6, r3
    2a00:	eafffff9 	b	29ec <__call_exitprocs+0x15c>
    2a04:	00002b68 	.word	0x00002b68
    2a08:	00000000 	.word	0x00000000

00002a0c <register_fini>:
    2a0c:	e92d4008 	push	{r3, lr}
    2a10:	e59f3010 	ldr	r3, [pc, #16]	; 2a28 <register_fini+0x1c>
    2a14:	e3530000 	cmp	r3, #0
    2a18:	159f000c 	ldrne	r0, [pc, #12]	; 2a2c <register_fini+0x20>
    2a1c:	1bffff49 	blne	2748 <atexit>
    2a20:	e8bd4008 	pop	{r3, lr}
    2a24:	e12fff1e 	bx	lr
    2a28:	00002b90 	.word	0x00002b90
    2a2c:	00002a30 	.word	0x00002a30

00002a30 <__libc_fini_array>:
    2a30:	e92d4038 	push	{r3, r4, r5, lr}
    2a34:	e59f5030 	ldr	r5, [pc, #48]	; 2a6c <__libc_fini_array+0x3c>
    2a38:	e59f4030 	ldr	r4, [pc, #48]	; 2a70 <__libc_fini_array+0x40>
    2a3c:	e0654004 	rsb	r4, r5, r4
    2a40:	e1b04144 	asrs	r4, r4, #2
    2a44:	10855104 	addne	r5, r5, r4, lsl #2
    2a48:	0a000004 	beq	2a60 <__libc_fini_array+0x30>
    2a4c:	e5353004 	ldr	r3, [r5, #-4]!
    2a50:	e1a0e00f 	mov	lr, pc
    2a54:	e12fff13 	bx	r3
    2a58:	e2544001 	subs	r4, r4, #1
    2a5c:	1afffffa 	bne	2a4c <__libc_fini_array+0x1c>
    2a60:	eb00004a 	bl	2b90 <__libc_fini>
    2a64:	e8bd4038 	pop	{r3, r4, r5, lr}
    2a68:	e12fff1e 	bx	lr
    2a6c:	00002ba8 	.word	0x00002ba8
    2a70:	00002bac 	.word	0x00002bac

00002a74 <__cs3_premain>:
    2a74:	e92d4008 	push	{r3, lr}
    2a78:	eb000017 	bl	2adc <__libc_init_array>
    2a7c:	e59f3030 	ldr	r3, [pc, #48]	; 2ab4 <__cs3_premain+0x40>
    2a80:	e3530000 	cmp	r3, #0
    2a84:	15930000 	ldrne	r0, [r3]
    2a88:	01a00003 	moveq	r0, r3
    2a8c:	e59f3024 	ldr	r3, [pc, #36]	; 2ab8 <__cs3_premain+0x44>
    2a90:	e3530000 	cmp	r3, #0
    2a94:	15931000 	ldrne	r1, [r3]
    2a98:	01a01003 	moveq	r1, r3
    2a9c:	e3a02000 	mov	r2, #0
    2aa0:	ebfff5ed 	bl	25c <main>
    2aa4:	e59f3010 	ldr	r3, [pc, #16]	; 2abc <__cs3_premain+0x48>
    2aa8:	e3530000 	cmp	r3, #0
    2aac:	1bffff2d 	blne	2768 <exit>
    2ab0:	eafffffe 	b	2ab0 <__cs3_premain+0x3c>
	...
    2abc:	00002768 	.word	0x00002768

00002ac0 <_exit>:
    2ac0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2ac4:	e3a00018 	mov	r0, #24
    2ac8:	e59f1004 	ldr	r1, [pc, #4]	; 2ad4 <_exit+0x14>
    2acc:	ef123456 	svc	0x00123456
    2ad0:	eafffffe 	b	2ad0 <_exit+0x10>
    2ad4:	00020026 	.word	0x00020026

00002ad8 <__cs3_isr_interrupt>:
    2ad8:	eafffffe 	b	2ad8 <__cs3_isr_interrupt>

00002adc <__libc_init_array>:
    2adc:	e92d4070 	push	{r4, r5, r6, lr}
    2ae0:	e59f506c 	ldr	r5, [pc, #108]	; 2b54 <__libc_init_array+0x78>
    2ae4:	e59f606c 	ldr	r6, [pc, #108]	; 2b58 <__libc_init_array+0x7c>
    2ae8:	e0656006 	rsb	r6, r5, r6
    2aec:	e1b06146 	asrs	r6, r6, #2
    2af0:	12455004 	subne	r5, r5, #4
    2af4:	13a04000 	movne	r4, #0
    2af8:	0a000005 	beq	2b14 <__libc_init_array+0x38>
    2afc:	e5b53004 	ldr	r3, [r5, #4]!
    2b00:	e2844001 	add	r4, r4, #1
    2b04:	e1a0e00f 	mov	lr, pc
    2b08:	e12fff13 	bx	r3
    2b0c:	e1560004 	cmp	r6, r4
    2b10:	1afffff9 	bne	2afc <__libc_init_array+0x20>
    2b14:	e59f5040 	ldr	r5, [pc, #64]	; 2b5c <__libc_init_array+0x80>
    2b18:	e59f6040 	ldr	r6, [pc, #64]	; 2b60 <__libc_init_array+0x84>
    2b1c:	e0656006 	rsb	r6, r5, r6
    2b20:	eb000012 	bl	2b70 <_init>
    2b24:	e1b06146 	asrs	r6, r6, #2
    2b28:	12455004 	subne	r5, r5, #4
    2b2c:	13a04000 	movne	r4, #0
    2b30:	0a000005 	beq	2b4c <__libc_init_array+0x70>
    2b34:	e5b53004 	ldr	r3, [r5, #4]!
    2b38:	e2844001 	add	r4, r4, #1
    2b3c:	e1a0e00f 	mov	lr, pc
    2b40:	e12fff13 	bx	r3
    2b44:	e1560004 	cmp	r6, r4
    2b48:	1afffff9 	bne	2b34 <__libc_init_array+0x58>
    2b4c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2b50:	e12fff1e 	bx	lr
    2b54:	00002b88 	.word	0x00002b88
    2b58:	00002b88 	.word	0x00002b88
    2b5c:	00002b88 	.word	0x00002b88
    2b60:	00002b90 	.word	0x00002b90

Disassembly of section .rodata:

00002b68 <_global_impure_ptr>:
    2b68:	000319f8 00000043                       ....C...

00002b70 <_init>:
    2b70:	e1a0c00d 	mov	r12, sp
    2b74:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2b78:	e24cb004 	sub	r11, r12, #4
    2b7c:	e24bd028 	sub	sp, r11, #40	; 0x28
    2b80:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2b84:	e12fff1e 	bx	lr

00002b88 <__init_array_start>:
    2b88:	00002a0c 	.word	0x00002a0c

00002b8c <__frame_dummy_init_array_entry>:
    2b8c:	00000208                                ....

00002b90 <__libc_fini>:
    2b90:	e1a0c00d 	mov	r12, sp
    2b94:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2b98:	e24cb004 	sub	r11, r12, #4
    2b9c:	e24bd028 	sub	sp, r11, #40	; 0x28
    2ba0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2ba4:	e12fff1e 	bx	lr

00002ba8 <__fini_array_start>:
    2ba8:	000001c4 	.word	0x000001c4

00002bac <__cs3_regions>:
	...
    2bb8:	00031e28 	.word	0x00031e28
    2bbc:	00000040 	.word	0x00000040

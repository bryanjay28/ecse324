
//campus.mcgill.ca/EMF/ELE/bjay/Desktop/ecse324/G19_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 a4 07 00 00 a8 07 00 00 ac 07 00 00     @...............
  30:	b0 07 00 00 a0 07 00 00 b4 07 00 00 b8 07 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000198 	bl	73c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000008a0 	.word	0x000008a0

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000cd8 	.word	0x00000cd8

00000124 <__cs3_heap_start_ptr>:
 124:	00000d00 	.word	0x00000d00

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000ce0 	.word	0x00000ce0
 170:	00000ce3 	.word	0x00000ce3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000ce0 	.word	0x00000ce0
 1bc:	00000ce0 	.word	0x00000ce0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000ce0 	.word	0x00000ce0
 200:	00000000 	.word	0x00000000
 204:	00000844 	.word	0x00000844

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000844 	.word	0x00000844
 250:	00000ce4 	.word	0x00000ce4
 254:	000008a0 	.word	0x000008a0
 258:	00000000 	.word	0x00000000

0000025c <main>:

// #include "./drivers/inc/LEDs.h"
// #include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"

int main () {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd008 	sub	sp, sp, #8
	// while(1) {
	// 	int switch_val = read_slider_switches_ASM();
	//	write_LEDs_ASM(switch_val);
	//}

	HEX_flood_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 268:	e3a0003f 	mov	r0, #63	; 0x3f
 26c:	eb00002f 	bl	330 <HEX_flood_ASM>
	int i, n = 99999;
 270:	e308369f 	movw	r3, #34463	; 0x869f
 274:	e3403001 	movt	r3, #1
 278:	e50b300c 	str	r3, [r11, #-12]
	for (i=0;i<=n;i++){
 27c:	e3a03000 	mov	r3, #0
 280:	e50b3008 	str	r3, [r11, #-8]
 284:	ea000002 	b	294 <main+0x38>
 288:	e51b3008 	ldr	r3, [r11, #-8]
 28c:	e2833001 	add	r3, r3, #1
 290:	e50b3008 	str	r3, [r11, #-8]
 294:	e51b2008 	ldr	r2, [r11, #-8]
 298:	e51b300c 	ldr	r3, [r11, #-12]
 29c:	e1520003 	cmp	r2, r3
 2a0:	dafffff8 	ble	288 <main+0x2c>
		
	}
	HEX_clear_ASM(HEX3 | HEX4 | HEX5);
 2a4:	e3a00038 	mov	r0, #56	; 0x38
 2a8:	eb000006 	bl	2c8 <HEX_clear_ASM>

	HEX_write_ASM(HEX4, 1);
 2ac:	e3a00010 	mov	r0, #16
 2b0:	e3a01001 	mov	r1, #1
 2b4:	eb000035 	bl	390 <HEX_write_ASM>

	return 0;
 2b8:	e3a03000 	mov	r3, #0
}
 2bc:	e1a00003 	mov	r0, r3
 2c0:	e24bd004 	sub	sp, r11, #4
 2c4:	e8bd8800 	pop	{r11, pc}

000002c8 <HEX_clear_ASM>:
			.equ HEX_BASE4, 0xFF200030
			.global HEX_clear_ASM
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:	PUSH {LR}
 2c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
 2cc:	e59f1130 	ldr	r1, [pc, #304]	; 404 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
 2d0:	e59f2130 	ldr	r2, [pc, #304]	; 408 <HEX_VAL+0x14>
				MOV R3, #6				// counter for bits, 6 possiblet hex codes
 2d4:	e3a03006 	mov	r3, #6
				MOV R4, #1				// compare with each bit to get hex number since one hot encoded
 2d8:	e3a04001 	mov	r4, #1
				MOV R6, #0				// clear bit 
 2dc:	e3a06000 	mov	r6, #0

000002e0 <LOOP_BOTTOM>:
			
LOOP_BOTTOM:	CMP R3, #2
 2e0:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP
 2e4:	0a000006 	beq	304 <LOOP_TOP>
				ANDS R5, R4, R0 		// check which bit is 1 since to get the hex display
 2e8:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM		// if R5 > 0, then go to clear
 2ec:	0a000000 	beq	2f4 <BOTTOM>
				STRB R6, [R1]				
 2f0:	e5c16000 	strb	r6, [r1]

000002f4 <BOTTOM>:

BOTTOM:			LSL R4, #1				// shift #1 bit to the left to check the next bit value
 2f4:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			// increment hex display value
 2f8:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			// decrement the counter 
 2fc:	e2533001 	subs	r3, r3, #1
				BGT LOOP_BOTTOM			// if the value is > 0, then keep looping
 300:	cafffff6 	bgt	2e0 <LOOP_BOTTOM>

00000304 <LOOP_TOP>:

LOOP_TOP:		CMP R3, #0				// compare with 0 to determine end of the loops
 304:	e3530000 	cmp	r3, #0
				BEQ END					// if 0, go to the end
 308:	0a000006 	beq	328 <END>
				ANDS R5, R4, R0			// repeat process form above
 30c:	e0145000 	ands	r5, r4, r0
				BEQ TOP
 310:	0a000000 	beq	318 <TOP>
				STRB R6, [R2]			// store into address hex_base4
 314:	e5c26000 	strb	r6, [r2]

00000318 <TOP>:

TOP:			LSL R4, #1
 318:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			// increment address of hex_base4
 31c:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1
 320:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP
 324:	cafffff6 	bgt	304 <LOOP_TOP>

00000328 <END>:

END:			POP {LR}
 328:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
 32c:	e12fff1e 	bx	lr

00000330 <HEX_flood_ASM>:

HEX_flood_ASM:	PUSH {LR}
 330:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
 334:	e59f10c8 	ldr	r1, [pc, #200]	; 404 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
 338:	e59f20c8 	ldr	r2, [pc, #200]	; 408 <HEX_VAL+0x14>
				MOV R3, #6				// counter for bits, 6 possiblet hex codes
 33c:	e3a03006 	mov	r3, #6
				MOV R4, #1				// compare with each bit to get hex number since one hot encoded
 340:	e3a04001 	mov	r4, #1
				MOV R6, #0x7F				// flood bit 7F = 0111 1111
 344:	e3a0607f 	mov	r6, #127	; 0x7f

00000348 <LOOP_BOTTOM_F>:

LOOP_BOTTOM_F:	CMP R3, #2
 348:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP
 34c:	0affffec 	beq	304 <LOOP_TOP>
				ANDS R5, R4, R0 		// check which bit is 1 since to get the hex display
 350:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM_F		// if R5 > 0, then go to clear
 354:	0a000000 	beq	35c <BOTTOM_F>
				STRB R6, [R1]				
 358:	e5c16000 	strb	r6, [r1]

0000035c <BOTTOM_F>:

BOTTOM_F:		LSL R4, #1				// shift #1 bit to the left to check the next bit value
 35c:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			// increment hex display value
 360:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			// decrement the counter 
 364:	e2533001 	subs	r3, r3, #1
				BGT LOOP_BOTTOM_F		// if the value is > 0, then keep looping
 368:	cafffff6 	bgt	348 <LOOP_BOTTOM_F>

0000036c <LOOP_TOP_F>:

LOOP_TOP_F:		CMP R3, #0				// compare with 0 to determine end of the loops
 36c:	e3530000 	cmp	r3, #0
				BEQ END					// if 0, go to the end
 370:	0affffec 	beq	328 <END>
				ANDS R5, R4, R0			// repeat process form above
 374:	e0145000 	ands	r5, r4, r0
				BEQ TOP_F
 378:	0a000000 	beq	380 <TOP_F>
				STRB R6, [R2]			// store into address hex_base4
 37c:	e5c26000 	strb	r6, [r2]

00000380 <TOP_F>:

TOP_F:			LSL R4, #1
 380:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			// increment address of hex_base4
 384:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1
 388:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP_F
 38c:	cafffff6 	bgt	36c <LOOP_TOP_F>

00000390 <HEX_write_ASM>:

HEX_write_ASM:	PUSH {LR}
 390:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R2, =HEX_BASE0		// contains the address for displays 0-3
 394:	e59f2068 	ldr	r2, [pc, #104]	; 404 <HEX_VAL+0x10>
				LDR R3, =HEX_BASE4		// contains the address for displays 4-5
 398:	e59f3068 	ldr	r3, [pc, #104]	; 408 <HEX_VAL+0x14>
				LDR R7, =HEX_VAL		// contains array of bytes of the bit values for numbers 0-15
 39c:	e59f7068 	ldr	r7, [pc, #104]	; 40c <HEX_VAL+0x18>
				LDRB R8, [R7, R1]		// load the corresponding hex value for the char
 3a0:	e7d78001 	ldrb	r8, [r7, r1]
				MOV R4, #6				// counter for bits, 6 possiblet hex codes
 3a4:	e3a04006 	mov	r4, #6
				MOV R5, #1				// compare with each bit to get hex number since one hot encoded
 3a8:	e3a05001 	mov	r5, #1

000003ac <LOOP_BOTTOM2>:

LOOP_BOTTOM2:	CMP R4, #2
 3ac:	e3540002 	cmp	r4, #2
				BEQ LOOP_TOP2
 3b0:	0a000006 	beq	3d0 <LOOP_TOP2>
				ANDS R6, R5, R0 		// check which bit is 1 since to get the hex display
 3b4:	e0156000 	ands	r6, r5, r0
				BEQ BOTTOM2				// if R5 > 0, then go to clear
 3b8:	0a000000 	beq	3c0 <BOTTOM2>
				STRB R8, [R2]			// store the desired value in to the hex_base0 diaplay
 3bc:	e5c28000 	strb	r8, [r2]

000003c0 <BOTTOM2>:

BOTTOM2:		LSL R5, #1				// shift #1 bit to the left to check the next bit value
 3c0:	e1a05085 	lsl	r5, r5, #1
				ADD R2, R2, #1			// increment hex display value
 3c4:	e2822001 	add	r2, r2, #1
				SUBS R4, R4, #1			// decrement the counter 
 3c8:	e2544001 	subs	r4, r4, #1
				BGT LOOP_BOTTOM2		// if the value is > 0, then keep looping
 3cc:	cafffff6 	bgt	3ac <LOOP_BOTTOM2>

000003d0 <LOOP_TOP2>:

LOOP_TOP2:		CMP R4, #0				// compare with 0 to determine end of the loops
 3d0:	e3540000 	cmp	r4, #0
				BEQ END					// if 0, go to the end
 3d4:	0affffd3 	beq	328 <END>
				ANDS R6, R5, R0			// repeat process form above
 3d8:	e0156000 	ands	r6, r5, r0
				BEQ TOP
 3dc:	0affffcd 	beq	318 <TOP>
				STRB R8, [R3]			// store into address hex_base4
 3e0:	e5c38000 	strb	r8, [r3]

000003e4 <TOP2>:

TOP2:			LSL R5, #1
 3e4:	e1a05085 	lsl	r5, r5, #1
				ADD R3, R3, #1			// increment address of hex_base4
 3e8:	e2833001 	add	r3, r3, #1
				SUBS R4, R4, #1
 3ec:	e2544001 	subs	r4, r4, #1
				BGT LOOP_TOP2
 3f0:	cafffff6 	bgt	3d0 <LOOP_TOP2>

000003f4 <HEX_VAL>:
 3f4:	4f5b063f 	.word	0x4f5b063f
 3f8:	077d6d66 	.word	0x077d6d66
 3fc:	7f77677f 	.word	0x7f77677f
 400:	71793f39 	.word	0x71793f39
			.global HEX_clear_ASM
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:	PUSH {LR}
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
 404:	ff200020 	.word	0xff200020
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
 408:	ff200030 	.word	0xff200030
				BGT LOOP_TOP_F

HEX_write_ASM:	PUSH {LR}
				LDR R2, =HEX_BASE0		// contains the address for displays 0-3
				LDR R3, =HEX_BASE4		// contains the address for displays 4-5
				LDR R7, =HEX_VAL		// contains array of bytes of the bit values for numbers 0-15
 40c:	000003f4 	.word	0x000003f4

00000410 <atexit>:
 410:	e1a01000 	mov	r1, r0
 414:	e3a00000 	mov	r0, #0
 418:	e92d4008 	push	{r3, lr}
 41c:	e1a02000 	mov	r2, r0
 420:	e1a03000 	mov	r3, r0
 424:	eb00000e 	bl	464 <__register_exitproc>
 428:	e8bd4008 	pop	{r3, lr}
 42c:	e12fff1e 	bx	lr

00000430 <exit>:
 430:	e92d4008 	push	{r3, lr}
 434:	e3a01000 	mov	r1, #0
 438:	e1a04000 	mov	r4, r0
 43c:	eb000045 	bl	558 <__call_exitprocs>
 440:	e59f3018 	ldr	r3, [pc, #24]	; 460 <exit+0x30>
 444:	e5930000 	ldr	r0, [r3]
 448:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 44c:	e3530000 	cmp	r3, #0
 450:	11a0e00f 	movne	lr, pc
 454:	112fff13 	bxne	r3
 458:	e1a00004 	mov	r0, r4
 45c:	eb0000c9 	bl	788 <_exit>
 460:	00000848 	.word	0x00000848

00000464 <__register_exitproc>:
 464:	e59fc0e4 	ldr	r12, [pc, #228]	; 550 <__register_exitproc+0xec>
 468:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 46c:	e59c4000 	ldr	r4, [r12]
 470:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 474:	e35c0000 	cmp	r12, #0
 478:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 47c:	e59c5004 	ldr	r5, [r12, #4]
 480:	0584c148 	streq	r12, [r4, #328]	; 0x148
 484:	e355001f 	cmp	r5, #31
 488:	e24dd010 	sub	sp, sp, #16
 48c:	e1a06000 	mov	r6, r0
 490:	da000015 	ble	4ec <__register_exitproc+0x88>
 494:	e59f00b8 	ldr	r0, [pc, #184]	; 554 <__register_exitproc+0xf0>
 498:	e3500000 	cmp	r0, #0
 49c:	1a000001 	bne	4a8 <__register_exitproc+0x44>
 4a0:	e3e00000 	mvn	r0, #0
 4a4:	ea000018 	b	50c <__register_exitproc+0xa8>
 4a8:	e3a00e19 	mov	r0, #400	; 0x190
 4ac:	e58d100c 	str	r1, [sp, #12]
 4b0:	e58d2008 	str	r2, [sp, #8]
 4b4:	e58d3004 	str	r3, [sp, #4]
 4b8:	e320f000 	nop	{0}
 4bc:	e250c000 	subs	r12, r0, #0
 4c0:	e59d100c 	ldr	r1, [sp, #12]
 4c4:	e59d2008 	ldr	r2, [sp, #8]
 4c8:	e59d3004 	ldr	r3, [sp, #4]
 4cc:	0afffff3 	beq	4a0 <__register_exitproc+0x3c>
 4d0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 4d4:	e3a00000 	mov	r0, #0
 4d8:	e58c0004 	str	r0, [r12, #4]
 4dc:	e58c5000 	str	r5, [r12]
 4e0:	e584c148 	str	r12, [r4, #328]	; 0x148
 4e4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 4e8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 4ec:	e3560000 	cmp	r6, #0
 4f0:	e59c4004 	ldr	r4, [r12, #4]
 4f4:	1a000007 	bne	518 <__register_exitproc+0xb4>
 4f8:	e2843002 	add	r3, r4, #2
 4fc:	e2844001 	add	r4, r4, #1
 500:	e78c1103 	str	r1, [r12, r3, lsl #2]
 504:	e58c4004 	str	r4, [r12, #4]
 508:	e3a00000 	mov	r0, #0
 50c:	e28dd010 	add	sp, sp, #16
 510:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 514:	e12fff1e 	bx	lr
 518:	e3a00001 	mov	r0, #1
 51c:	e1a00410 	lsl	r0, r0, r4
 520:	e08c8104 	add	r8, r12, r4, lsl #2
 524:	e3560002 	cmp	r6, #2
 528:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 52c:	e5883108 	str	r3, [r8, #264]	; 0x108
 530:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 534:	e1877000 	orr	r7, r7, r0
 538:	01830000 	orreq	r0, r3, r0
 53c:	e1a05008 	mov	r5, r8
 540:	e5882088 	str	r2, [r8, #136]	; 0x88
 544:	e58c7188 	str	r7, [r12, #392]	; 0x188
 548:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 54c:	eaffffe9 	b	4f8 <__register_exitproc+0x94>
 550:	00000848 	.word	0x00000848
 554:	00000000 	.word	0x00000000

00000558 <__call_exitprocs>:
 558:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 55c:	e59f3168 	ldr	r3, [pc, #360]	; 6cc <__call_exitprocs+0x174>
 560:	e5933000 	ldr	r3, [r3]
 564:	e24dd014 	sub	sp, sp, #20
 568:	e58d3004 	str	r3, [sp, #4]
 56c:	e2833f52 	add	r3, r3, #328	; 0x148
 570:	e58d0008 	str	r0, [sp, #8]
 574:	e58d300c 	str	r3, [sp, #12]
 578:	e1a07001 	mov	r7, r1
 57c:	e3a08001 	mov	r8, #1
 580:	e59d3004 	ldr	r3, [sp, #4]
 584:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 588:	e3560000 	cmp	r6, #0
 58c:	e59db00c 	ldr	r11, [sp, #12]
 590:	0a000033 	beq	664 <__call_exitprocs+0x10c>
 594:	e5965004 	ldr	r5, [r6, #4]
 598:	e2554001 	subs	r4, r5, #1
 59c:	5286a088 	addpl	r10, r6, #136	; 0x88
 5a0:	5285501f 	addpl	r5, r5, #31
 5a4:	508a5105 	addpl	r5, r10, r5, lsl #2
 5a8:	5a000007 	bpl	5cc <__call_exitprocs+0x74>
 5ac:	ea000029 	b	658 <__call_exitprocs+0x100>
 5b0:	e5953000 	ldr	r3, [r5]
 5b4:	e1530007 	cmp	r3, r7
 5b8:	0a000005 	beq	5d4 <__call_exitprocs+0x7c>
 5bc:	e2444001 	sub	r4, r4, #1
 5c0:	e3740001 	cmn	r4, #1
 5c4:	e2455004 	sub	r5, r5, #4
 5c8:	0a000022 	beq	658 <__call_exitprocs+0x100>
 5cc:	e3570000 	cmp	r7, #0
 5d0:	1afffff6 	bne	5b0 <__call_exitprocs+0x58>
 5d4:	e5963004 	ldr	r3, [r6, #4]
 5d8:	e06a2005 	rsb	r2, r10, r5
 5dc:	e2433001 	sub	r3, r3, #1
 5e0:	e0862002 	add	r2, r6, r2
 5e4:	e1530004 	cmp	r3, r4
 5e8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 5ec:	13a01000 	movne	r1, #0
 5f0:	05864004 	streq	r4, [r6, #4]
 5f4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 5f8:	e3530000 	cmp	r3, #0
 5fc:	0affffee 	beq	5bc <__call_exitprocs+0x64>
 600:	e1a02418 	lsl	r2, r8, r4
 604:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 608:	e1120001 	tst	r2, r1
 60c:	e5969004 	ldr	r9, [r6, #4]
 610:	0a000016 	beq	670 <__call_exitprocs+0x118>
 614:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 618:	e1120001 	tst	r2, r1
 61c:	1a000016 	bne	67c <__call_exitprocs+0x124>
 620:	e59d0008 	ldr	r0, [sp, #8]
 624:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 628:	e1a0e00f 	mov	lr, pc
 62c:	e12fff13 	bx	r3
 630:	e5963004 	ldr	r3, [r6, #4]
 634:	e1530009 	cmp	r3, r9
 638:	1affffd0 	bne	580 <__call_exitprocs+0x28>
 63c:	e59b3000 	ldr	r3, [r11]
 640:	e1530006 	cmp	r3, r6
 644:	1affffcd 	bne	580 <__call_exitprocs+0x28>
 648:	e2444001 	sub	r4, r4, #1
 64c:	e3740001 	cmn	r4, #1
 650:	e2455004 	sub	r5, r5, #4
 654:	1affffdc 	bne	5cc <__call_exitprocs+0x74>
 658:	e59f1070 	ldr	r1, [pc, #112]	; 6d0 <__call_exitprocs+0x178>
 65c:	e3510000 	cmp	r1, #0
 660:	1a000009 	bne	68c <__call_exitprocs+0x134>
 664:	e28dd014 	add	sp, sp, #20
 668:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 66c:	e12fff1e 	bx	lr
 670:	e1a0e00f 	mov	lr, pc
 674:	e12fff13 	bx	r3
 678:	eaffffec 	b	630 <__call_exitprocs+0xd8>
 67c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 680:	e1a0e00f 	mov	lr, pc
 684:	e12fff13 	bx	r3
 688:	eaffffe8 	b	630 <__call_exitprocs+0xd8>
 68c:	e5963004 	ldr	r3, [r6, #4]
 690:	e3530000 	cmp	r3, #0
 694:	e5963000 	ldr	r3, [r6]
 698:	1a000008 	bne	6c0 <__call_exitprocs+0x168>
 69c:	e3530000 	cmp	r3, #0
 6a0:	0a000006 	beq	6c0 <__call_exitprocs+0x168>
 6a4:	e1a00006 	mov	r0, r6
 6a8:	e58b3000 	str	r3, [r11]
 6ac:	e320f000 	nop	{0}
 6b0:	e59b6000 	ldr	r6, [r11]
 6b4:	e3560000 	cmp	r6, #0
 6b8:	1affffb5 	bne	594 <__call_exitprocs+0x3c>
 6bc:	eaffffe8 	b	664 <__call_exitprocs+0x10c>
 6c0:	e1a0b006 	mov	r11, r6
 6c4:	e1a06003 	mov	r6, r3
 6c8:	eafffff9 	b	6b4 <__call_exitprocs+0x15c>
 6cc:	00000848 	.word	0x00000848
 6d0:	00000000 	.word	0x00000000

000006d4 <register_fini>:
 6d4:	e92d4008 	push	{r3, lr}
 6d8:	e59f3010 	ldr	r3, [pc, #16]	; 6f0 <register_fini+0x1c>
 6dc:	e3530000 	cmp	r3, #0
 6e0:	159f000c 	ldrne	r0, [pc, #12]	; 6f4 <register_fini+0x20>
 6e4:	1bffff49 	blne	410 <atexit>
 6e8:	e8bd4008 	pop	{r3, lr}
 6ec:	e12fff1e 	bx	lr
 6f0:	00000870 	.word	0x00000870
 6f4:	000006f8 	.word	0x000006f8

000006f8 <__libc_fini_array>:
 6f8:	e92d4038 	push	{r3, r4, r5, lr}
 6fc:	e59f5030 	ldr	r5, [pc, #48]	; 734 <__libc_fini_array+0x3c>
 700:	e59f4030 	ldr	r4, [pc, #48]	; 738 <__libc_fini_array+0x40>
 704:	e0654004 	rsb	r4, r5, r4
 708:	e1b04144 	asrs	r4, r4, #2
 70c:	10855104 	addne	r5, r5, r4, lsl #2
 710:	0a000004 	beq	728 <__libc_fini_array+0x30>
 714:	e5353004 	ldr	r3, [r5, #-4]!
 718:	e1a0e00f 	mov	lr, pc
 71c:	e12fff13 	bx	r3
 720:	e2544001 	subs	r4, r4, #1
 724:	1afffffa 	bne	714 <__libc_fini_array+0x1c>
 728:	eb000050 	bl	870 <__libc_fini>
 72c:	e8bd4038 	pop	{r3, r4, r5, lr}
 730:	e12fff1e 	bx	lr
 734:	00000888 	.word	0x00000888
 738:	0000088c 	.word	0x0000088c

0000073c <__cs3_premain>:
 73c:	e92d4008 	push	{r3, lr}
 740:	eb00001d 	bl	7bc <__libc_init_array>
 744:	e59f3030 	ldr	r3, [pc, #48]	; 77c <__cs3_premain+0x40>
 748:	e3530000 	cmp	r3, #0
 74c:	15930000 	ldrne	r0, [r3]
 750:	01a00003 	moveq	r0, r3
 754:	e59f3024 	ldr	r3, [pc, #36]	; 780 <__cs3_premain+0x44>
 758:	e3530000 	cmp	r3, #0
 75c:	15931000 	ldrne	r1, [r3]
 760:	01a01003 	moveq	r1, r3
 764:	e3a02000 	mov	r2, #0
 768:	ebfffebb 	bl	25c <main>
 76c:	e59f3010 	ldr	r3, [pc, #16]	; 784 <__cs3_premain+0x48>
 770:	e3530000 	cmp	r3, #0
 774:	1bffff2d 	blne	430 <exit>
 778:	eafffffe 	b	778 <__cs3_premain+0x3c>
	...
 784:	00000430 	.word	0x00000430

00000788 <_exit>:
 788:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 78c:	e3a00018 	mov	r0, #24
 790:	e59f1004 	ldr	r1, [pc, #4]	; 79c <_exit+0x14>
 794:	ef123456 	svc	0x00123456
 798:	eafffffe 	b	798 <_exit+0x10>
 79c:	00020026 	.word	0x00020026

000007a0 <__cs3_isr_interrupt>:
 7a0:	eafffffe 	b	7a0 <__cs3_isr_interrupt>

000007a4 <__cs3_isr_undef>:
 7a4:	eafffffe 	b	7a4 <__cs3_isr_undef>

000007a8 <__cs3_isr_swi>:
 7a8:	eafffffe 	b	7a8 <__cs3_isr_swi>

000007ac <__cs3_isr_pabort>:
 7ac:	eafffffe 	b	7ac <__cs3_isr_pabort>

000007b0 <__cs3_isr_dabort>:
 7b0:	eafffffe 	b	7b0 <__cs3_isr_dabort>

000007b4 <__cs3_isr_irq>:
 7b4:	eafffffe 	b	7b4 <__cs3_isr_irq>

000007b8 <__cs3_isr_fiq>:
 7b8:	eafffffe 	b	7b8 <__cs3_isr_fiq>

000007bc <__libc_init_array>:
 7bc:	e92d4070 	push	{r4, r5, r6, lr}
 7c0:	e59f506c 	ldr	r5, [pc, #108]	; 834 <__libc_init_array+0x78>
 7c4:	e59f606c 	ldr	r6, [pc, #108]	; 838 <__libc_init_array+0x7c>
 7c8:	e0656006 	rsb	r6, r5, r6
 7cc:	e1b06146 	asrs	r6, r6, #2
 7d0:	12455004 	subne	r5, r5, #4
 7d4:	13a04000 	movne	r4, #0
 7d8:	0a000005 	beq	7f4 <__libc_init_array+0x38>
 7dc:	e5b53004 	ldr	r3, [r5, #4]!
 7e0:	e2844001 	add	r4, r4, #1
 7e4:	e1a0e00f 	mov	lr, pc
 7e8:	e12fff13 	bx	r3
 7ec:	e1560004 	cmp	r6, r4
 7f0:	1afffff9 	bne	7dc <__libc_init_array+0x20>
 7f4:	e59f5040 	ldr	r5, [pc, #64]	; 83c <__libc_init_array+0x80>
 7f8:	e59f6040 	ldr	r6, [pc, #64]	; 840 <__libc_init_array+0x84>
 7fc:	e0656006 	rsb	r6, r5, r6
 800:	eb000012 	bl	850 <_init>
 804:	e1b06146 	asrs	r6, r6, #2
 808:	12455004 	subne	r5, r5, #4
 80c:	13a04000 	movne	r4, #0
 810:	0a000005 	beq	82c <__libc_init_array+0x70>
 814:	e5b53004 	ldr	r3, [r5, #4]!
 818:	e2844001 	add	r4, r4, #1
 81c:	e1a0e00f 	mov	lr, pc
 820:	e12fff13 	bx	r3
 824:	e1560004 	cmp	r6, r4
 828:	1afffff9 	bne	814 <__libc_init_array+0x58>
 82c:	e8bd4070 	pop	{r4, r5, r6, lr}
 830:	e12fff1e 	bx	lr
 834:	00000868 	.word	0x00000868
 838:	00000868 	.word	0x00000868
 83c:	00000868 	.word	0x00000868
 840:	00000870 	.word	0x00000870

Disassembly of section .rodata:

00000848 <_global_impure_ptr>:
 848:	000008b0 00000043                       ....C...

00000850 <_init>:
 850:	e1a0c00d 	mov	r12, sp
 854:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 858:	e24cb004 	sub	r11, r12, #4
 85c:	e24bd028 	sub	sp, r11, #40	; 0x28
 860:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 864:	e12fff1e 	bx	lr

00000868 <__init_array_start>:
 868:	000006d4 	.word	0x000006d4

0000086c <__frame_dummy_init_array_entry>:
 86c:	00000208                                ....

00000870 <__libc_fini>:
 870:	e1a0c00d 	mov	r12, sp
 874:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 878:	e24cb004 	sub	r11, r12, #4
 87c:	e24bd028 	sub	sp, r11, #40	; 0x28
 880:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 884:	e12fff1e 	bx	lr

00000888 <__fini_array_start>:
 888:	000001c4 	.word	0x000001c4

0000088c <__cs3_regions>:
 88c:	00000000 	.word	0x00000000
 890:	00000040 	.word	0x00000040
 894:	00000040 	.word	0x00000040
 898:	00000ca0 	.word	0x00000ca0
 89c:	00000020 	.word	0x00000020

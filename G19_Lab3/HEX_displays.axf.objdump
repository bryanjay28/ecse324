
//campus.mcgill.ca/EMF/ELE/bjay/Desktop/ecse324/G19_Lab3/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	14 0a 00 00 20 0a 00 00 2c 0a 00 00 38 0a 00 00     .... ...,...8...
  30:	44 0a 00 00 a4 11 00 00 bc 08 00 00 50 0a 00 00     D...........P...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000419 	bl	1140 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001294 	.word	0x00001294

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000016d0 	.word	0x000016d0

00000124 <__cs3_heap_start_ptr>:
     124:	000016f8 	.word	0x000016f8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000016d8 	.word	0x000016d8
     170:	000016db 	.word	0x000016db
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000016d8 	.word	0x000016d8
     1bc:	000016d8 	.word	0x000016d8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000016d8 	.word	0x000016d8
     200:	00000000 	.word	0x00000000
     204:	00001230 	.word	0x00001230

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001230 	.word	0x00001230
     250:	000016dc 	.word	0x000016dc
     254:	00001298 	.word	0x00001298
     258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
			.equ HEX_BASE4, 0xFF200030
			.global HEX_clear_ASM
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:	PUSH {LR}
     25c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
     260:	e59f1140 	ldr	r1, [pc, #320]	; 3a8 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
     264:	e59f2140 	ldr	r2, [pc, #320]	; 3ac <HEX_VAL+0x14>
				MOV R3, #6				// counter for bits, 6 possiblet hex codes
     268:	e3a03006 	mov	r3, #6
				MOV R4, #1				// compare with each bit to get hex number since one hot encoded
     26c:	e3a04001 	mov	r4, #1
				MOV R6, #0				// clear bit 
     270:	e3a06000 	mov	r6, #0

00000274 <LOOP_BOTTOM>:

LOOP_BOTTOM:	CMP R3, #2
     274:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP
     278:	0a000006 	beq	298 <LOOP_TOP>
				ANDS R5, R4, R0 		// check which bit is 1 since to get the hex display
     27c:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM		// if R5 > 0, then go to clear
     280:	0a000000 	beq	288 <BOTTOM>
				STRB R6, [R1]				
     284:	e5c16000 	strb	r6, [r1]

00000288 <BOTTOM>:

BOTTOM:			LSL R4, #1				// shift #1 bit to the left to check the next bit value
     288:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			// increment hex display value
     28c:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			// decrement the counter 
     290:	e2533001 	subs	r3, r3, #1
				BGT LOOP_BOTTOM			// if the value is > 0, then keep looping
     294:	cafffff6 	bgt	274 <LOOP_BOTTOM>

00000298 <LOOP_TOP>:

LOOP_TOP:		CMP R3, #0				// compare with 0 to determine end of the loops
     298:	e3530000 	cmp	r3, #0
				BEQ END					// if 0, go to the end
     29c:	0a000006 	beq	2bc <END>
				ANDS R5, R4, R0			// repeat process form above
     2a0:	e0145000 	ands	r5, r4, r0
				BEQ TOP
     2a4:	0a000000 	beq	2ac <TOP>
				STRB R6, [R2]			// store into address hex_base4
     2a8:	e5c26000 	strb	r6, [r2]

000002ac <TOP>:

TOP:			LSL R4, #1
     2ac:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			// increment address of hex_base4
     2b0:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1
     2b4:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP
     2b8:	cafffff6 	bgt	298 <LOOP_TOP>

000002bc <END>:

END:			POP {LR}
     2bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
     2c0:	e12fff1e 	bx	lr

000002c4 <HEX_flood_ASM>:

HEX_flood_ASM:	PUSH {LR}
     2c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
     2c8:	e59f10d8 	ldr	r1, [pc, #216]	; 3a8 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
     2cc:	e59f20d8 	ldr	r2, [pc, #216]	; 3ac <HEX_VAL+0x14>
				MOV R3, #6				// counter for bits, 6 possiblet hex codes
     2d0:	e3a03006 	mov	r3, #6
				MOV R4, #1				// compare with each bit to get hex number since one hot encoded
     2d4:	e3a04001 	mov	r4, #1
				MOV R6, #0x7F				// flood bit 7F = 0111 1111
     2d8:	e3a0607f 	mov	r6, #127	; 0x7f

000002dc <LOOP_BOTTOM_F>:

LOOP_BOTTOM_F:	CMP R3, #2
     2dc:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP
     2e0:	0affffec 	beq	298 <LOOP_TOP>
				ANDS R5, R4, R0 		// check which bit is 1 since to get the hex display
     2e4:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM_F		// if R5 > 0, then go to clear
     2e8:	0a000000 	beq	2f0 <BOTTOM_F>
				STRB R6, [R1]				
     2ec:	e5c16000 	strb	r6, [r1]

000002f0 <BOTTOM_F>:

BOTTOM_F:		LSL R4, #1				// shift #1 bit to the left to check the next bit value
     2f0:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			// increment hex display value
     2f4:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			// decrement the counter 
     2f8:	e2533001 	subs	r3, r3, #1
				BGT LOOP_BOTTOM_F		// if the value is > 0, then keep looping
     2fc:	cafffff6 	bgt	2dc <LOOP_BOTTOM_F>

00000300 <LOOP_TOP_F>:

LOOP_TOP_F:		CMP R3, #0				// compare with 0 to determine end of the loops
     300:	e3530000 	cmp	r3, #0
				BEQ END_F					// if 0, go to the end
     304:	0a000006 	beq	324 <END_F>
				ANDS R5, R4, R0			// repeat process form above
     308:	e0145000 	ands	r5, r4, r0
				BEQ TOP_F
     30c:	0a000000 	beq	314 <TOP_F>
				STRB R6, [R2]			// store into address hex_base4
     310:	e5c26000 	strb	r6, [r2]

00000314 <TOP_F>:

TOP_F:			LSL R4, #1
     314:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			// increment address of hex_base4
     318:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1
     31c:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP_F
     320:	cafffff6 	bgt	300 <LOOP_TOP_F>

00000324 <END_F>:

END_F:			POP {LR}
     324:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
     328:	e12fff1e 	bx	lr

0000032c <HEX_write_ASM>:

HEX_write_ASM:	PUSH {LR}
     32c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R2, =HEX_BASE0		// contains the address for displays 0-3
     330:	e59f2070 	ldr	r2, [pc, #112]	; 3a8 <HEX_VAL+0x10>
				LDR R3, =HEX_BASE4		// contains the address for displays 4-5
     334:	e59f3070 	ldr	r3, [pc, #112]	; 3ac <HEX_VAL+0x14>
				LDR R7, =HEX_VAL		// contains array of bytes of the bit values for numbers 0-15
     338:	e59f7070 	ldr	r7, [pc, #112]	; 3b0 <HEX_VAL+0x18>
				LDRB R8, [R7, R1]		// load the corresponding hex value for the char
     33c:	e7d78001 	ldrb	r8, [r7, r1]
				MOV R4, #6				// counter for bits, 6 possiblet hex codes
     340:	e3a04006 	mov	r4, #6
				MOV R5, #1				// compare with each bit to get hex number since one hot encoded
     344:	e3a05001 	mov	r5, #1

00000348 <LOOP_BOTTOM2>:

LOOP_BOTTOM2:	CMP R4, #2
     348:	e3540002 	cmp	r4, #2
				BEQ LOOP_TOP2
     34c:	0a000006 	beq	36c <LOOP_TOP2>
				ANDS R6, R5, R0 		// check which bit is 1 since to get the hex display
     350:	e0156000 	ands	r6, r5, r0
				BEQ BOTTOM2				// if R5 > 0, then go to clear
     354:	0a000000 	beq	35c <BOTTOM2>
				STRB R8, [R2]			// store the desired value in to the hex_base0 diaplay
     358:	e5c28000 	strb	r8, [r2]

0000035c <BOTTOM2>:

BOTTOM2:		LSL R5, #1				// shift #1 bit to the left to check the next bit value
     35c:	e1a05085 	lsl	r5, r5, #1
				ADD R2, R2, #1			// increment hex display value
     360:	e2822001 	add	r2, r2, #1
				SUBS R4, R4, #1			// decrement the counter 
     364:	e2544001 	subs	r4, r4, #1
				BGT LOOP_BOTTOM2		// if the value is > 0, then keep looping
     368:	cafffff6 	bgt	348 <LOOP_BOTTOM2>

0000036c <LOOP_TOP2>:

LOOP_TOP2:		CMP R4, #0				// compare with 0 to determine end of the loops
     36c:	e3540000 	cmp	r4, #0
				BEQ END2					// if 0, go to the end
     370:	0a000006 	beq	390 <END2>
				ANDS R6, R5, R0			// repeat process form above
     374:	e0156000 	ands	r6, r5, r0
				BEQ TOP2
     378:	0a000000 	beq	380 <TOP2>
				STRB R8, [R3]			// store into address hex_base4
     37c:	e5c38000 	strb	r8, [r3]

00000380 <TOP2>:

TOP2:			LSL R5, #1
     380:	e1a05085 	lsl	r5, r5, #1
				ADD R3, R3, #1			// increment address of hex_base4
     384:	e2833001 	add	r3, r3, #1
				SUBS R4, R4, #1
     388:	e2544001 	subs	r4, r4, #1
				BGT LOOP_TOP2
     38c:	cafffff6 	bgt	36c <LOOP_TOP2>

00000390 <END2>:

END2:			POP {LR}
     390:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
     394:	e12fff1e 	bx	lr

00000398 <HEX_VAL>:
     398:	4f5b063f 	.word	0x4f5b063f
     39c:	077d6d66 	.word	0x077d6d66
     3a0:	7f77677f 	.word	0x7f77677f
     3a4:	71793f39 	.word	0x71793f39
			.global HEX_clear_ASM
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:	PUSH {LR}
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
     3a8:	ff200020 	.word	0xff200020
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
     3ac:	ff200030 	.word	0xff200030
				BX LR

HEX_write_ASM:	PUSH {LR}
				LDR R2, =HEX_BASE0		// contains the address for displays 0-3
				LDR R3, =HEX_BASE4		// contains the address for displays 4-5
				LDR R7, =HEX_VAL		// contains array of bytes of the bit values for numbers 0-15
     3b0:	00000398 	.word	0x00000398

000003b4 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     3b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     3b8:	e3a01000 	mov	r1, #0
	MOV R2, #1
     3bc:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     3c0:	e5907000 	ldr	r7, [r0]
	B LOOP
     3c4:	eaffffff 	b	3c8 <LOOP>

000003c8 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     3c8:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     3cc:	0a000000 	beq	3d4 <CONTINUE>
	BL CONFIG
     3d0:	eb000004 	bl	3e8 <CONFIG>

000003d4 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     3d4:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     3d8:	e3510004 	cmp	r1, #4
	BLT LOOP
     3dc:	bafffff9 	blt	3c8 <LOOP>

000003e0 <DONE>:

DONE:
	POP {R4-R7, LR}
     3e0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     3e4:	e12fff1e 	bx	lr

000003e8 <CONFIG>:


CONFIG:
	PUSH {LR}
     3e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     3ec:	e59f3148 	ldr	r3, [pc, #328]	; 53c <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     3f0:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     3f4:	eb000005 	bl	410 <DISABLE>
	BL SET_LOAD_VAL
     3f8:	eb000008 	bl	420 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     3fc:	eb00000e 	bl	43c <SET_LOAD_BIT>
	BL SET_INT_BIT
     400:	eb000013 	bl	454 <SET_INT_BIT>
	BL SET_EN_BIT
     404:	eb000019 	bl	470 <SET_EN_BIT>
	
	POP {LR}
     408:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     40c:	e12fff1e 	bx	lr

00000410 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     410:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     414:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     418:	e5845008 	str	r5, [r4, #8]
	BX LR
     41c:	e12fff1e 	bx	lr

00000420 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     420:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     424:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     428:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     42c:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     430:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     434:	e5845000 	str	r5, [r4]
	BX LR
     438:	e12fff1e 	bx	lr

0000043c <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     43c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     440:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     444:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     448:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     44c:	e5845008 	str	r5, [r4, #8]
	BX LR
     450:	e12fff1e 	bx	lr

00000454 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     454:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     458:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     45c:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     460:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     464:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     468:	e5845008 	str	r5, [r4, #8]
	BX LR
     46c:	e12fff1e 	bx	lr

00000470 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     470:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     474:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     478:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     47c:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     480:	e5845008 	str	r5, [r4, #8]
	BX LR
     484:	e12fff1e 	bx	lr

00000488 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     488:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     48c:	e3a01000 	mov	r1, #0
	MOV R2, #1
     490:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     494:	eaffffff 	b	498 <CLEAR_INT_LOOP>

00000498 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     498:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     49c:	0a000000 	beq	4a4 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     4a0:	eb000005 	bl	4bc <CLEAR_INT>

000004a4 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     4a4:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     4a8:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     4ac:	bafffff9 	blt	498 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     4b0:	eaffffff 	b	4b4 <CLEAR_INT_DONE>

000004b4 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     4b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     4b8:	e12fff1e 	bx	lr

000004bc <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     4bc:	e59f3078 	ldr	r3, [pc, #120]	; 53c <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     4c0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     4c4:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     4c8:	e12fff1e 	bx	lr

000004cc <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     4cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     4d0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     4d4:	e3a01000 	mov	r1, #0
	MOV R2, #1
     4d8:	e3a02001 	mov	r2, #1
	MOV R4, #0
     4dc:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     4e0:	eaffffff 	b	4e4 <READ_INT_LOOP>

000004e4 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     4e4:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     4e8:	0a000000 	beq	4f0 <READ_INT_CONTINUE>
	BL READ_INT
     4ec:	eb000008 	bl	514 <READ_INT>

000004f0 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     4f0:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     4f4:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     4f8:	0a000001 	beq	504 <READ_INT_DONE>
	LSL R4, R4, #1
     4fc:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     500:	eafffff7 	b	4e4 <READ_INT_LOOP>

00000504 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     504:	e1a00004 	mov	r0, r4
	POP {R4}
     508:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     50c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     510:	e12fff1e 	bx	lr

00000514 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     514:	e59f3020 	ldr	r3, [pc, #32]	; 53c <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     518:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     51c:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     520:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     524:	e0244003 	eor	r4, r4, r3
	BX LR
     528:	e12fff1e 	bx	lr

0000052c <HPS_TIM_BASE>:
     52c:	ffc08000 	.word	0xffc08000
     530:	ffc09000 	.word	0xffc09000
     534:	ffd00000 	.word	0xffd00000
     538:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     53c:	0000052c 	.word	0x0000052c

00000540 <read_PB_data_ASM>:
			.global PB_clear_edgecp_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM
			
read_PB_data_ASM:
			LDR R1, =PB_DATA
     540:	e59f1080 	ldr	r1, [pc, #128]	; 5c8 <disable_PB_INT_ASM+0x14>
			LDR R0, [R1]		// load the data into R0 
     544:	e5910000 	ldr	r0, [r1]
			BX LR				// return data and branch back
     548:	e12fff1e 	bx	lr

0000054c <PB_data_is_pressed_ASM>:
			
PB_data_is_pressed_ASM:
			LDR R1, =PB_DATA	
     54c:	e59f1074 	ldr	r1, [pc, #116]	; 5c8 <disable_PB_INT_ASM+0x14>
			LDR R1, [R1]		// repeat read_PD_data_ASM
     550:	e5911000 	ldr	r1, [r1]
			AND R2, R2, R0
     554:	e0022000 	and	r2, r2, r0
			CMP R2, R0			// compare the values with one another to see if a button was pressed
     558:	e1520000 	cmp	r2, r0
			MOVEQ R0, #1		// if R2 = R0 move 1 into R0 to return true
     55c:	03a00001 	moveq	r0, #1
			MOVNE R0, #0		// if R2 != R0 move 0 into R0 to return false 
     560:	13a00000 	movne	r0, #0
			BX LR
     564:	e12fff1e 	bx	lr

00000568 <read_PB_edgecap_ASM>:
			
read_PB_edgecap_ASM:
			LDR R1, =PB_EDGECAP
     568:	e59f105c 	ldr	r1, [pc, #92]	; 5cc <disable_PB_INT_ASM+0x18>
			LDR R0, [R1]		// load the data into R0 
     56c:	e5910000 	ldr	r0, [r1]
			AND R0, R0, #0xF	// return only the edge bits which is the last 4
     570:	e200000f 	and	r0, r0, #15
			BX LR 				// return data and branch back
     574:	e12fff1e 	bx	lr

00000578 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:		
			LDR R1, =PB_EDGECAP	// repeat the process as above except for PB_EDGECAP
     578:	e59f104c 	ldr	r1, [pc, #76]	; 5cc <disable_PB_INT_ASM+0x18>
			LDR R1, [R1]		
     57c:	e5911000 	ldr	r1, [r1]
			AND R2, R2, R0
     580:	e0022000 	and	r2, r2, r0
			CMP R2, R0			
     584:	e1520000 	cmp	r2, r0
			MOVEQ R0, #1		
     588:	03a00001 	moveq	r0, #1
			MOVNE R0, #0		
     58c:	13a00000 	movne	r0, #0
			BX LR
     590:	e12fff1e 	bx	lr

00000594 <PB_clear_edgecp_ASM>:
			
PB_clear_edgecp_ASM:
			LDR R1, =PB_EDGECAP // load the address
     594:	e59f1030 	ldr	r1, [pc, #48]	; 5cc <disable_PB_INT_ASM+0x18>
			MOV R0, #0xF		// move all 1's to address of edgecapture in order to reset it 
     598:	e3a0000f 	mov	r0, #15
			STR R0, [R1]
     59c:	e5810000 	str	r0, [r1]
			BX LR
     5a0:	e12fff1e 	bx	lr

000005a4 <enable_PB_INT_ASM>:
			
enable_PB_INT_ASM:
			LDR R1, =PB_MASK	
     5a4:	e59f1024 	ldr	r1, [pc, #36]	; 5d0 <disable_PB_INT_ASM+0x1c>
			AND R2, R0, #0xF	// we only want the last 4 numbers since there are b
     5a8:	e200200f 	and	r2, r0, #15
			STR R2, [R1]		// store it back into the PB_MASK to enable
     5ac:	e5812000 	str	r2, [r1]
			BX LR			
     5b0:	e12fff1e 	bx	lr

000005b4 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
			LDR R1, =PB_MASK
     5b4:	e59f1014 	ldr	r1, [pc, #20]	; 5d0 <disable_PB_INT_ASM+0x1c>
			LDR R2, [R1]		// load all the mask bits
     5b8:	e5912000 	ldr	r2, [r1]
			BIC R1, R1, R0		// clear all the bits corresponding to R0
     5bc:	e1c11000 	bic	r1, r1, r0
			STR R1, [R2]		// store it back into the mask to disable
     5c0:	e5821000 	str	r1, [r2]
			BX LR				
     5c4:	e12fff1e 	bx	lr
			.global PB_clear_edgecp_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM
			
read_PB_data_ASM:
			LDR R1, =PB_DATA
     5c8:	ff200050 	.word	0xff200050
			MOVEQ R0, #1		// if R2 = R0 move 1 into R0 to return true
			MOVNE R0, #0		// if R2 != R0 move 0 into R0 to return false 
			BX LR
			
read_PB_edgecap_ASM:
			LDR R1, =PB_EDGECAP
     5cc:	ff20005c 	.word	0xff20005c
			MOV R0, #0xF		// move all 1's to address of edgecapture in order to reset it 
			STR R0, [R1]
			BX LR
			
enable_PB_INT_ASM:
			LDR R1, =PB_MASK	
     5d0:	ff200058 	.word	0xff200058

000005d4 <read_LEDs_ASM>:
			.equ LED_BASE, 0xFF200000
			.global read_LEDs_ASM
			.global write_LEDs_ASM

read_LEDs_ASM:
			LDR R1, =LED_BASE
     5d4:	e59f1010 	ldr	r1, [pc, #16]	; 5ec <write_LEDs_ASM+0xc>
			LDR R0, [R1]
     5d8:	e5910000 	ldr	r0, [r1]
			BX LR
     5dc:	e12fff1e 	bx	lr

000005e0 <write_LEDs_ASM>:

write_LEDs_ASM:
			LDR R1, =LED_BASE
     5e0:	e59f1004 	ldr	r1, [pc, #4]	; 5ec <write_LEDs_ASM+0xc>
			STR R0, [R1]
     5e4:	e5810000 	str	r0, [r1]
			BX LR
     5e8:	e12fff1e 	bx	lr
			.equ LED_BASE, 0xFF200000
			.global read_LEDs_ASM
			.global write_LEDs_ASM

read_LEDs_ASM:
			LDR R1, =LED_BASE
     5ec:	ff200000 	.word	0xff200000

000005f0 <read_slider_switches_ASM>:
			.text
			.equ SW_BASE, 0xFF200040
			.global read_slider_switches_ASM

read_slider_switches_ASM:
			LDR R1, =SW_BASE
     5f0:	e59f1004 	ldr	r1, [pc, #4]	; 5fc <read_slider_switches_ASM+0xc>
			LDR R0, [R1]
     5f4:	e5910000 	ldr	r0, [r1]
			BX LR
     5f8:	e12fff1e 	bx	lr
			.text
			.equ SW_BASE, 0xFF200040
			.global read_slider_switches_ASM

read_slider_switches_ASM:
			LDR R1, =SW_BASE
     5fc:	ff200040 	.word	0xff200040

00000600 <hps_tim0_int_flag>:
     600:	00000000 	.word	0x00000000

00000604 <fpga_pb_int_flag>:
     604:	00000004 	.word	0x00000004

00000608 <A9_PRIV_TIM_ISR>:

fpga_pb_int_flag:
	.word 0x4

A9_PRIV_TIM_ISR:
	BX LR
     608:	e12fff1e 	bx	lr

0000060c <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     60c:	e12fff1e 	bx	lr

00000610 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     610:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
     614:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     618:	ebffff9a 	bl	488 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     61c:	e59f00b4 	ldr	r0, [pc, #180]	; 6d8 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     620:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     624:	e5801000 	str	r1, [r0]

	POP {LR}
     628:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     62c:	e12fff1e 	bx	lr

00000630 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     630:	e12fff1e 	bx	lr

00000634 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     634:	e12fff1e 	bx	lr

00000638 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     638:	e12fff1e 	bx	lr

0000063c <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     63c:	e12fff1e 	bx	lr

00000640 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
     640:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =0xFF200050		// load the base address
     644:	e59f1090 	ldr	r1, [pc, #144]	; 6dc <FPGA_PS2_DUAL_ISR+0x8>
	LDR R2, [R1, #0xC]		// load the edgecap address
     648:	e591200c 	ldr	r2, [r1, #12]
	MOV R0, #0xF			// move all 1's to address of edgecapture in order to reset it  
     64c:	e3a0000f 	mov	r0, #15
	STR R0, [R1, #0xC]		// clear the edgecap 
     650:	e581000c 	str	r0, [r1, #12]
	LDR R0, =hps_tim0_int_flag	// load the flag used in example 1 return if a button was pressed 
     654:	e59f007c 	ldr	r0, [pc, #124]	; 6d8 <FPGA_PS2_DUAL_ISR+0x4>

00000658 <PB0_CHECK>:

PB0_CHECK:
	MOV R3, #0x1 			// since one hot encoded button one is at bit 1
     658:	e3a03001 	mov	r3, #1
	AND R3, R3, R1			// check if it is button 0
     65c:	e0033001 	and	r3, r3, r1
	CMP R3, R1				
     660:	e1530001 	cmp	r3, r1
	BEQ PB1_CHECK
     664:	0a000002 	beq	674 <PB1_CHECK>
	MOV R2, #0				// return button number that was pressed
     668:	e3a02000 	mov	r2, #0
	STR R2, [R0]			// store it into the timer flag
     66c:	e5802000 	str	r2, [r0]
	B END_PB
     670:	ea00000f 	b	6b4 <END_PB>

00000674 <PB1_CHECK>:

PB1_CHECK:
	MOV R3, #0x2			// encoding for pb 1
     674:	e3a03002 	mov	r3, #2
	AND R3, R3, R1			// check if button is 1
     678:	e0033001 	and	r3, r3, r1
	CMP R3, R1
     67c:	e1530001 	cmp	r3, r1
	BEQ PB2_CHECK
     680:	0a000002 	beq	690 <PB2_CHECK>
	MOV R2, #1				// return button number that was pressed
     684:	e3a02001 	mov	r2, #1
	STR R2, [R0]			// store it into the timer flag
     688:	e5802000 	str	r2, [r0]
	B END_PB
     68c:	ea000008 	b	6b4 <END_PB>

00000690 <PB2_CHECK>:

PB2_CHECK:
	MOV R3, #0x4			// encoding for pb 2
     690:	e3a03004 	mov	r3, #4
	AND R3, R3, R1			// check if button is 2
     694:	e0033001 	and	r3, r3, r1
	CMP R3, R1
     698:	e1530001 	cmp	r3, r1
	BEQ PB3_CHECK
     69c:	0a000002 	beq	6ac <PB3_CHECK>
	MOV R2, #1				// return button number that was pressed
     6a0:	e3a02001 	mov	r2, #1
	STR R2, [R0]			// store it into the timer flag
     6a4:	e5802000 	str	r2, [r0]
	B END_PB
     6a8:	ea000001 	b	6b4 <END_PB>

000006ac <PB3_CHECK>:

PB3_CHECK:
	MOV R2, #1				// return button number that was pressed
     6ac:	e3a02001 	mov	r2, #1
	STR R2, [R0]			// store it into the timer flag
     6b0:	e5802000 	str	r2, [r0]

000006b4 <END_PB>:

END_PB:
	POP {LR}
     6b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     6b8:	e12fff1e 	bx	lr

000006bc <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     6bc:	e12fff1e 	bx	lr

000006c0 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     6c0:	e12fff1e 	bx	lr

000006c4 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     6c4:	e12fff1e 	bx	lr

000006c8 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     6c8:	e12fff1e 	bx	lr

000006cc <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     6cc:	e12fff1e 	bx	lr

000006d0 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     6d0:	e12fff1e 	bx	lr

000006d4 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     6d4:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim0_int_flag
     6d8:	00000600 	.word	0x00000600
FPGA_INTERVAL_TIM_ISR:
	BX LR
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
	LDR R1, =0xFF200050		// load the base address
     6dc:	ff200050 	.word	0xff200050

000006e0 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     6e0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     6e4:	e28db000 	add	r11, sp, #0
     6e8:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     6ec:	e3a030d3 	mov	r3, #211	; 0xd3
     6f0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     6f4:	e51b3008 	ldr	r3, [r11, #-8]
     6f8:	e129f003 	msr	CPSR_fc, r3
}
     6fc:	e28bd000 	add	sp, r11, #0
     700:	e8bd0800 	ldmfd	sp!, {r11}
     704:	e12fff1e 	bx	lr

00000708 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     708:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     70c:	e28db000 	add	r11, sp, #0
     710:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     714:	e3a03053 	mov	r3, #83	; 0x53
     718:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     71c:	e51b3008 	ldr	r3, [r11, #-8]
     720:	e129f003 	msr	CPSR_fc, r3
}
     724:	e28bd000 	add	sp, r11, #0
     728:	e8bd0800 	ldmfd	sp!, {r11}
     72c:	e12fff1e 	bx	lr

00000730 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     730:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     734:	e28db000 	add	r11, sp, #0
     738:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     73c:	e3e03007 	mvn	r3, #7
     740:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     744:	e3a030d2 	mov	r3, #210	; 0xd2
     748:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     74c:	e51b300c 	ldr	r3, [r11, #-12]
     750:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     754:	e51b3008 	ldr	r3, [r11, #-8]
     758:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     75c:	e3a030d3 	mov	r3, #211	; 0xd3
     760:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     764:	e51b300c 	ldr	r3, [r11, #-12]
     768:	e129f003 	msr	CPSR_fc, r3
}
     76c:	e28bd000 	add	sp, r11, #0
     770:	e8bd0800 	ldmfd	sp!, {r11}
     774:	e12fff1e 	bx	lr

00000778 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     778:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     77c:	e28db000 	add	r11, sp, #0
     780:	e24dd01c 	sub	sp, sp, #28
     784:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     788:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     78c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     790:	e1a031c3 	asr	r3, r3, #3
     794:	e3c33003 	bic	r3, r3, #3
     798:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     79c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     7a0:	e203301f 	and	r3, r3, #31
     7a4:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     7a8:	e3a02001 	mov	r2, #1
     7ac:	e51b300c 	ldr	r3, [r11, #-12]
     7b0:	e1a03312 	lsl	r3, r2, r3
     7b4:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     7b8:	e51b3008 	ldr	r3, [r11, #-8]
     7bc:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     7c0:	e2433c03 	sub	r3, r3, #768	; 0x300
     7c4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     7c8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     7cc:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     7d0:	e5921000 	ldr	r1, [r2]
     7d4:	e51b2010 	ldr	r2, [r11, #-16]
     7d8:	e1812002 	orr	r2, r1, r2
     7dc:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     7e0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     7e4:	e3c33003 	bic	r3, r3, #3
     7e8:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     7ec:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     7f0:	e2033003 	and	r3, r3, #3
     7f4:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     7f8:	e51b2008 	ldr	r2, [r11, #-8]
     7fc:	e51b300c 	ldr	r3, [r11, #-12]
     800:	e0823003 	add	r3, r2, r3
     804:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     808:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     80c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     810:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     814:	e6ef2072 	uxtb	r2, r2
     818:	e5c32000 	strb	r2, [r3]
}
     81c:	e28bd000 	add	sp, r11, #0
     820:	e8bd0800 	ldmfd	sp!, {r11}
     824:	e12fff1e 	bx	lr

00000828 <config_GIC>:

void config_GIC(int len, int* IDs) {
     828:	e92d4800 	push	{r11, lr}
     82c:	e28db004 	add	r11, sp, #4
     830:	e24dd010 	sub	sp, sp, #16
     834:	e50b0010 	str	r0, [r11, #-16]
     838:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     83c:	e3a03000 	mov	r3, #0
     840:	e50b3008 	str	r3, [r11, #-8]
     844:	ea00000a 	b	874 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     848:	e51b3008 	ldr	r3, [r11, #-8]
     84c:	e1a03103 	lsl	r3, r3, #2
     850:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     854:	e0823003 	add	r3, r2, r3
     858:	e5933000 	ldr	r3, [r3]
     85c:	e1a00003 	mov	r0, r3
     860:	e3a01001 	mov	r1, #1
     864:	ebffffc3 	bl	778 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     868:	e51b3008 	ldr	r3, [r11, #-8]
     86c:	e2833001 	add	r3, r3, #1
     870:	e50b3008 	str	r3, [r11, #-8]
     874:	e51b2008 	ldr	r2, [r11, #-8]
     878:	e51b3010 	ldr	r3, [r11, #-16]
     87c:	e1520003 	cmp	r2, r3
     880:	bafffff0 	blt	848 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     884:	e30c3104 	movw	r3, #49412	; 0xc104
     888:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     88c:	e30f2fff 	movw	r2, #65535	; 0xffff
     890:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     894:	e3a03cc1 	mov	r3, #49408	; 0xc100
     898:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     89c:	e3a02001 	mov	r2, #1
     8a0:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     8a4:	e3a03a0d 	mov	r3, #53248	; 0xd000
     8a8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     8ac:	e3a02001 	mov	r2, #1
     8b0:	e5832000 	str	r2, [r3]
}
     8b4:	e24bd004 	sub	sp, r11, #4
     8b8:	e8bd8800 	pop	{r11, pc}

000008bc <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     8bc:	e24ee004 	sub	lr, lr, #4
     8c0:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     8c4:	e28db018 	add	r11, sp, #24
     8c8:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     8cc:	e30c310c 	movw	r3, #49420	; 0xc10c
     8d0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     8d4:	e5933000 	ldr	r3, [r3]
     8d8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     8dc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     8e0:	e3530053 	cmp	r3, #83	; 0x53
     8e4:	0a00003d 	beq	9e0 <__cs3_isr_irq+0x124>
     8e8:	e3530053 	cmp	r3, #83	; 0x53
     8ec:	ca000011 	bgt	938 <__cs3_isr_irq+0x7c>
     8f0:	e353004e 	cmp	r3, #78	; 0x4e
     8f4:	0a000031 	beq	9c0 <__cs3_isr_irq+0x104>
     8f8:	e353004e 	cmp	r3, #78	; 0x4e
     8fc:	ca000006 	bgt	91c <__cs3_isr_irq+0x60>
     900:	e3530048 	cmp	r3, #72	; 0x48
     904:	0a000029 	beq	9b0 <__cs3_isr_irq+0xf4>
     908:	e3530049 	cmp	r3, #73	; 0x49
     90c:	0a000029 	beq	9b8 <__cs3_isr_irq+0xfc>
     910:	e353001d 	cmp	r3, #29
     914:	0a000019 	beq	980 <__cs3_isr_irq+0xc4>
     918:	ea000036 	b	9f8 <__cs3_isr_irq+0x13c>
     91c:	e3530050 	cmp	r3, #80	; 0x50
     920:	0a00002a 	beq	9d0 <__cs3_isr_irq+0x114>
     924:	e3530050 	cmp	r3, #80	; 0x50
     928:	ba000026 	blt	9c8 <__cs3_isr_irq+0x10c>
     92c:	e3530051 	cmp	r3, #81	; 0x51
     930:	0a000028 	beq	9d8 <__cs3_isr_irq+0x11c>
     934:	ea00002f 	b	9f8 <__cs3_isr_irq+0x13c>
     938:	e35300c7 	cmp	r3, #199	; 0xc7
     93c:	0a000013 	beq	990 <__cs3_isr_irq+0xd4>
     940:	e35300c7 	cmp	r3, #199	; 0xc7
     944:	ca000006 	bgt	964 <__cs3_isr_irq+0xa8>
     948:	e3530059 	cmp	r3, #89	; 0x59
     94c:	0a000027 	beq	9f0 <__cs3_isr_irq+0x134>
     950:	e35300c5 	cmp	r3, #197	; 0xc5
     954:	0a00000b 	beq	988 <__cs3_isr_irq+0xcc>
     958:	e3530054 	cmp	r3, #84	; 0x54
     95c:	0a000021 	beq	9e8 <__cs3_isr_irq+0x12c>
     960:	ea000024 	b	9f8 <__cs3_isr_irq+0x13c>
     964:	e35300c9 	cmp	r3, #201	; 0xc9
     968:	0a00000c 	beq	9a0 <__cs3_isr_irq+0xe4>
     96c:	e35300c9 	cmp	r3, #201	; 0xc9
     970:	ba000008 	blt	998 <__cs3_isr_irq+0xdc>
     974:	e35300ca 	cmp	r3, #202	; 0xca
     978:	0a00000a 	beq	9a8 <__cs3_isr_irq+0xec>
     97c:	ea00001d 	b	9f8 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     980:	ebffff20 	bl	608 <A9_PRIV_TIM_ISR>
     984:	ea00001c 	b	9fc <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     988:	ebffff1f 	bl	60c <HPS_GPIO1_ISR>
     98c:	ea00001a 	b	9fc <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     990:	ebffff1e 	bl	610 <HPS_TIM0_ISR>
     994:	ea000018 	b	9fc <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     998:	ebffff24 	bl	630 <HPS_TIM1_ISR>
     99c:	ea000016 	b	9fc <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     9a0:	ebffff23 	bl	634 <HPS_TIM2_ISR>
     9a4:	ea000014 	b	9fc <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     9a8:	ebffff22 	bl	638 <HPS_TIM3_ISR>
     9ac:	ea000012 	b	9fc <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     9b0:	ebffff21 	bl	63c <FPGA_INTERVAL_TIM_ISR>
     9b4:	ea000010 	b	9fc <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     9b8:	ebffff20 	bl	640 <FPGA_PB_KEYS_ISR>
     9bc:	ea00000e 	b	9fc <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     9c0:	ebffff3d 	bl	6bc <FPGA_Audio_ISR>
     9c4:	ea00000c 	b	9fc <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     9c8:	ebffff3c 	bl	6c0 <FPGA_PS2_ISR>
     9cc:	ea00000a 	b	9fc <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     9d0:	ebffff3b 	bl	6c4 <FPGA_JTAG_ISR>
     9d4:	ea000008 	b	9fc <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     9d8:	ebffff3a 	bl	6c8 <FPGA_IrDA_ISR>
     9dc:	ea000006 	b	9fc <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     9e0:	ebffff39 	bl	6cc <FPGA_JP1_ISR>
     9e4:	ea000004 	b	9fc <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     9e8:	ebffff38 	bl	6d0 <FPGA_JP2_ISR>
     9ec:	ea000002 	b	9fc <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     9f0:	ebffff37 	bl	6d4 <FPGA_PS2_DUAL_ISR>
     9f4:	ea000000 	b	9fc <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     9f8:	eafffffe 	b	9f8 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     9fc:	e30c3110 	movw	r3, #49424	; 0xc110
     a00:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a04:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     a08:	e5832000 	str	r2, [r3]
}
     a0c:	e24bd018 	sub	sp, r11, #24
     a10:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000a14 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     a14:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a18:	e28db000 	add	r11, sp, #0
	while(1);
     a1c:	eafffffe 	b	a1c <__cs3_reset+0x8>

00000a20 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     a20:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a24:	e28db000 	add	r11, sp, #0
	while(1);
     a28:	eafffffe 	b	a28 <__cs3_isr_undef+0x8>

00000a2c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     a2c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a30:	e28db000 	add	r11, sp, #0
	while(1);
     a34:	eafffffe 	b	a34 <__cs3_isr_swi+0x8>

00000a38 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     a38:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a3c:	e28db000 	add	r11, sp, #0
	while(1);
     a40:	eafffffe 	b	a40 <__cs3_isr_pabort+0x8>

00000a44 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     a44:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a48:	e28db000 	add	r11, sp, #0
	while(1);
     a4c:	eafffffe 	b	a4c <__cs3_isr_dabort+0x8>

00000a50 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     a50:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a54:	e28db000 	add	r11, sp, #0
	while(1);
     a58:	eafffffe 	b	a58 <__cs3_isr_fiq+0x8>

00000a5c <fix_bug>:
}

void fix_bug() {
     a5c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a60:	e28db000 	add	r11, sp, #0
     a64:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     a68:	e30d3198 	movw	r3, #53656	; 0xd198
     a6c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a70:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     a74:	e51b3008 	ldr	r3, [r11, #-8]
     a78:	e3a02703 	mov	r2, #786432	; 0xc0000
     a7c:	e5832000 	str	r2, [r3]
}
     a80:	e28bd000 	add	sp, r11, #0
     a84:	e8bd0800 	ldmfd	sp!, {r11}
     a88:	e12fff1e 	bx	lr

00000a8c <int_setup>:

void int_setup(int len, int* IDs) {
     a8c:	e92d4800 	push	{r11, lr}
     a90:	e28db004 	add	r11, sp, #4
     a94:	e24dd008 	sub	sp, sp, #8
     a98:	e50b0008 	str	r0, [r11, #-8]
     a9c:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     aa0:	ebffff0e 	bl	6e0 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     aa4:	ebffff21 	bl	730 <set_A9_IRQ_stack>
	fix_bug();
     aa8:	ebffffeb 	bl	a5c <fix_bug>
	config_GIC(len, IDs);
     aac:	e51b0008 	ldr	r0, [r11, #-8]
     ab0:	e51b100c 	ldr	r1, [r11, #-12]
     ab4:	ebffff5b 	bl	828 <config_GIC>
	enable_A9_interrupts();
     ab8:	ebffff12 	bl	708 <enable_A9_interrupts>
}
     abc:	e24bd004 	sub	sp, r11, #4
     ac0:	e8bd8800 	pop	{r11, pc}

00000ac4 <main>:
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/pushbuttons.h"

int main() {
     ac4:	e92d4800 	push	{r11, lr}
     ac8:	e28db004 	add	r11, sp, #4
     acc:	e24dd030 	sub	sp, sp, #48	; 0x30
	int_setup(2, (int []){73, 199});
     ad0:	e3013234 	movw	r3, #4660	; 0x1234
     ad4:	e3403000 	movt	r3, #0
     ad8:	e24b201c 	sub	r2, r11, #28
     adc:	e8930003 	ldm	r3, {r0, r1}
     ae0:	e8820003 	stm	r2, {r0, r1}
     ae4:	e24b301c 	sub	r3, r11, #28
     ae8:	e3a00002 	mov	r0, #2
     aec:	e1a01003 	mov	r1, r3
     af0:	ebffffe5 	bl	a8c <int_setup>

	// enable the interrupts for pushbuttons
	enable_PB_INT_ASM(PB0 | PB2 | PB3);
     af4:	e3a00007 	mov	r0, #7
     af8:	ebfffea9 	bl	5a4 <enable_PB_INT_ASM>
	
	// initialize time parameters
	HPS_TIM_config_t hps_tim;

	hps_tim.tim = TIM0;
     afc:	e3a03001 	mov	r3, #1
     b00:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.timeout = 1000;
     b04:	e3a03ffa 	mov	r3, #1000	; 0x3e8
     b08:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.LD_en = 1;
     b0c:	e3a03001 	mov	r3, #1
     b10:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.INT_en = 1;
     b14:	e3a03001 	mov	r3, #1
     b18:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.enable = 1;
     b1c:	e3a03001 	mov	r3, #1
     b20:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

	HPS_TIM_config_ASM(&hps_tim);
     b24:	e24b3030 	sub	r3, r11, #48	; 0x30
     b28:	e1a00003 	mov	r0, r3
     b2c:	ebfffe20 	bl	3b4 <HPS_TIM_config_ASM>

	HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
     b30:	e3a0003f 	mov	r0, #63	; 0x3f
     b34:	e3a01000 	mov	r1, #0
     b38:	ebfffdfb 	bl	32c <HEX_write_ASM>

	int ms = 0, sec = 0, min = 0, timer_on = 1;
     b3c:	e3a03000 	mov	r3, #0
     b40:	e50b3008 	str	r3, [r11, #-8]
     b44:	e3a03000 	mov	r3, #0
     b48:	e50b300c 	str	r3, [r11, #-12]
     b4c:	e3a03000 	mov	r3, #0
     b50:	e50b3010 	str	r3, [r11, #-16]
     b54:	e3a03001 	mov	r3, #1
     b58:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     b5c:	ea000000 	b	b64 <main+0xa0>
				HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
			}
			fpga_pb_int_flag = 4;

		}
	}
     b60:	e1a00000 	nop			; (mov r0, r0)

	HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);

	int ms = 0, sec = 0, min = 0, timer_on = 1;
	while(1) {
		if(hps_tim0_int_flag) {
     b64:	e3003600 	movw	r3, #1536	; 0x600
     b68:	e3403000 	movt	r3, #0
     b6c:	e5933000 	ldr	r3, [r3]
     b70:	e3530000 	cmp	r3, #0
     b74:	0a00007e 	beq	d74 <main+0x2b0>
			hps_tim0_int_flag = 0;
     b78:	e3003600 	movw	r3, #1536	; 0x600
     b7c:	e3403000 	movt	r3, #0
     b80:	e3a02000 	mov	r2, #0
     b84:	e5832000 	str	r2, [r3]
			if (HPS_TIM_read_INT_ASM(TIM0) && timer_on) {
     b88:	e3a00001 	mov	r0, #1
     b8c:	ebfffe4e 	bl	4cc <HPS_TIM_read_INT_ASM>
     b90:	e1a03000 	mov	r3, r0
     b94:	e3530000 	cmp	r3, #0
     b98:	0a000075 	beq	d74 <main+0x2b0>
     b9c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     ba0:	e3530000 	cmp	r3, #0
     ba4:	0a000072 	beq	d74 <main+0x2b0>
				HPS_TIM_clear_INT_ASM(TIM0);
     ba8:	e3a00001 	mov	r0, #1
     bac:	ebfffe35 	bl	488 <HPS_TIM_clear_INT_ASM>
				// count in increments of 10 ms
				ms += 10;
     bb0:	e51b3008 	ldr	r3, [r11, #-8]
     bb4:	e283300a 	add	r3, r3, #10
     bb8:	e50b3008 	str	r3, [r11, #-8]
				// 1000ms = 1s so we increment seconds and reset ms
				if (ms >= 1000){
     bbc:	e51b2008 	ldr	r2, [r11, #-8]
     bc0:	e30033e7 	movw	r3, #999	; 0x3e7
     bc4:	e1520003 	cmp	r2, r3
     bc8:	da000005 	ble	be4 <main+0x120>
					ms -= 1000;
     bcc:	e51b3008 	ldr	r3, [r11, #-8]
     bd0:	e2433ffa 	sub	r3, r3, #1000	; 0x3e8
     bd4:	e50b3008 	str	r3, [r11, #-8]
					sec++;
     bd8:	e51b300c 	ldr	r3, [r11, #-12]
     bdc:	e2833001 	add	r3, r3, #1
     be0:	e50b300c 	str	r3, [r11, #-12]
				}
				// 1s = 1min so we increment minutes and reset sec
				if (sec >= 60){
     be4:	e51b300c 	ldr	r3, [r11, #-12]
     be8:	e353003b 	cmp	r3, #59	; 0x3b
     bec:	da000005 	ble	c08 <main+0x144>
					sec -= 60;
     bf0:	e51b300c 	ldr	r3, [r11, #-12]
     bf4:	e243303c 	sub	r3, r3, #60	; 0x3c
     bf8:	e50b300c 	str	r3, [r11, #-12]
					min++;
     bfc:	e51b3010 	ldr	r3, [r11, #-16]
     c00:	e2833001 	add	r3, r3, #1
     c04:	e50b3010 	str	r3, [r11, #-16]
				}
				// reset minutes if it goes above 60
				if (min >= 60){
     c08:	e51b3010 	ldr	r3, [r11, #-16]
     c0c:	e353003b 	cmp	r3, #59	; 0x3b
     c10:	da000002 	ble	c20 <main+0x15c>
					min -= 60;
     c14:	e51b3010 	ldr	r3, [r11, #-16]
     c18:	e243303c 	sub	r3, r3, #60	; 0x3c
     c1c:	e50b3010 	str	r3, [r11, #-16]
				}

				// find the appropriate values for the hex displays
				HEX_write_ASM(HEX0, (ms % 100) / 10);
     c20:	e51b2008 	ldr	r2, [r11, #-8]
     c24:	e308351f 	movw	r3, #34079	; 0x851f
     c28:	e34531eb 	movt	r3, #20971	; 0x51eb
     c2c:	e0c31293 	smull	r1, r3, r3, r2
     c30:	e1a012c3 	asr	r1, r3, #5
     c34:	e1a03fc2 	asr	r3, r2, #31
     c38:	e0633001 	rsb	r3, r3, r1
     c3c:	e3a01064 	mov	r1, #100	; 0x64
     c40:	e0030391 	mul	r3, r1, r3
     c44:	e0633002 	rsb	r3, r3, r2
     c48:	e3062667 	movw	r2, #26215	; 0x6667
     c4c:	e3462666 	movt	r2, #26214	; 0x6666
     c50:	e0c21392 	smull	r1, r2, r2, r3
     c54:	e1a02142 	asr	r2, r2, #2
     c58:	e1a03fc3 	asr	r3, r3, #31
     c5c:	e0633002 	rsb	r3, r3, r2
     c60:	e6ef3073 	uxtb	r3, r3
     c64:	e3a00001 	mov	r0, #1
     c68:	e1a01003 	mov	r1, r3
     c6c:	ebfffdae 	bl	32c <HEX_write_ASM>
				HEX_write_ASM(HEX1, ms / 100);
     c70:	e51b2008 	ldr	r2, [r11, #-8]
     c74:	e308351f 	movw	r3, #34079	; 0x851f
     c78:	e34531eb 	movt	r3, #20971	; 0x51eb
     c7c:	e0c31293 	smull	r1, r3, r3, r2
     c80:	e1a012c3 	asr	r1, r3, #5
     c84:	e1a03fc2 	asr	r3, r2, #31
     c88:	e0633001 	rsb	r3, r3, r1
     c8c:	e6ef3073 	uxtb	r3, r3
     c90:	e3a00002 	mov	r0, #2
     c94:	e1a01003 	mov	r1, r3
     c98:	ebfffda3 	bl	32c <HEX_write_ASM>
				HEX_write_ASM(HEX2, sec % 10);
     c9c:	e51b100c 	ldr	r1, [r11, #-12]
     ca0:	e3063667 	movw	r3, #26215	; 0x6667
     ca4:	e3463666 	movt	r3, #26214	; 0x6666
     ca8:	e0c32193 	smull	r2, r3, r3, r1
     cac:	e1a02143 	asr	r2, r3, #2
     cb0:	e1a03fc1 	asr	r3, r1, #31
     cb4:	e0632002 	rsb	r2, r3, r2
     cb8:	e1a03002 	mov	r3, r2
     cbc:	e1a03103 	lsl	r3, r3, #2
     cc0:	e0833002 	add	r3, r3, r2
     cc4:	e1a03083 	lsl	r3, r3, #1
     cc8:	e0632001 	rsb	r2, r3, r1
     ccc:	e6ef3072 	uxtb	r3, r2
     cd0:	e3a00004 	mov	r0, #4
     cd4:	e1a01003 	mov	r1, r3
     cd8:	ebfffd93 	bl	32c <HEX_write_ASM>
				HEX_write_ASM(HEX3, sec / 10);
     cdc:	e51b200c 	ldr	r2, [r11, #-12]
     ce0:	e3063667 	movw	r3, #26215	; 0x6667
     ce4:	e3463666 	movt	r3, #26214	; 0x6666
     ce8:	e0c31293 	smull	r1, r3, r3, r2
     cec:	e1a01143 	asr	r1, r3, #2
     cf0:	e1a03fc2 	asr	r3, r2, #31
     cf4:	e0633001 	rsb	r3, r3, r1
     cf8:	e6ef3073 	uxtb	r3, r3
     cfc:	e3a00008 	mov	r0, #8
     d00:	e1a01003 	mov	r1, r3
     d04:	ebfffd88 	bl	32c <HEX_write_ASM>
				HEX_write_ASM(HEX4, min % 10);
     d08:	e51b1010 	ldr	r1, [r11, #-16]
     d0c:	e3063667 	movw	r3, #26215	; 0x6667
     d10:	e3463666 	movt	r3, #26214	; 0x6666
     d14:	e0c32193 	smull	r2, r3, r3, r1
     d18:	e1a02143 	asr	r2, r3, #2
     d1c:	e1a03fc1 	asr	r3, r1, #31
     d20:	e0632002 	rsb	r2, r3, r2
     d24:	e1a03002 	mov	r3, r2
     d28:	e1a03103 	lsl	r3, r3, #2
     d2c:	e0833002 	add	r3, r3, r2
     d30:	e1a03083 	lsl	r3, r3, #1
     d34:	e0632001 	rsb	r2, r3, r1
     d38:	e6ef3072 	uxtb	r3, r2
     d3c:	e3a00010 	mov	r0, #16
     d40:	e1a01003 	mov	r1, r3
     d44:	ebfffd78 	bl	32c <HEX_write_ASM>
				HEX_write_ASM(HEX5, min / 10);
     d48:	e51b2010 	ldr	r2, [r11, #-16]
     d4c:	e3063667 	movw	r3, #26215	; 0x6667
     d50:	e3463666 	movt	r3, #26214	; 0x6666
     d54:	e0c31293 	smull	r1, r3, r3, r2
     d58:	e1a01143 	asr	r1, r3, #2
     d5c:	e1a03fc2 	asr	r3, r2, #31
     d60:	e0633001 	rsb	r3, r3, r1
     d64:	e6ef3073 	uxtb	r3, r3
     d68:	e3a00020 	mov	r0, #32
     d6c:	e1a01003 	mov	r1, r3
     d70:	ebfffd6d 	bl	32c <HEX_write_ASM>
			}
		}
		if(fpga_pb_int_flag != 4) {
     d74:	e3003604 	movw	r3, #1540	; 0x604
     d78:	e3403000 	movt	r3, #0
     d7c:	e5933000 	ldr	r3, [r3]
     d80:	e3530004 	cmp	r3, #4
     d84:	0affff75 	beq	b60 <main+0x9c>

			// if the interrupt is pb 0 then start timer
			if(fpga_pb_int_flag == 0){
     d88:	e3003604 	movw	r3, #1540	; 0x604
     d8c:	e3403000 	movt	r3, #0
     d90:	e5933000 	ldr	r3, [r3]
     d94:	e3530000 	cmp	r3, #0
     d98:	1a000001 	bne	da4 <main+0x2e0>
				timer_on = 1;
     d9c:	e3a03001 	mov	r3, #1
     da0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}
			// if the interrupt is pb 1 then stop timer
			if(fpga_pb_int_flag == 1){
     da4:	e3003604 	movw	r3, #1540	; 0x604
     da8:	e3403000 	movt	r3, #0
     dac:	e5933000 	ldr	r3, [r3]
     db0:	e3530001 	cmp	r3, #1
     db4:	1a000001 	bne	dc0 <main+0x2fc>
				timer_on = 0;
     db8:	e3a03000 	mov	r3, #0
     dbc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}
			// if the interrupt is pb 1 then stop timer
			if(fpga_pb_int_flag == 2){
     dc0:	e3003604 	movw	r3, #1540	; 0x604
     dc4:	e3403000 	movt	r3, #0
     dc8:	e5933000 	ldr	r3, [r3]
     dcc:	e3530002 	cmp	r3, #2
     dd0:	1a00000a 	bne	e00 <main+0x33c>
				// reset all values and set timer_on to false
				timer_on = 0;
     dd4:	e3a03000 	mov	r3, #0
     dd8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				ms = 0;
     ddc:	e3a03000 	mov	r3, #0
     de0:	e50b3008 	str	r3, [r11, #-8]
				sec = 0;
     de4:	e3a03000 	mov	r3, #0
     de8:	e50b300c 	str	r3, [r11, #-12]
				min = 0;
     dec:	e3a03000 	mov	r3, #0
     df0:	e50b3010 	str	r3, [r11, #-16]

				// reset all the displays to show 0
				HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
     df4:	e3a0003f 	mov	r0, #63	; 0x3f
     df8:	e3a01000 	mov	r1, #0
     dfc:	ebfffd4a 	bl	32c <HEX_write_ASM>
			}
			fpga_pb_int_flag = 4;
     e00:	e3003604 	movw	r3, #1540	; 0x604
     e04:	e3403000 	movt	r3, #0
     e08:	e3a02004 	mov	r2, #4
     e0c:	e5832000 	str	r2, [r3]

		}
	}
     e10:	eaffff52 	b	b60 <main+0x9c>

00000e14 <atexit>:
     e14:	e1a01000 	mov	r1, r0
     e18:	e3a00000 	mov	r0, #0
     e1c:	e92d4008 	push	{r3, lr}
     e20:	e1a02000 	mov	r2, r0
     e24:	e1a03000 	mov	r3, r0
     e28:	eb00000e 	bl	e68 <__register_exitproc>
     e2c:	e8bd4008 	pop	{r3, lr}
     e30:	e12fff1e 	bx	lr

00000e34 <exit>:
     e34:	e92d4008 	push	{r3, lr}
     e38:	e3a01000 	mov	r1, #0
     e3c:	e1a04000 	mov	r4, r0
     e40:	eb000045 	bl	f5c <__call_exitprocs>
     e44:	e59f3018 	ldr	r3, [pc, #24]	; e64 <exit+0x30>
     e48:	e5930000 	ldr	r0, [r3]
     e4c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     e50:	e3530000 	cmp	r3, #0
     e54:	11a0e00f 	movne	lr, pc
     e58:	112fff13 	bxne	r3
     e5c:	e1a00004 	mov	r0, r4
     e60:	eb0000c9 	bl	118c <_exit>
     e64:	0000123c 	.word	0x0000123c

00000e68 <__register_exitproc>:
     e68:	e59fc0e4 	ldr	r12, [pc, #228]	; f54 <__register_exitproc+0xec>
     e6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     e70:	e59c4000 	ldr	r4, [r12]
     e74:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     e78:	e35c0000 	cmp	r12, #0
     e7c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     e80:	e59c5004 	ldr	r5, [r12, #4]
     e84:	0584c148 	streq	r12, [r4, #328]	; 0x148
     e88:	e355001f 	cmp	r5, #31
     e8c:	e24dd010 	sub	sp, sp, #16
     e90:	e1a06000 	mov	r6, r0
     e94:	da000015 	ble	ef0 <__register_exitproc+0x88>
     e98:	e59f00b8 	ldr	r0, [pc, #184]	; f58 <__register_exitproc+0xf0>
     e9c:	e3500000 	cmp	r0, #0
     ea0:	1a000001 	bne	eac <__register_exitproc+0x44>
     ea4:	e3e00000 	mvn	r0, #0
     ea8:	ea000018 	b	f10 <__register_exitproc+0xa8>
     eac:	e3a00e19 	mov	r0, #400	; 0x190
     eb0:	e58d100c 	str	r1, [sp, #12]
     eb4:	e58d2008 	str	r2, [sp, #8]
     eb8:	e58d3004 	str	r3, [sp, #4]
     ebc:	e320f000 	nop	{0}
     ec0:	e250c000 	subs	r12, r0, #0
     ec4:	e59d100c 	ldr	r1, [sp, #12]
     ec8:	e59d2008 	ldr	r2, [sp, #8]
     ecc:	e59d3004 	ldr	r3, [sp, #4]
     ed0:	0afffff3 	beq	ea4 <__register_exitproc+0x3c>
     ed4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     ed8:	e3a00000 	mov	r0, #0
     edc:	e58c0004 	str	r0, [r12, #4]
     ee0:	e58c5000 	str	r5, [r12]
     ee4:	e584c148 	str	r12, [r4, #328]	; 0x148
     ee8:	e58c0188 	str	r0, [r12, #392]	; 0x188
     eec:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     ef0:	e3560000 	cmp	r6, #0
     ef4:	e59c4004 	ldr	r4, [r12, #4]
     ef8:	1a000007 	bne	f1c <__register_exitproc+0xb4>
     efc:	e2843002 	add	r3, r4, #2
     f00:	e2844001 	add	r4, r4, #1
     f04:	e78c1103 	str	r1, [r12, r3, lsl #2]
     f08:	e58c4004 	str	r4, [r12, #4]
     f0c:	e3a00000 	mov	r0, #0
     f10:	e28dd010 	add	sp, sp, #16
     f14:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     f18:	e12fff1e 	bx	lr
     f1c:	e3a00001 	mov	r0, #1
     f20:	e1a00410 	lsl	r0, r0, r4
     f24:	e08c8104 	add	r8, r12, r4, lsl #2
     f28:	e3560002 	cmp	r6, #2
     f2c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     f30:	e5883108 	str	r3, [r8, #264]	; 0x108
     f34:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     f38:	e1877000 	orr	r7, r7, r0
     f3c:	01830000 	orreq	r0, r3, r0
     f40:	e1a05008 	mov	r5, r8
     f44:	e5882088 	str	r2, [r8, #136]	; 0x88
     f48:	e58c7188 	str	r7, [r12, #392]	; 0x188
     f4c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     f50:	eaffffe9 	b	efc <__register_exitproc+0x94>
     f54:	0000123c 	.word	0x0000123c
     f58:	00000000 	.word	0x00000000

00000f5c <__call_exitprocs>:
     f5c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f60:	e59f3168 	ldr	r3, [pc, #360]	; 10d0 <__call_exitprocs+0x174>
     f64:	e5933000 	ldr	r3, [r3]
     f68:	e24dd014 	sub	sp, sp, #20
     f6c:	e58d3004 	str	r3, [sp, #4]
     f70:	e2833f52 	add	r3, r3, #328	; 0x148
     f74:	e58d0008 	str	r0, [sp, #8]
     f78:	e58d300c 	str	r3, [sp, #12]
     f7c:	e1a07001 	mov	r7, r1
     f80:	e3a08001 	mov	r8, #1
     f84:	e59d3004 	ldr	r3, [sp, #4]
     f88:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     f8c:	e3560000 	cmp	r6, #0
     f90:	e59db00c 	ldr	r11, [sp, #12]
     f94:	0a000033 	beq	1068 <__call_exitprocs+0x10c>
     f98:	e5965004 	ldr	r5, [r6, #4]
     f9c:	e2554001 	subs	r4, r5, #1
     fa0:	5286a088 	addpl	r10, r6, #136	; 0x88
     fa4:	5285501f 	addpl	r5, r5, #31
     fa8:	508a5105 	addpl	r5, r10, r5, lsl #2
     fac:	5a000007 	bpl	fd0 <__call_exitprocs+0x74>
     fb0:	ea000029 	b	105c <__call_exitprocs+0x100>
     fb4:	e5953000 	ldr	r3, [r5]
     fb8:	e1530007 	cmp	r3, r7
     fbc:	0a000005 	beq	fd8 <__call_exitprocs+0x7c>
     fc0:	e2444001 	sub	r4, r4, #1
     fc4:	e3740001 	cmn	r4, #1
     fc8:	e2455004 	sub	r5, r5, #4
     fcc:	0a000022 	beq	105c <__call_exitprocs+0x100>
     fd0:	e3570000 	cmp	r7, #0
     fd4:	1afffff6 	bne	fb4 <__call_exitprocs+0x58>
     fd8:	e5963004 	ldr	r3, [r6, #4]
     fdc:	e06a2005 	rsb	r2, r10, r5
     fe0:	e2433001 	sub	r3, r3, #1
     fe4:	e0862002 	add	r2, r6, r2
     fe8:	e1530004 	cmp	r3, r4
     fec:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     ff0:	13a01000 	movne	r1, #0
     ff4:	05864004 	streq	r4, [r6, #4]
     ff8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     ffc:	e3530000 	cmp	r3, #0
    1000:	0affffee 	beq	fc0 <__call_exitprocs+0x64>
    1004:	e1a02418 	lsl	r2, r8, r4
    1008:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    100c:	e1120001 	tst	r2, r1
    1010:	e5969004 	ldr	r9, [r6, #4]
    1014:	0a000016 	beq	1074 <__call_exitprocs+0x118>
    1018:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    101c:	e1120001 	tst	r2, r1
    1020:	1a000016 	bne	1080 <__call_exitprocs+0x124>
    1024:	e59d0008 	ldr	r0, [sp, #8]
    1028:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    102c:	e1a0e00f 	mov	lr, pc
    1030:	e12fff13 	bx	r3
    1034:	e5963004 	ldr	r3, [r6, #4]
    1038:	e1530009 	cmp	r3, r9
    103c:	1affffd0 	bne	f84 <__call_exitprocs+0x28>
    1040:	e59b3000 	ldr	r3, [r11]
    1044:	e1530006 	cmp	r3, r6
    1048:	1affffcd 	bne	f84 <__call_exitprocs+0x28>
    104c:	e2444001 	sub	r4, r4, #1
    1050:	e3740001 	cmn	r4, #1
    1054:	e2455004 	sub	r5, r5, #4
    1058:	1affffdc 	bne	fd0 <__call_exitprocs+0x74>
    105c:	e59f1070 	ldr	r1, [pc, #112]	; 10d4 <__call_exitprocs+0x178>
    1060:	e3510000 	cmp	r1, #0
    1064:	1a000009 	bne	1090 <__call_exitprocs+0x134>
    1068:	e28dd014 	add	sp, sp, #20
    106c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1070:	e12fff1e 	bx	lr
    1074:	e1a0e00f 	mov	lr, pc
    1078:	e12fff13 	bx	r3
    107c:	eaffffec 	b	1034 <__call_exitprocs+0xd8>
    1080:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1084:	e1a0e00f 	mov	lr, pc
    1088:	e12fff13 	bx	r3
    108c:	eaffffe8 	b	1034 <__call_exitprocs+0xd8>
    1090:	e5963004 	ldr	r3, [r6, #4]
    1094:	e3530000 	cmp	r3, #0
    1098:	e5963000 	ldr	r3, [r6]
    109c:	1a000008 	bne	10c4 <__call_exitprocs+0x168>
    10a0:	e3530000 	cmp	r3, #0
    10a4:	0a000006 	beq	10c4 <__call_exitprocs+0x168>
    10a8:	e1a00006 	mov	r0, r6
    10ac:	e58b3000 	str	r3, [r11]
    10b0:	e320f000 	nop	{0}
    10b4:	e59b6000 	ldr	r6, [r11]
    10b8:	e3560000 	cmp	r6, #0
    10bc:	1affffb5 	bne	f98 <__call_exitprocs+0x3c>
    10c0:	eaffffe8 	b	1068 <__call_exitprocs+0x10c>
    10c4:	e1a0b006 	mov	r11, r6
    10c8:	e1a06003 	mov	r6, r3
    10cc:	eafffff9 	b	10b8 <__call_exitprocs+0x15c>
    10d0:	0000123c 	.word	0x0000123c
    10d4:	00000000 	.word	0x00000000

000010d8 <register_fini>:
    10d8:	e92d4008 	push	{r3, lr}
    10dc:	e59f3010 	ldr	r3, [pc, #16]	; 10f4 <register_fini+0x1c>
    10e0:	e3530000 	cmp	r3, #0
    10e4:	159f000c 	ldrne	r0, [pc, #12]	; 10f8 <register_fini+0x20>
    10e8:	1bffff49 	blne	e14 <atexit>
    10ec:	e8bd4008 	pop	{r3, lr}
    10f0:	e12fff1e 	bx	lr
    10f4:	00001264 	.word	0x00001264
    10f8:	000010fc 	.word	0x000010fc

000010fc <__libc_fini_array>:
    10fc:	e92d4038 	push	{r3, r4, r5, lr}
    1100:	e59f5030 	ldr	r5, [pc, #48]	; 1138 <__libc_fini_array+0x3c>
    1104:	e59f4030 	ldr	r4, [pc, #48]	; 113c <__libc_fini_array+0x40>
    1108:	e0654004 	rsb	r4, r5, r4
    110c:	e1b04144 	asrs	r4, r4, #2
    1110:	10855104 	addne	r5, r5, r4, lsl #2
    1114:	0a000004 	beq	112c <__libc_fini_array+0x30>
    1118:	e5353004 	ldr	r3, [r5, #-4]!
    111c:	e1a0e00f 	mov	lr, pc
    1120:	e12fff13 	bx	r3
    1124:	e2544001 	subs	r4, r4, #1
    1128:	1afffffa 	bne	1118 <__libc_fini_array+0x1c>
    112c:	eb00004c 	bl	1264 <__libc_fini>
    1130:	e8bd4038 	pop	{r3, r4, r5, lr}
    1134:	e12fff1e 	bx	lr
    1138:	0000127c 	.word	0x0000127c
    113c:	00001280 	.word	0x00001280

00001140 <__cs3_premain>:
    1140:	e92d4008 	push	{r3, lr}
    1144:	eb000017 	bl	11a8 <__libc_init_array>
    1148:	e59f3030 	ldr	r3, [pc, #48]	; 1180 <__cs3_premain+0x40>
    114c:	e3530000 	cmp	r3, #0
    1150:	15930000 	ldrne	r0, [r3]
    1154:	01a00003 	moveq	r0, r3
    1158:	e59f3024 	ldr	r3, [pc, #36]	; 1184 <__cs3_premain+0x44>
    115c:	e3530000 	cmp	r3, #0
    1160:	15931000 	ldrne	r1, [r3]
    1164:	01a01003 	moveq	r1, r3
    1168:	e3a02000 	mov	r2, #0
    116c:	ebfffe54 	bl	ac4 <main>
    1170:	e59f3010 	ldr	r3, [pc, #16]	; 1188 <__cs3_premain+0x48>
    1174:	e3530000 	cmp	r3, #0
    1178:	1bffff2d 	blne	e34 <exit>
    117c:	eafffffe 	b	117c <__cs3_premain+0x3c>
	...
    1188:	00000e34 	.word	0x00000e34

0000118c <_exit>:
    118c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1190:	e3a00018 	mov	r0, #24
    1194:	e59f1004 	ldr	r1, [pc, #4]	; 11a0 <_exit+0x14>
    1198:	ef123456 	svc	0x00123456
    119c:	eafffffe 	b	119c <_exit+0x10>
    11a0:	00020026 	.word	0x00020026

000011a4 <__cs3_isr_interrupt>:
    11a4:	eafffffe 	b	11a4 <__cs3_isr_interrupt>

000011a8 <__libc_init_array>:
    11a8:	e92d4070 	push	{r4, r5, r6, lr}
    11ac:	e59f506c 	ldr	r5, [pc, #108]	; 1220 <__libc_init_array+0x78>
    11b0:	e59f606c 	ldr	r6, [pc, #108]	; 1224 <__libc_init_array+0x7c>
    11b4:	e0656006 	rsb	r6, r5, r6
    11b8:	e1b06146 	asrs	r6, r6, #2
    11bc:	12455004 	subne	r5, r5, #4
    11c0:	13a04000 	movne	r4, #0
    11c4:	0a000005 	beq	11e0 <__libc_init_array+0x38>
    11c8:	e5b53004 	ldr	r3, [r5, #4]!
    11cc:	e2844001 	add	r4, r4, #1
    11d0:	e1a0e00f 	mov	lr, pc
    11d4:	e12fff13 	bx	r3
    11d8:	e1560004 	cmp	r6, r4
    11dc:	1afffff9 	bne	11c8 <__libc_init_array+0x20>
    11e0:	e59f5040 	ldr	r5, [pc, #64]	; 1228 <__libc_init_array+0x80>
    11e4:	e59f6040 	ldr	r6, [pc, #64]	; 122c <__libc_init_array+0x84>
    11e8:	e0656006 	rsb	r6, r5, r6
    11ec:	eb000014 	bl	1244 <_init>
    11f0:	e1b06146 	asrs	r6, r6, #2
    11f4:	12455004 	subne	r5, r5, #4
    11f8:	13a04000 	movne	r4, #0
    11fc:	0a000005 	beq	1218 <__libc_init_array+0x70>
    1200:	e5b53004 	ldr	r3, [r5, #4]!
    1204:	e2844001 	add	r4, r4, #1
    1208:	e1a0e00f 	mov	lr, pc
    120c:	e12fff13 	bx	r3
    1210:	e1560004 	cmp	r6, r4
    1214:	1afffff9 	bne	1200 <__libc_init_array+0x58>
    1218:	e8bd4070 	pop	{r4, r5, r6, lr}
    121c:	e12fff1e 	bx	lr
    1220:	0000125c 	.word	0x0000125c
    1224:	0000125c 	.word	0x0000125c
    1228:	0000125c 	.word	0x0000125c
    122c:	00001264 	.word	0x00001264

Disassembly of section .rodata:

00001234 <_global_impure_ptr-0x8>:
    1234:	00000049 	.word	0x00000049
    1238:	000000c7 	.word	0x000000c7

0000123c <_global_impure_ptr>:
    123c:	000012a8 00000043                       ....C...

00001244 <_init>:
    1244:	e1a0c00d 	mov	r12, sp
    1248:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    124c:	e24cb004 	sub	r11, r12, #4
    1250:	e24bd028 	sub	sp, r11, #40	; 0x28
    1254:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1258:	e12fff1e 	bx	lr

0000125c <__init_array_start>:
    125c:	000010d8 	.word	0x000010d8

00001260 <__frame_dummy_init_array_entry>:
    1260:	00000208                                ....

00001264 <__libc_fini>:
    1264:	e1a0c00d 	mov	r12, sp
    1268:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    126c:	e24cb004 	sub	r11, r12, #4
    1270:	e24bd028 	sub	sp, r11, #40	; 0x28
    1274:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1278:	e12fff1e 	bx	lr

0000127c <__fini_array_start>:
    127c:	000001c4 	.word	0x000001c4

00001280 <__cs3_regions>:
    1280:	00000000 	.word	0x00000000
    1284:	00000040 	.word	0x00000040
    1288:	00000040 	.word	0x00000040
    128c:	00001698 	.word	0x00001698
    1290:	00000020 	.word	0x00000020

00001294 <__cs3_regions_end>:
    1294:	00000000 	.word	0x00000000

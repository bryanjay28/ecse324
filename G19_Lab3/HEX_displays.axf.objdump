
//campus.mcgill.ca/EMF/ELE/bjay/Desktop/ecse324/G19_Lab3/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 84 0a 00 00 88 0a 00 00 8c 0a 00 00     @...............
  30:	90 0a 00 00 80 0a 00 00 94 0a 00 00 98 0a 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000250 	bl	a1c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b80 	.word	0x00000b80

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000fb8 	.word	0x00000fb8

00000124 <__cs3_heap_start_ptr>:
 124:	00000fe0 	.word	0x00000fe0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000fc0 	.word	0x00000fc0
 170:	00000fc3 	.word	0x00000fc3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000fc0 	.word	0x00000fc0
 1bc:	00000fc0 	.word	0x00000fc0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000fc0 	.word	0x00000fc0
 200:	00000000 	.word	0x00000000
 204:	00000b24 	.word	0x00000b24

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b24 	.word	0x00000b24
 250:	00000fc4 	.word	0x00000fc4
 254:	00000b80 	.word	0x00000b80
 258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
			.equ HEX_BASE4, 0xFF200030
			.global HEX_clear_ASM
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:	PUSH {LR}
 25c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
 260:	e59f1140 	ldr	r1, [pc, #320]	; 3a8 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
 264:	e59f2140 	ldr	r2, [pc, #320]	; 3ac <HEX_VAL+0x14>
				MOV R3, #6				// counter for bits, 6 possiblet hex codes
 268:	e3a03006 	mov	r3, #6
				MOV R4, #1				// compare with each bit to get hex number since one hot encoded
 26c:	e3a04001 	mov	r4, #1
				MOV R6, #0				// clear bit 
 270:	e3a06000 	mov	r6, #0

00000274 <LOOP_BOTTOM>:

LOOP_BOTTOM:	CMP R3, #2
 274:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP
 278:	0a000006 	beq	298 <LOOP_TOP>
				ANDS R5, R4, R0 		// check which bit is 1 since to get the hex display
 27c:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM		// if R5 > 0, then go to clear
 280:	0a000000 	beq	288 <BOTTOM>
				STRB R6, [R1]				
 284:	e5c16000 	strb	r6, [r1]

00000288 <BOTTOM>:

BOTTOM:			LSL R4, #1				// shift #1 bit to the left to check the next bit value
 288:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			// increment hex display value
 28c:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			// decrement the counter 
 290:	e2533001 	subs	r3, r3, #1
				BGT LOOP_BOTTOM			// if the value is > 0, then keep looping
 294:	cafffff6 	bgt	274 <LOOP_BOTTOM>

00000298 <LOOP_TOP>:

LOOP_TOP:		CMP R3, #0				// compare with 0 to determine end of the loops
 298:	e3530000 	cmp	r3, #0
				BEQ END					// if 0, go to the end
 29c:	0a000006 	beq	2bc <END>
				ANDS R5, R4, R0			// repeat process form above
 2a0:	e0145000 	ands	r5, r4, r0
				BEQ TOP
 2a4:	0a000000 	beq	2ac <TOP>
				STRB R6, [R2]			// store into address hex_base4
 2a8:	e5c26000 	strb	r6, [r2]

000002ac <TOP>:

TOP:			LSL R4, #1
 2ac:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			// increment address of hex_base4
 2b0:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1
 2b4:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP
 2b8:	cafffff6 	bgt	298 <LOOP_TOP>

000002bc <END>:

END:			POP {LR}
 2bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
 2c0:	e12fff1e 	bx	lr

000002c4 <HEX_flood_ASM>:

HEX_flood_ASM:	PUSH {LR}
 2c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
 2c8:	e59f10d8 	ldr	r1, [pc, #216]	; 3a8 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
 2cc:	e59f20d8 	ldr	r2, [pc, #216]	; 3ac <HEX_VAL+0x14>
				MOV R3, #6				// counter for bits, 6 possiblet hex codes
 2d0:	e3a03006 	mov	r3, #6
				MOV R4, #1				// compare with each bit to get hex number since one hot encoded
 2d4:	e3a04001 	mov	r4, #1
				MOV R6, #0x7F				// flood bit 7F = 0111 1111
 2d8:	e3a0607f 	mov	r6, #127	; 0x7f

000002dc <LOOP_BOTTOM_F>:

LOOP_BOTTOM_F:	CMP R3, #2
 2dc:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP
 2e0:	0affffec 	beq	298 <LOOP_TOP>
				ANDS R5, R4, R0 		// check which bit is 1 since to get the hex display
 2e4:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM_F		// if R5 > 0, then go to clear
 2e8:	0a000000 	beq	2f0 <BOTTOM_F>
				STRB R6, [R1]				
 2ec:	e5c16000 	strb	r6, [r1]

000002f0 <BOTTOM_F>:

BOTTOM_F:		LSL R4, #1				// shift #1 bit to the left to check the next bit value
 2f0:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			// increment hex display value
 2f4:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			// decrement the counter 
 2f8:	e2533001 	subs	r3, r3, #1
				BGT LOOP_BOTTOM_F		// if the value is > 0, then keep looping
 2fc:	cafffff6 	bgt	2dc <LOOP_BOTTOM_F>

00000300 <LOOP_TOP_F>:

LOOP_TOP_F:		CMP R3, #0				// compare with 0 to determine end of the loops
 300:	e3530000 	cmp	r3, #0
				BEQ END_F					// if 0, go to the end
 304:	0a000006 	beq	324 <END_F>
				ANDS R5, R4, R0			// repeat process form above
 308:	e0145000 	ands	r5, r4, r0
				BEQ TOP_F
 30c:	0a000000 	beq	314 <TOP_F>
				STRB R6, [R2]			// store into address hex_base4
 310:	e5c26000 	strb	r6, [r2]

00000314 <TOP_F>:

TOP_F:			LSL R4, #1
 314:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			// increment address of hex_base4
 318:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1
 31c:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP_F
 320:	cafffff6 	bgt	300 <LOOP_TOP_F>

00000324 <END_F>:

END_F:			POP {LR}
 324:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
 328:	e12fff1e 	bx	lr

0000032c <HEX_write_ASM>:

HEX_write_ASM:	PUSH {LR}
 32c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R2, =HEX_BASE0		// contains the address for displays 0-3
 330:	e59f2070 	ldr	r2, [pc, #112]	; 3a8 <HEX_VAL+0x10>
				LDR R3, =HEX_BASE4		// contains the address for displays 4-5
 334:	e59f3070 	ldr	r3, [pc, #112]	; 3ac <HEX_VAL+0x14>
				LDR R7, =HEX_VAL		// contains array of bytes of the bit values for numbers 0-15
 338:	e59f7070 	ldr	r7, [pc, #112]	; 3b0 <HEX_VAL+0x18>
				LDRB R8, [R7, R1]		// load the corresponding hex value for the char
 33c:	e7d78001 	ldrb	r8, [r7, r1]
				MOV R4, #6				// counter for bits, 6 possiblet hex codes
 340:	e3a04006 	mov	r4, #6
				MOV R5, #1				// compare with each bit to get hex number since one hot encoded
 344:	e3a05001 	mov	r5, #1

00000348 <LOOP_BOTTOM2>:

LOOP_BOTTOM2:	CMP R4, #2
 348:	e3540002 	cmp	r4, #2
				BEQ LOOP_TOP2
 34c:	0a000006 	beq	36c <LOOP_TOP2>
				ANDS R6, R5, R0 		// check which bit is 1 since to get the hex display
 350:	e0156000 	ands	r6, r5, r0
				BEQ BOTTOM2				// if R5 > 0, then go to clear
 354:	0a000000 	beq	35c <BOTTOM2>
				STRB R8, [R2]			// store the desired value in to the hex_base0 diaplay
 358:	e5c28000 	strb	r8, [r2]

0000035c <BOTTOM2>:

BOTTOM2:		LSL R5, #1				// shift #1 bit to the left to check the next bit value
 35c:	e1a05085 	lsl	r5, r5, #1
				ADD R2, R2, #1			// increment hex display value
 360:	e2822001 	add	r2, r2, #1
				SUBS R4, R4, #1			// decrement the counter 
 364:	e2544001 	subs	r4, r4, #1
				BGT LOOP_BOTTOM2		// if the value is > 0, then keep looping
 368:	cafffff6 	bgt	348 <LOOP_BOTTOM2>

0000036c <LOOP_TOP2>:

LOOP_TOP2:		CMP R4, #0				// compare with 0 to determine end of the loops
 36c:	e3540000 	cmp	r4, #0
				BEQ END2					// if 0, go to the end
 370:	0a000006 	beq	390 <END2>
				ANDS R6, R5, R0			// repeat process form above
 374:	e0156000 	ands	r6, r5, r0
				BEQ TOP2
 378:	0a000000 	beq	380 <TOP2>
				STRB R8, [R3]			// store into address hex_base4
 37c:	e5c38000 	strb	r8, [r3]

00000380 <TOP2>:

TOP2:			LSL R5, #1
 380:	e1a05085 	lsl	r5, r5, #1
				ADD R3, R3, #1			// increment address of hex_base4
 384:	e2833001 	add	r3, r3, #1
				SUBS R4, R4, #1
 388:	e2544001 	subs	r4, r4, #1
				BGT LOOP_TOP2
 38c:	cafffff6 	bgt	36c <LOOP_TOP2>

00000390 <END2>:

END2:			POP {LR}
 390:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
 394:	e12fff1e 	bx	lr

00000398 <HEX_VAL>:
 398:	4f5b063f 	.word	0x4f5b063f
 39c:	077d6d66 	.word	0x077d6d66
 3a0:	7f77677f 	.word	0x7f77677f
 3a4:	71793f39 	.word	0x71793f39
			.global HEX_clear_ASM
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:	PUSH {LR}
				LDR R1, =HEX_BASE0		// contains the address for displays 0-3
 3a8:	ff200020 	.word	0xff200020
				LDR R2, =HEX_BASE4		// contains the address for displays 4-5
 3ac:	ff200030 	.word	0xff200030
				BX LR

HEX_write_ASM:	PUSH {LR}
				LDR R2, =HEX_BASE0		// contains the address for displays 0-3
				LDR R3, =HEX_BASE4		// contains the address for displays 4-5
				LDR R7, =HEX_VAL		// contains array of bytes of the bit values for numbers 0-15
 3b0:	00000398 	.word	0x00000398

000003b4 <main>:
#include <stdio.h>

#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"

int main () {
 3b4:	e92d4800 	push	{r11, lr}
 3b8:	e28db004 	add	r11, sp, #4
 3bc:	e24dd028 	sub	sp, sp, #40	; 0x28
	int count0 = 0, count1 = 0, count2 = 0, count3 = 0;
 3c0:	e3a03000 	mov	r3, #0
 3c4:	e50b3008 	str	r3, [r11, #-8]
 3c8:	e3a03000 	mov	r3, #0
 3cc:	e50b300c 	str	r3, [r11, #-12]
 3d0:	e3a03000 	mov	r3, #0
 3d4:	e50b3010 	str	r3, [r11, #-16]
 3d8:	e3a03000 	mov	r3, #0
 3dc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

	HPS_TIM_config_t hps_tim;
	
	hps_tim.tim = TIM0|TIM1|TIM2|TIM3;
 3e0:	e3a0300f 	mov	r3, #15
 3e4:	e54b3028 	strb	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.timeout = 1000000;
 3e8:	e3043240 	movw	r3, #16960	; 0x4240
 3ec:	e340300f 	movt	r3, #15
 3f0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.LD_en = 1;
 3f4:	e3a03001 	mov	r3, #1
 3f8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	hps_tim.INT_en = 1;
 3fc:	e3a03001 	mov	r3, #1
 400:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	hps_tim.enable = 1;
 404:	e3a03001 	mov	r3, #1
 408:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	
	HPS_TIM_config_ASM(&hps_tim);
 40c:	e24b3028 	sub	r3, r11, #40	; 0x28
 410:	e1a00003 	mov	r0, r3
 414:	eb000052 	bl	564 <HPS_TIM_config_ASM>
 418:	ea000000 	b	420 <main+0x6c>
			if(++count3 == 16){
				count3 = 0;
			}
			HEX_write_ASM(HEX3, count3);
		}
	}
 41c:	e1a00000 	nop			; (mov r0, r0)
	hps_tim.enable = 1;
	
	HPS_TIM_config_ASM(&hps_tim);
	
	while(1) {
		if(HPS_TIM_read_INT_ASM(TIM0)){
 420:	e3a00001 	mov	r0, #1
 424:	eb000094 	bl	67c <HPS_TIM_read_INT_ASM>
 428:	e1a03000 	mov	r3, r0
 42c:	e3530000 	cmp	r3, #0
 430:	0a00000e 	beq	470 <main+0xbc>
			HPS_TIM_clear_INT_ASM(TIM0);
 434:	e3a00001 	mov	r0, #1
 438:	eb00007e 	bl	638 <HPS_TIM_clear_INT_ASM>
			if(++count0 == 16){
 43c:	e51b3008 	ldr	r3, [r11, #-8]
 440:	e2833001 	add	r3, r3, #1
 444:	e50b3008 	str	r3, [r11, #-8]
 448:	e51b3008 	ldr	r3, [r11, #-8]
 44c:	e3530010 	cmp	r3, #16
 450:	1a000001 	bne	45c <main+0xa8>
				count0 = 0;
 454:	e3a03000 	mov	r3, #0
 458:	e50b3008 	str	r3, [r11, #-8]
			}
			HEX_write_ASM(HEX0, count0);
 45c:	e51b3008 	ldr	r3, [r11, #-8]
 460:	e6ef3073 	uxtb	r3, r3
 464:	e3a00001 	mov	r0, #1
 468:	e1a01003 	mov	r1, r3
 46c:	ebffffae 	bl	32c <HEX_write_ASM>
		}
		
		if(HPS_TIM_read_INT_ASM(TIM1)){
 470:	e3a00002 	mov	r0, #2
 474:	eb000080 	bl	67c <HPS_TIM_read_INT_ASM>
 478:	e1a03000 	mov	r3, r0
 47c:	e3530000 	cmp	r3, #0
 480:	0a00000e 	beq	4c0 <main+0x10c>
			HPS_TIM_clear_INT_ASM(TIM1);
 484:	e3a00002 	mov	r0, #2
 488:	eb00006a 	bl	638 <HPS_TIM_clear_INT_ASM>
			if(++count1 == 16){
 48c:	e51b300c 	ldr	r3, [r11, #-12]
 490:	e2833001 	add	r3, r3, #1
 494:	e50b300c 	str	r3, [r11, #-12]
 498:	e51b300c 	ldr	r3, [r11, #-12]
 49c:	e3530010 	cmp	r3, #16
 4a0:	1a000001 	bne	4ac <main+0xf8>
				count1 = 0;
 4a4:	e3a03000 	mov	r3, #0
 4a8:	e50b300c 	str	r3, [r11, #-12]
			}
			HEX_write_ASM(HEX1, count1);
 4ac:	e51b300c 	ldr	r3, [r11, #-12]
 4b0:	e6ef3073 	uxtb	r3, r3
 4b4:	e3a00002 	mov	r0, #2
 4b8:	e1a01003 	mov	r1, r3
 4bc:	ebffff9a 	bl	32c <HEX_write_ASM>
		}
		
		if(HPS_TIM_read_INT_ASM(TIM2)){
 4c0:	e3a00004 	mov	r0, #4
 4c4:	eb00006c 	bl	67c <HPS_TIM_read_INT_ASM>
 4c8:	e1a03000 	mov	r3, r0
 4cc:	e3530000 	cmp	r3, #0
 4d0:	0a00000e 	beq	510 <main+0x15c>
			HPS_TIM_clear_INT_ASM(TIM2);
 4d4:	e3a00004 	mov	r0, #4
 4d8:	eb000056 	bl	638 <HPS_TIM_clear_INT_ASM>
			if(++count2 == 16){
 4dc:	e51b3010 	ldr	r3, [r11, #-16]
 4e0:	e2833001 	add	r3, r3, #1
 4e4:	e50b3010 	str	r3, [r11, #-16]
 4e8:	e51b3010 	ldr	r3, [r11, #-16]
 4ec:	e3530010 	cmp	r3, #16
 4f0:	1a000001 	bne	4fc <main+0x148>
				count2 = 0;
 4f4:	e3a03000 	mov	r3, #0
 4f8:	e50b3010 	str	r3, [r11, #-16]
			}
			HEX_write_ASM(HEX2, count2);
 4fc:	e51b3010 	ldr	r3, [r11, #-16]
 500:	e6ef3073 	uxtb	r3, r3
 504:	e3a00004 	mov	r0, #4
 508:	e1a01003 	mov	r1, r3
 50c:	ebffff86 	bl	32c <HEX_write_ASM>
		}
		
		if(HPS_TIM_read_INT_ASM(TIM3)){
 510:	e3a00008 	mov	r0, #8
 514:	eb000058 	bl	67c <HPS_TIM_read_INT_ASM>
 518:	e1a03000 	mov	r3, r0
 51c:	e3530000 	cmp	r3, #0
 520:	0affffbd 	beq	41c <main+0x68>
			HPS_TIM_clear_INT_ASM(TIM3);
 524:	e3a00008 	mov	r0, #8
 528:	eb000042 	bl	638 <HPS_TIM_clear_INT_ASM>
			if(++count3 == 16){
 52c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 530:	e2833001 	add	r3, r3, #1
 534:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 538:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 53c:	e3530010 	cmp	r3, #16
 540:	1a000001 	bne	54c <main+0x198>
				count3 = 0;
 544:	e3a03000 	mov	r3, #0
 548:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}
			HEX_write_ASM(HEX3, count3);
 54c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 550:	e6ef3073 	uxtb	r3, r3
 554:	e3a00008 	mov	r0, #8
 558:	e1a01003 	mov	r1, r3
 55c:	ebffff72 	bl	32c <HEX_write_ASM>
		}
	}
 560:	eaffffad 	b	41c <main+0x68>

00000564 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
 564:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
 568:	e3a01000 	mov	r1, #0
	MOV R2, #1
 56c:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
 570:	e5907000 	ldr	r7, [r0]
	B LOOP
 574:	eaffffff 	b	578 <LOOP>

00000578 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
 578:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
 57c:	0a000000 	beq	584 <CONTINUE>
	BL CONFIG
 580:	eb000004 	bl	598 <CONFIG>

00000584 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
 584:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 588:	e3510004 	cmp	r1, #4
	BLT LOOP
 58c:	bafffff9 	blt	578 <LOOP>

00000590 <DONE>:

DONE:
	POP {R4-R7, LR}
 590:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
 594:	e12fff1e 	bx	lr

00000598 <CONFIG>:


CONFIG:
	PUSH {LR}
 598:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
 59c:	e59f3148 	ldr	r3, [pc, #328]	; 6ec <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
 5a0:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
 5a4:	eb000005 	bl	5c0 <DISABLE>
	BL SET_LOAD_VAL
 5a8:	eb000008 	bl	5d0 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
 5ac:	eb00000e 	bl	5ec <SET_LOAD_BIT>
	BL SET_INT_BIT
 5b0:	eb000013 	bl	604 <SET_INT_BIT>
	BL SET_EN_BIT
 5b4:	eb000019 	bl	620 <SET_EN_BIT>
	
	POP {LR}
 5b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
 5bc:	e12fff1e 	bx	lr

000005c0 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
 5c0:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
 5c4:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
 5c8:	e5845008 	str	r5, [r4, #8]
	BX LR
 5cc:	e12fff1e 	bx	lr

000005d0 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
 5d0:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
 5d4:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
 5d8:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
 5dc:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
 5e0:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
 5e4:	e5845000 	str	r5, [r4]
	BX LR
 5e8:	e12fff1e 	bx	lr

000005ec <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
 5ec:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
 5f0:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
 5f4:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
 5f8:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
 5fc:	e5845008 	str	r5, [r4, #8]
	BX LR
 600:	e12fff1e 	bx	lr

00000604 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
 604:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
 608:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
 60c:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
 610:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
 614:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
 618:	e5845008 	str	r5, [r4, #8]
	BX LR
 61c:	e12fff1e 	bx	lr

00000620 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
 620:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
 624:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
 628:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
 62c:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
 630:	e5845008 	str	r5, [r4, #8]
	BX LR
 634:	e12fff1e 	bx	lr

00000638 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
 638:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
 63c:	e3a01000 	mov	r1, #0
	MOV R2, #1
 640:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
 644:	eaffffff 	b	648 <CLEAR_INT_LOOP>

00000648 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
 648:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
 64c:	0a000000 	beq	654 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
 650:	eb000005 	bl	66c <CLEAR_INT>

00000654 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
 654:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 658:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
 65c:	bafffff9 	blt	648 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
 660:	eaffffff 	b	664 <CLEAR_INT_DONE>

00000664 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
 664:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 668:	e12fff1e 	bx	lr

0000066c <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
 66c:	e59f3078 	ldr	r3, [pc, #120]	; 6ec <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 670:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
 674:	e593300c 	ldr	r3, [r3, #12]
	BX LR
 678:	e12fff1e 	bx	lr

0000067c <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
 67c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
 680:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
 684:	e3a01000 	mov	r1, #0
	MOV R2, #1
 688:	e3a02001 	mov	r2, #1
	MOV R4, #0
 68c:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
 690:	eaffffff 	b	694 <READ_INT_LOOP>

00000694 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
 694:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
 698:	0a000000 	beq	6a0 <READ_INT_CONTINUE>
	BL READ_INT
 69c:	eb000008 	bl	6c4 <READ_INT>

000006a0 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
 6a0:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 6a4:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
 6a8:	0a000001 	beq	6b4 <READ_INT_DONE>
	LSL R4, R4, #1
 6ac:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
 6b0:	eafffff7 	b	694 <READ_INT_LOOP>

000006b4 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
 6b4:	e1a00004 	mov	r0, r4
	POP {R4}
 6b8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
 6bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 6c0:	e12fff1e 	bx	lr

000006c4 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
 6c4:	e59f3020 	ldr	r3, [pc, #32]	; 6ec <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 6c8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
 6cc:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
 6d0:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
 6d4:	e0244003 	eor	r4, r4, r3
	BX LR
 6d8:	e12fff1e 	bx	lr

000006dc <HPS_TIM_BASE>:
 6dc:	ffc08000 	.word	0xffc08000
 6e0:	ffc09000 	.word	0xffc09000
 6e4:	ffd00000 	.word	0xffd00000
 6e8:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
 6ec:	000006dc 	.word	0x000006dc

000006f0 <atexit>:
 6f0:	e1a01000 	mov	r1, r0
 6f4:	e3a00000 	mov	r0, #0
 6f8:	e92d4008 	push	{r3, lr}
 6fc:	e1a02000 	mov	r2, r0
 700:	e1a03000 	mov	r3, r0
 704:	eb00000e 	bl	744 <__register_exitproc>
 708:	e8bd4008 	pop	{r3, lr}
 70c:	e12fff1e 	bx	lr

00000710 <exit>:
 710:	e92d4008 	push	{r3, lr}
 714:	e3a01000 	mov	r1, #0
 718:	e1a04000 	mov	r4, r0
 71c:	eb000045 	bl	838 <__call_exitprocs>
 720:	e59f3018 	ldr	r3, [pc, #24]	; 740 <exit+0x30>
 724:	e5930000 	ldr	r0, [r3]
 728:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 72c:	e3530000 	cmp	r3, #0
 730:	11a0e00f 	movne	lr, pc
 734:	112fff13 	bxne	r3
 738:	e1a00004 	mov	r0, r4
 73c:	eb0000c9 	bl	a68 <_exit>
 740:	00000b28 	.word	0x00000b28

00000744 <__register_exitproc>:
 744:	e59fc0e4 	ldr	r12, [pc, #228]	; 830 <__register_exitproc+0xec>
 748:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 74c:	e59c4000 	ldr	r4, [r12]
 750:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 754:	e35c0000 	cmp	r12, #0
 758:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 75c:	e59c5004 	ldr	r5, [r12, #4]
 760:	0584c148 	streq	r12, [r4, #328]	; 0x148
 764:	e355001f 	cmp	r5, #31
 768:	e24dd010 	sub	sp, sp, #16
 76c:	e1a06000 	mov	r6, r0
 770:	da000015 	ble	7cc <__register_exitproc+0x88>
 774:	e59f00b8 	ldr	r0, [pc, #184]	; 834 <__register_exitproc+0xf0>
 778:	e3500000 	cmp	r0, #0
 77c:	1a000001 	bne	788 <__register_exitproc+0x44>
 780:	e3e00000 	mvn	r0, #0
 784:	ea000018 	b	7ec <__register_exitproc+0xa8>
 788:	e3a00e19 	mov	r0, #400	; 0x190
 78c:	e58d100c 	str	r1, [sp, #12]
 790:	e58d2008 	str	r2, [sp, #8]
 794:	e58d3004 	str	r3, [sp, #4]
 798:	e320f000 	nop	{0}
 79c:	e250c000 	subs	r12, r0, #0
 7a0:	e59d100c 	ldr	r1, [sp, #12]
 7a4:	e59d2008 	ldr	r2, [sp, #8]
 7a8:	e59d3004 	ldr	r3, [sp, #4]
 7ac:	0afffff3 	beq	780 <__register_exitproc+0x3c>
 7b0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 7b4:	e3a00000 	mov	r0, #0
 7b8:	e58c0004 	str	r0, [r12, #4]
 7bc:	e58c5000 	str	r5, [r12]
 7c0:	e584c148 	str	r12, [r4, #328]	; 0x148
 7c4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 7c8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 7cc:	e3560000 	cmp	r6, #0
 7d0:	e59c4004 	ldr	r4, [r12, #4]
 7d4:	1a000007 	bne	7f8 <__register_exitproc+0xb4>
 7d8:	e2843002 	add	r3, r4, #2
 7dc:	e2844001 	add	r4, r4, #1
 7e0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 7e4:	e58c4004 	str	r4, [r12, #4]
 7e8:	e3a00000 	mov	r0, #0
 7ec:	e28dd010 	add	sp, sp, #16
 7f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 7f4:	e12fff1e 	bx	lr
 7f8:	e3a00001 	mov	r0, #1
 7fc:	e1a00410 	lsl	r0, r0, r4
 800:	e08c8104 	add	r8, r12, r4, lsl #2
 804:	e3560002 	cmp	r6, #2
 808:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 80c:	e5883108 	str	r3, [r8, #264]	; 0x108
 810:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 814:	e1877000 	orr	r7, r7, r0
 818:	01830000 	orreq	r0, r3, r0
 81c:	e1a05008 	mov	r5, r8
 820:	e5882088 	str	r2, [r8, #136]	; 0x88
 824:	e58c7188 	str	r7, [r12, #392]	; 0x188
 828:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 82c:	eaffffe9 	b	7d8 <__register_exitproc+0x94>
 830:	00000b28 	.word	0x00000b28
 834:	00000000 	.word	0x00000000

00000838 <__call_exitprocs>:
 838:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 83c:	e59f3168 	ldr	r3, [pc, #360]	; 9ac <__call_exitprocs+0x174>
 840:	e5933000 	ldr	r3, [r3]
 844:	e24dd014 	sub	sp, sp, #20
 848:	e58d3004 	str	r3, [sp, #4]
 84c:	e2833f52 	add	r3, r3, #328	; 0x148
 850:	e58d0008 	str	r0, [sp, #8]
 854:	e58d300c 	str	r3, [sp, #12]
 858:	e1a07001 	mov	r7, r1
 85c:	e3a08001 	mov	r8, #1
 860:	e59d3004 	ldr	r3, [sp, #4]
 864:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 868:	e3560000 	cmp	r6, #0
 86c:	e59db00c 	ldr	r11, [sp, #12]
 870:	0a000033 	beq	944 <__call_exitprocs+0x10c>
 874:	e5965004 	ldr	r5, [r6, #4]
 878:	e2554001 	subs	r4, r5, #1
 87c:	5286a088 	addpl	r10, r6, #136	; 0x88
 880:	5285501f 	addpl	r5, r5, #31
 884:	508a5105 	addpl	r5, r10, r5, lsl #2
 888:	5a000007 	bpl	8ac <__call_exitprocs+0x74>
 88c:	ea000029 	b	938 <__call_exitprocs+0x100>
 890:	e5953000 	ldr	r3, [r5]
 894:	e1530007 	cmp	r3, r7
 898:	0a000005 	beq	8b4 <__call_exitprocs+0x7c>
 89c:	e2444001 	sub	r4, r4, #1
 8a0:	e3740001 	cmn	r4, #1
 8a4:	e2455004 	sub	r5, r5, #4
 8a8:	0a000022 	beq	938 <__call_exitprocs+0x100>
 8ac:	e3570000 	cmp	r7, #0
 8b0:	1afffff6 	bne	890 <__call_exitprocs+0x58>
 8b4:	e5963004 	ldr	r3, [r6, #4]
 8b8:	e06a2005 	rsb	r2, r10, r5
 8bc:	e2433001 	sub	r3, r3, #1
 8c0:	e0862002 	add	r2, r6, r2
 8c4:	e1530004 	cmp	r3, r4
 8c8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 8cc:	13a01000 	movne	r1, #0
 8d0:	05864004 	streq	r4, [r6, #4]
 8d4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 8d8:	e3530000 	cmp	r3, #0
 8dc:	0affffee 	beq	89c <__call_exitprocs+0x64>
 8e0:	e1a02418 	lsl	r2, r8, r4
 8e4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 8e8:	e1120001 	tst	r2, r1
 8ec:	e5969004 	ldr	r9, [r6, #4]
 8f0:	0a000016 	beq	950 <__call_exitprocs+0x118>
 8f4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 8f8:	e1120001 	tst	r2, r1
 8fc:	1a000016 	bne	95c <__call_exitprocs+0x124>
 900:	e59d0008 	ldr	r0, [sp, #8]
 904:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 908:	e1a0e00f 	mov	lr, pc
 90c:	e12fff13 	bx	r3
 910:	e5963004 	ldr	r3, [r6, #4]
 914:	e1530009 	cmp	r3, r9
 918:	1affffd0 	bne	860 <__call_exitprocs+0x28>
 91c:	e59b3000 	ldr	r3, [r11]
 920:	e1530006 	cmp	r3, r6
 924:	1affffcd 	bne	860 <__call_exitprocs+0x28>
 928:	e2444001 	sub	r4, r4, #1
 92c:	e3740001 	cmn	r4, #1
 930:	e2455004 	sub	r5, r5, #4
 934:	1affffdc 	bne	8ac <__call_exitprocs+0x74>
 938:	e59f1070 	ldr	r1, [pc, #112]	; 9b0 <__call_exitprocs+0x178>
 93c:	e3510000 	cmp	r1, #0
 940:	1a000009 	bne	96c <__call_exitprocs+0x134>
 944:	e28dd014 	add	sp, sp, #20
 948:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 94c:	e12fff1e 	bx	lr
 950:	e1a0e00f 	mov	lr, pc
 954:	e12fff13 	bx	r3
 958:	eaffffec 	b	910 <__call_exitprocs+0xd8>
 95c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 960:	e1a0e00f 	mov	lr, pc
 964:	e12fff13 	bx	r3
 968:	eaffffe8 	b	910 <__call_exitprocs+0xd8>
 96c:	e5963004 	ldr	r3, [r6, #4]
 970:	e3530000 	cmp	r3, #0
 974:	e5963000 	ldr	r3, [r6]
 978:	1a000008 	bne	9a0 <__call_exitprocs+0x168>
 97c:	e3530000 	cmp	r3, #0
 980:	0a000006 	beq	9a0 <__call_exitprocs+0x168>
 984:	e1a00006 	mov	r0, r6
 988:	e58b3000 	str	r3, [r11]
 98c:	e320f000 	nop	{0}
 990:	e59b6000 	ldr	r6, [r11]
 994:	e3560000 	cmp	r6, #0
 998:	1affffb5 	bne	874 <__call_exitprocs+0x3c>
 99c:	eaffffe8 	b	944 <__call_exitprocs+0x10c>
 9a0:	e1a0b006 	mov	r11, r6
 9a4:	e1a06003 	mov	r6, r3
 9a8:	eafffff9 	b	994 <__call_exitprocs+0x15c>
 9ac:	00000b28 	.word	0x00000b28
 9b0:	00000000 	.word	0x00000000

000009b4 <register_fini>:
 9b4:	e92d4008 	push	{r3, lr}
 9b8:	e59f3010 	ldr	r3, [pc, #16]	; 9d0 <register_fini+0x1c>
 9bc:	e3530000 	cmp	r3, #0
 9c0:	159f000c 	ldrne	r0, [pc, #12]	; 9d4 <register_fini+0x20>
 9c4:	1bffff49 	blne	6f0 <atexit>
 9c8:	e8bd4008 	pop	{r3, lr}
 9cc:	e12fff1e 	bx	lr
 9d0:	00000b50 	.word	0x00000b50
 9d4:	000009d8 	.word	0x000009d8

000009d8 <__libc_fini_array>:
 9d8:	e92d4038 	push	{r3, r4, r5, lr}
 9dc:	e59f5030 	ldr	r5, [pc, #48]	; a14 <__libc_fini_array+0x3c>
 9e0:	e59f4030 	ldr	r4, [pc, #48]	; a18 <__libc_fini_array+0x40>
 9e4:	e0654004 	rsb	r4, r5, r4
 9e8:	e1b04144 	asrs	r4, r4, #2
 9ec:	10855104 	addne	r5, r5, r4, lsl #2
 9f0:	0a000004 	beq	a08 <__libc_fini_array+0x30>
 9f4:	e5353004 	ldr	r3, [r5, #-4]!
 9f8:	e1a0e00f 	mov	lr, pc
 9fc:	e12fff13 	bx	r3
 a00:	e2544001 	subs	r4, r4, #1
 a04:	1afffffa 	bne	9f4 <__libc_fini_array+0x1c>
 a08:	eb000050 	bl	b50 <__libc_fini>
 a0c:	e8bd4038 	pop	{r3, r4, r5, lr}
 a10:	e12fff1e 	bx	lr
 a14:	00000b68 	.word	0x00000b68
 a18:	00000b6c 	.word	0x00000b6c

00000a1c <__cs3_premain>:
 a1c:	e92d4008 	push	{r3, lr}
 a20:	eb00001d 	bl	a9c <__libc_init_array>
 a24:	e59f3030 	ldr	r3, [pc, #48]	; a5c <__cs3_premain+0x40>
 a28:	e3530000 	cmp	r3, #0
 a2c:	15930000 	ldrne	r0, [r3]
 a30:	01a00003 	moveq	r0, r3
 a34:	e59f3024 	ldr	r3, [pc, #36]	; a60 <__cs3_premain+0x44>
 a38:	e3530000 	cmp	r3, #0
 a3c:	15931000 	ldrne	r1, [r3]
 a40:	01a01003 	moveq	r1, r3
 a44:	e3a02000 	mov	r2, #0
 a48:	ebfffe59 	bl	3b4 <main>
 a4c:	e59f3010 	ldr	r3, [pc, #16]	; a64 <__cs3_premain+0x48>
 a50:	e3530000 	cmp	r3, #0
 a54:	1bffff2d 	blne	710 <exit>
 a58:	eafffffe 	b	a58 <__cs3_premain+0x3c>
	...
 a64:	00000710 	.word	0x00000710

00000a68 <_exit>:
 a68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a6c:	e3a00018 	mov	r0, #24
 a70:	e59f1004 	ldr	r1, [pc, #4]	; a7c <_exit+0x14>
 a74:	ef123456 	svc	0x00123456
 a78:	eafffffe 	b	a78 <_exit+0x10>
 a7c:	00020026 	.word	0x00020026

00000a80 <__cs3_isr_interrupt>:
 a80:	eafffffe 	b	a80 <__cs3_isr_interrupt>

00000a84 <__cs3_isr_undef>:
 a84:	eafffffe 	b	a84 <__cs3_isr_undef>

00000a88 <__cs3_isr_swi>:
 a88:	eafffffe 	b	a88 <__cs3_isr_swi>

00000a8c <__cs3_isr_pabort>:
 a8c:	eafffffe 	b	a8c <__cs3_isr_pabort>

00000a90 <__cs3_isr_dabort>:
 a90:	eafffffe 	b	a90 <__cs3_isr_dabort>

00000a94 <__cs3_isr_irq>:
 a94:	eafffffe 	b	a94 <__cs3_isr_irq>

00000a98 <__cs3_isr_fiq>:
 a98:	eafffffe 	b	a98 <__cs3_isr_fiq>

00000a9c <__libc_init_array>:
 a9c:	e92d4070 	push	{r4, r5, r6, lr}
 aa0:	e59f506c 	ldr	r5, [pc, #108]	; b14 <__libc_init_array+0x78>
 aa4:	e59f606c 	ldr	r6, [pc, #108]	; b18 <__libc_init_array+0x7c>
 aa8:	e0656006 	rsb	r6, r5, r6
 aac:	e1b06146 	asrs	r6, r6, #2
 ab0:	12455004 	subne	r5, r5, #4
 ab4:	13a04000 	movne	r4, #0
 ab8:	0a000005 	beq	ad4 <__libc_init_array+0x38>
 abc:	e5b53004 	ldr	r3, [r5, #4]!
 ac0:	e2844001 	add	r4, r4, #1
 ac4:	e1a0e00f 	mov	lr, pc
 ac8:	e12fff13 	bx	r3
 acc:	e1560004 	cmp	r6, r4
 ad0:	1afffff9 	bne	abc <__libc_init_array+0x20>
 ad4:	e59f5040 	ldr	r5, [pc, #64]	; b1c <__libc_init_array+0x80>
 ad8:	e59f6040 	ldr	r6, [pc, #64]	; b20 <__libc_init_array+0x84>
 adc:	e0656006 	rsb	r6, r5, r6
 ae0:	eb000012 	bl	b30 <_init>
 ae4:	e1b06146 	asrs	r6, r6, #2
 ae8:	12455004 	subne	r5, r5, #4
 aec:	13a04000 	movne	r4, #0
 af0:	0a000005 	beq	b0c <__libc_init_array+0x70>
 af4:	e5b53004 	ldr	r3, [r5, #4]!
 af8:	e2844001 	add	r4, r4, #1
 afc:	e1a0e00f 	mov	lr, pc
 b00:	e12fff13 	bx	r3
 b04:	e1560004 	cmp	r6, r4
 b08:	1afffff9 	bne	af4 <__libc_init_array+0x58>
 b0c:	e8bd4070 	pop	{r4, r5, r6, lr}
 b10:	e12fff1e 	bx	lr
 b14:	00000b48 	.word	0x00000b48
 b18:	00000b48 	.word	0x00000b48
 b1c:	00000b48 	.word	0x00000b48
 b20:	00000b50 	.word	0x00000b50

Disassembly of section .rodata:

00000b28 <_global_impure_ptr>:
 b28:	00000b90 00000043                       ....C...

00000b30 <_init>:
 b30:	e1a0c00d 	mov	r12, sp
 b34:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b38:	e24cb004 	sub	r11, r12, #4
 b3c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b40:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b44:	e12fff1e 	bx	lr

00000b48 <__init_array_start>:
 b48:	000009b4 	.word	0x000009b4

00000b4c <__frame_dummy_init_array_entry>:
 b4c:	00000208                                ....

00000b50 <__libc_fini>:
 b50:	e1a0c00d 	mov	r12, sp
 b54:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b58:	e24cb004 	sub	r11, r12, #4
 b5c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b60:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b64:	e12fff1e 	bx	lr

00000b68 <__fini_array_start>:
 b68:	000001c4 	.word	0x000001c4

00000b6c <__cs3_regions>:
 b6c:	00000000 	.word	0x00000000
 b70:	00000040 	.word	0x00000040
 b74:	00000040 	.word	0x00000040
 b78:	00000f80 	.word	0x00000f80
 b7c:	00000020 	.word	0x00000020


//campus.mcgill.ca/EMF/ELE/bjay/Desktop/G19_Lab1/center.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start:		LDR R4, =RESULT		// holds the average location
   0:	e59f4094 	ldr	r4, [pc, #148]	; 9c <SIGNAL+0x20>
			LDR R3, [R4, #4]	// holds the total number of values
   4:	e5943004 	ldr	r3, [r4, #4]
			ADD R2, R4, #8		// holds the address of the first number in the list
   8:	e2842008 	add	r2, r4, #8
			LDR R0, [R2]		// holds the total of the numbers
   c:	e5920000 	ldr	r0, [r2]

00000010 <TOTAL>:

TOTAL:		SUBS R3, R3, #1		// decrement the counter
  10:	e2533001 	subs	r3, r3, #1
			BEQ ENDTOTAL		//end loop if counter had reached 0
  14:	0a000003 	beq	28 <ENDTOTAL>
			ADD R2, R2, #4
  18:	e2822004 	add	r2, r2, #4
			LDR R1, [R2]
  1c:	e5921000 	ldr	r1, [r2]
			ADD R0, R0, R1
  20:	e0800001 	add	r0, r0, r1
			B TOTAL
  24:	eafffff9 	b	10 <TOTAL>

00000028 <ENDTOTAL>:

ENDTOTAL: 	LDR R3, [R4, #4]	// holds the total number of values
  28:	e5943004 	ldr	r3, [r4, #4]
			B AVERAGE
  2c:	eaffffff 	b	30 <AVERAGE>

00000030 <AVERAGE>:

AVERAGE:	LSR R3, R3, #1		// divide by 2 until counter hits 0
  30:	e1a030a3 	lsr	r3, r3, #1
			CMP R3, #0	
  34:	e3530000 	cmp	r3, #0
			BEQ ENDAVERAGE	 	// if 0, then divide by 2 one more time then do substraction
  38:	0a000001 	beq	44 <ENDAVERAGE>
			LSR R0, R0, #1		// divide the total numbers by 2 to get avg
  3c:	e1a000a0 	lsr	r0, r0, #1
			B AVERAGE
  40:	eafffffa 	b	30 <AVERAGE>

00000044 <ENDAVERAGE>:

ENDAVERAGE:	STR R0, [R4]
  44:	e5840000 	str	r0, [r4]
			ADD R2, R4, #8		// holds the address of the first number in the list
  48:	e2842008 	add	r2, r4, #8
			LDR R3, [R4, #4]	// holds the total number of values
  4c:	e5943004 	ldr	r3, [r4, #4]
			B SUBS_AVG
  50:	eaffffff 	b	54 <SUBS_AVG>

00000054 <SUBS_AVG>:

SUBS_AVG:	LDR R5, [R2]		// load the value of the number
  54:	e5925000 	ldr	r5, [r2]
			SUB R5, R5, R0		// take the number - avg
  58:	e0455000 	sub	r5, r5, r0
			STR R5, [R2]		// store the new value
  5c:	e5825000 	str	r5, [r2]
			ADD R2, R2, #4		// R2 holds the address of the next number 
  60:	e2822004 	add	r2, r2, #4
			SUBS R3, R3, #1 	// decrement counter
  64:	e2533001 	subs	r3, r3, #1
			BEQ END				// if 0, then the numbers have been cycled through
  68:	0a000000 	beq	70 <END>
			B SUBS_AVG
  6c:	eafffff8 	b	54 <SUBS_AVG>

00000070 <END>:


END: 		B END
  70:	eafffffe 	b	70 <END>

00000074 <RESULT>:
  74:	00000000 	.word	0x00000000

00000078 <N>:
  78:	00000008 	.word	0x00000008

0000007c <SIGNAL>:
  7c:	00000004 	.word	0x00000004
  80:	00000005 	.word	0x00000005
  84:	00000003 	.word	0x00000003
  88:	00000006 	.word	0x00000006
  8c:	00000001 	.word	0x00000001
  90:	00000008 	.word	0x00000008
  94:	00000006 	.word	0x00000006
  98:	00000007 	.word	0x00000007
  9c:	00000074 	.word	0x00000074
